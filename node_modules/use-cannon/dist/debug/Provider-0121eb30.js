import React, { useState, useRef, useEffect, useMemo } from 'react';
import { _ as _extends, c as context } from './index-ab2bdb51.js';
import 'three';
import { useThree } from 'react-three-fiber';

function decodeBase64(base64, enableUnicode) {
    var binaryString = atob(base64);
    if (enableUnicode) {
        var binaryView = new Uint8Array(binaryString.length);
        for (var i = 0, n = binaryString.length; i < n; ++i) {
            binaryView[i] = binaryString.charCodeAt(i);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
    }
    return binaryString;
}

function createURL(base64, sourcemapArg, enableUnicodeArg) {
    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
    var source = decodeBase64(base64, enableUnicode);
    var start = source.indexOf('\n', 10) + 1;
    var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
    var blob = new Blob([body], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
}

function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
    var url;
    return function WorkerFactory(options) {
        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
        return new Worker(url, options);
    };
}

var WorkerFactory = createBase64WorkerFactory('/* rollup-plugin-web-worker-loader */
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/**
 * Records what objects are colliding with each other
 * @class ObjectCollisionMatrix
 * @constructor
 */
/**
 * A 3x3 matrix.
 * @class Mat3
 * @constructor
 * @param {Array} elements A vector of length 9, containing all matrix elements. Optional.
 * @author schteppe / http://github.com/schteppe
 */


class Mat3 {
  constructor(elements = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {
    this.elements = elements;
  }
  /**
   * Sets the matrix to identity
   * @method identity
   * @todo Should perhaps be renamed to setIdentity() to be more clear.
   * @todo Create another function that immediately creates an identity matrix eg. eye()
   */


  identity() {
    const e = this.elements;
    e[0] = 1;
    e[1] = 0;
    e[2] = 0;
    e[3] = 0;
    e[4] = 1;
    e[5] = 0;
    e[6] = 0;
    e[7] = 0;
    e[8] = 1;
  }
  /**
   * Set all elements to zero
   * @method setZero
   */


  setZero() {
    const e = this.elements;
    e[0] = 0;
    e[1] = 0;
    e[2] = 0;
    e[3] = 0;
    e[4] = 0;
    e[5] = 0;
    e[6] = 0;
    e[7] = 0;
    e[8] = 0;
  }
  /**
   * Sets the matrix diagonal elements from a Vec3
   * @method setTrace
   * @param {Vec3} vec3
   */


  setTrace(vector) {
    const e = this.elements;
    e[0] = vector.x;
    e[4] = vector.y;
    e[8] = vector.z;
  }
  /**
   * Gets the matrix diagonal elements
   * @method getTrace
   * @return {Vec3}
   */


  getTrace(target = new Vec3()) {
    const e = this.elements;
    target.x = e[0];
    target.y = e[4];
    target.z = e[8];
  }
  /**
   * Matrix-Vector multiplication
   * @method vmult
   * @param {Vec3} v The vector to multiply with
   * @param {Vec3} target Optional, target to save the result in.
   */


  vmult(v, target = new Vec3()) {
    const e = this.elements;
    const x = v.x;
    const y = v.y;
    const z = v.z;
    target.x = e[0] * x + e[1] * y + e[2] * z;
    target.y = e[3] * x + e[4] * y + e[5] * z;
    target.z = e[6] * x + e[7] * y + e[8] * z;
    return target;
  }
  /**
   * Matrix-scalar multiplication
   * @method smult
   * @param {Number} s
   */


  smult(s) {
    for (let i = 0; i < this.elements.length; i++) {
      this.elements[i] *= s;
    }
  }
  /**
   * Matrix multiplication
   * @method mmult
   * @param {Mat3} matrix Matrix to multiply with from left side.
   * @return {Mat3} The result.
   */


  mmult(matrix, target = new Mat3()) {
    const {
      elements
    } = matrix;

    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        let sum = 0.0;

        for (let k = 0; k < 3; k++) {
          sum += elements[i + k * 3] * this.elements[k + j * 3];
        }

        target.elements[i + j * 3] = sum;
      }
    }

    return target;
  }
  /**
   * Scale each column of the matrix
   * @method scale
   * @param {Vec3} v
   * @return {Mat3} The result.
   */


  scale(vector, target = new Mat3()) {
    const e = this.elements;
    const t = target.elements;

    for (let i = 0; i !== 3; i++) {
      t[3 * i + 0] = vector.x * e[3 * i + 0];
      t[3 * i + 1] = vector.y * e[3 * i + 1];
      t[3 * i + 2] = vector.z * e[3 * i + 2];
    }

    return target;
  }
  /**
   * Solve Ax=b
   * @method solve
   * @param {Vec3} b The right hand side
   * @param {Vec3} target Optional. Target vector to save in.
   * @return {Vec3} The solution x
   * @todo should reuse arrays
   */


  solve(b, target = new Vec3()) {
    // Construct equations
    const nr = 3; // num rows

    const nc = 4; // num cols

    const eqns = [];
    let i;
    let j;

    for (i = 0; i < nr * nc; i++) {
      eqns.push(0);
    }

    for (i = 0; i < 3; i++) {
      for (j = 0; j < 3; j++) {
        eqns[i + nc * j] = this.elements[i + 3 * j];
      }
    }

    eqns[3 + 4 * 0] = b.x;
    eqns[3 + 4 * 1] = b.y;
    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination

    let n = 3;
    const k = n;
    let np;
    const kp = 4; // num rows

    let p;

    do {
      i = k - n;

      if (eqns[i + nc * i] === 0) {
        // the pivot is null, swap lines
        for (j = i + 1; j < k; j++) {
          if (eqns[i + nc * j] !== 0) {
            np = kp;

            do {
              // do ligne( i ) = ligne( i ) + ligne( k )
              p = kp - np;
              eqns[p + nc * i] += eqns[p + nc * j];
            } while (--np);

            break;
          }
        }
      }

      if (eqns[i + nc * i] !== 0) {
        for (j = i + 1; j < k; j++) {
          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
          np = kp;

          do {
            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )
            p = kp - np;
            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
          } while (--np);
        }
      }
    } while (--n); // Get the solution


    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];
    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];
    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];

    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {
      throw "Could not solve equation! Got x=[" + target.toString() + "], b=[" + b.toString() + "], A=[" + this.toString() + "]";
    }

    return target;
  }
  /**
   * Get an element in the matrix by index. Index starts at 0, not 1!!!
   * @method e
   * @param {Number} row
   * @param {Number} column
   * @param {Number} value Optional. If provided, the matrix element will be set to this value.
   * @return {Number}
   */


  e(row, column, value) {
    if (value === undefined) {
      return this.elements[column + 3 * row];
    } else {
      // Set value
      this.elements[column + 3 * row] = value;
    }
  }
  /**
   * Copy another matrix into this matrix object.
   * @method copy
   * @param {Mat3} source
   * @return {Mat3} this
   */


  copy(matrix) {
    for (let i = 0; i < matrix.elements.length; i++) {
      this.elements[i] = matrix.elements[i];
    }

    return this;
  }
  /**
   * Returns a string representation of the matrix.
   * @method toString
   * @return string
   */


  toString() {
    let r = '';
    const sep = ',';

    for (let i = 0; i < 9; i++) {
      r += this.elements[i] + sep;
    }

    return r;
  }
  /**
   * reverse the matrix
   * @method reverse
   * @param {Mat3} target Optional. Target matrix to save in.
   * @return {Mat3} The solution x
   */


  reverse(target = new Mat3()) {
    // Construct equations
    const nr = 3; // num rows

    const nc = 6; // num cols

    const eqns = [];
    let i;
    let j;

    for (i = 0; i < nr * nc; i++) {
      eqns.push(0);
    }

    for (i = 0; i < 3; i++) {
      for (j = 0; j < 3; j++) {
        eqns[i + nc * j] = this.elements[i + 3 * j];
      }
    }

    eqns[3 + 6 * 0] = 1;
    eqns[3 + 6 * 1] = 0;
    eqns[3 + 6 * 2] = 0;
    eqns[4 + 6 * 0] = 0;
    eqns[4 + 6 * 1] = 1;
    eqns[4 + 6 * 2] = 0;
    eqns[5 + 6 * 0] = 0;
    eqns[5 + 6 * 1] = 0;
    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination

    let n = 3;
    const k = n;
    let np;
    const kp = nc; // num rows

    let p;

    do {
      i = k - n;

      if (eqns[i + nc * i] === 0) {
        // the pivot is null, swap lines
        for (j = i + 1; j < k; j++) {
          if (eqns[i + nc * j] !== 0) {
            np = kp;

            do {
              // do line( i ) = line( i ) + line( k )
              p = kp - np;
              eqns[p + nc * i] += eqns[p + nc * j];
            } while (--np);

            break;
          }
        }
      }

      if (eqns[i + nc * i] !== 0) {
        for (j = i + 1; j < k; j++) {
          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
          np = kp;

          do {
            // do line( k ) = line( k ) - multiplier * line( i )
            p = kp - np;
            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
          } while (--np);
        }
      }
    } while (--n); // eliminate the upper left triangle of the matrix


    i = 2;

    do {
      j = i - 1;

      do {
        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
        np = nc;

        do {
          p = nc - np;
          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
        } while (--np);
      } while (j--);
    } while (--i); // operations on the diagonal


    i = 2;

    do {
      const multiplier = 1 / eqns[i + nc * i];
      np = nc;

      do {
        p = nc - np;
        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;
      } while (--np);
    } while (i--);

    i = 2;

    do {
      j = 2;

      do {
        p = eqns[nr + j + nc * i];

        if (isNaN(p) || p === Infinity) {
          throw "Could not reverse! A=[" + this.toString() + "]";
        }

        target.e(i, j, p);
      } while (j--);
    } while (i--);

    return target;
  }
  /**
   * Set the matrix from a quaterion
   * @method setRotationFromQuaternion
   * @param {Quaternion} q
   */


  setRotationFromQuaternion(q) {
    const x = q.x;
    const y = q.y;
    const z = q.z;
    const w = q.w;
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    const e = this.elements;
    e[3 * 0 + 0] = 1 - (yy + zz);
    e[3 * 0 + 1] = xy - wz;
    e[3 * 0 + 2] = xz + wy;
    e[3 * 1 + 0] = xy + wz;
    e[3 * 1 + 1] = 1 - (xx + zz);
    e[3 * 1 + 2] = yz - wx;
    e[3 * 2 + 0] = xz - wy;
    e[3 * 2 + 1] = yz + wx;
    e[3 * 2 + 2] = 1 - (xx + yy);
    return this;
  }
  /**
   * Transpose the matrix
   * @method transpose
   * @param  {Mat3} target Optional. Where to store the result.
   * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.
   */


  transpose(target = new Mat3()) {
    const Mt = target.elements;
    const M = this.elements;

    for (let i = 0; i !== 3; i++) {
      for (let j = 0; j !== 3; j++) {
        Mt[3 * i + j] = M[3 * j + i];
      }
    }

    return target;
  }

}
/**
 * 3-dimensional vector
 * @class Vec3
 * @constructor
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @author schteppe
 * @example
 *     const v = new Vec3(1, 2, 3);
 *     console.log('x=' + v.x); // x=1
 */


class Vec3 {
  constructor(x = 0.0, y = 0.0, z = 0.0) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  /**
   * Vector cross product
   * @method cross
   * @param {Vec3} v
   * @param {Vec3} target Optional. Target to save in.
   * @return {Vec3}
   */


  cross(vector, target = new Vec3()) {
    const vx = vector.x;
    const vy = vector.y;
    const vz = vector.z;
    const x = this.x;
    const y = this.y;
    const z = this.z;
    target.x = y * vz - z * vy;
    target.y = z * vx - x * vz;
    target.z = x * vy - y * vx;
    return target;
  }
  /**
   * Set the vectors' 3 elements
   * @method set
   * @param {Number} x
   * @param {Number} y
   * @param {Number} z
   * @return Vec3
   */


  set(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  /**
   * Set all components of the vector to zero.
   * @method setZero
   */


  setZero() {
    this.x = this.y = this.z = 0;
  }
  /**
   * Vector addition
   * @method vadd
   * @param {Vec3} v
   * @param {Vec3} target Optional.
   * @return {Vec3}
   */


  vadd(vector, target) {
    if (target) {
      target.x = vector.x + this.x;
      target.y = vector.y + this.y;
      target.z = vector.z + this.z;
    } else {
      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);
    }
  }
  /**
   * Vector subtraction
   * @method vsub
   * @param {Vec3} v
   * @param {Vec3} target Optional. Target to save in.
   * @return {Vec3}
   */


  vsub(vector, target) {
    if (target) {
      target.x = this.x - vector.x;
      target.y = this.y - vector.y;
      target.z = this.z - vector.z;
    } else {
      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);
    }
  }
  /**
   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c
   * @method crossmat
   * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf
   * @return {Mat3}
   */


  crossmat() {
    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
  }
  /**
   * Normalize the vector. Note that this changes the values in the vector.
   * @method normalize
   * @return {Number} Returns the norm of the vector
   */


  normalize() {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const n = Math.sqrt(x * x + y * y + z * z);

    if (n > 0.0) {
      const invN = 1 / n;
      this.x *= invN;
      this.y *= invN;
      this.z *= invN;
    } else {
      // Make something up
      this.x = 0;
      this.y = 0;
      this.z = 0;
    }

    return n;
  }
  /**
   * Get the version of this vector that is of length 1.
   * @method unit
   * @param {Vec3} target Optional target to save in
   * @return {Vec3} Returns the unit vector
   */


  unit(target = new Vec3()) {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    let ninv = Math.sqrt(x * x + y * y + z * z);

    if (ninv > 0.0) {
      ninv = 1.0 / ninv;
      target.x = x * ninv;
      target.y = y * ninv;
      target.z = z * ninv;
    } else {
      target.x = 1;
      target.y = 0;
      target.z = 0;
    }

    return target;
  }
  /**
   * Get the length of the vector
   * @method length
   * @return {Number}
   */


  length() {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    return Math.sqrt(x * x + y * y + z * z);
  }
  /**
   * Get the squared length of the vector.
   * @method lengthSquared
   * @return {Number}
   */


  lengthSquared() {
    return this.dot(this);
  }
  /**
   * Get distance from this point to another point
   * @method distanceTo
   * @param  {Vec3} p
   * @return {Number}
   */


  distanceTo(p) {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const px = p.x;
    const py = p.y;
    const pz = p.z;
    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));
  }
  /**
   * Get squared distance from this point to another point
   * @method distanceSquared
   * @param  {Vec3} p
   * @return {Number}
   */


  distanceSquared(p) {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const px = p.x;
    const py = p.y;
    const pz = p.z;
    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);
  }
  /**
   * Multiply all the components of the vector with a scalar.
   * @method scale
   * @param {Number} scalar
   * @param {Vec3} target The vector to save the result in.
   * @return {Vec3}
   */


  scale(scalar, target = new Vec3()) {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    target.x = scalar * x;
    target.y = scalar * y;
    target.z = scalar * z;
    return target;
  }
  /**
   * Multiply the vector with an other vector, component-wise.
   * @method vmult
   * @param {Number} vector
   * @param {Vec3} target The vector to save the result in.
   * @return {Vec3}
   */


  vmul(vector, target = new Vec3()) {
    target.x = vector.x * this.x;
    target.y = vector.y * this.y;
    target.z = vector.z * this.z;
    return target;
  }
  /**
   * Scale a vector and add it to this vector. Save the result in "target". (target = this + vector * scalar)
   * @method addScaledVector
   * @param {Number} scalar
   * @param {Vec3} vector
   * @param {Vec3} target The vector to save the result in.
   * @return {Vec3}
   */


  addScaledVector(scalar, vector, target = new Vec3()) {
    target.x = this.x + scalar * vector.x;
    target.y = this.y + scalar * vector.y;
    target.z = this.z + scalar * vector.z;
    return target;
  }
  /**
   * Calculate dot product
   * @method dot
   * @param {Vec3} v
   * @return {Number}
   */


  dot(vector) {
    return this.x * vector.x + this.y * vector.y + this.z * vector.z;
  }
  /**
   * @method isZero
   * @return bool
   */


  isZero() {
    return this.x === 0 && this.y === 0 && this.z === 0;
  }
  /**
   * Make the vector point in the opposite direction.
   * @method negate
   * @param {Vec3} target Optional target to save in
   * @return {Vec3}
   */


  negate(target = new Vec3()) {
    target.x = -this.x;
    target.y = -this.y;
    target.z = -this.z;
    return target;
  }
  /**
   * Compute two artificial tangents to the vector
   * @method tangents
   * @param {Vec3} t1 Vector object to save the first tangent in
   * @param {Vec3} t2 Vector object to save the second tangent in
   */


  tangents(t1, t2) {
    const norm = this.length();

    if (norm > 0.0) {
      const n = Vec3_tangents_n;
      const inorm = 1 / norm;
      n.set(this.x * inorm, this.y * inorm, this.z * inorm);
      const randVec = Vec3_tangents_randVec;

      if (Math.abs(n.x) < 0.9) {
        randVec.set(1, 0, 0);
        n.cross(randVec, t1);
      } else {
        randVec.set(0, 1, 0);
        n.cross(randVec, t1);
      }

      n.cross(t1, t2);
    } else {
      // The normal length is zero, make something up
      t1.set(1, 0, 0);
      t2.set(0, 1, 0);
    }
  }
  /**
   * Converts to a more readable format
   * @method toString
   * @return string
   */


  toString() {
    return this.x + "," + this.y + "," + this.z;
  }
  /**
   * Converts to an array
   * @method toArray
   * @return Array
   */


  toArray() {
    return [this.x, this.y, this.z];
  }
  /**
   * Copies value of source to this vector.
   * @method copy
   * @param {Vec3} source
   * @return {Vec3} this
   */


  copy(vector) {
    this.x = vector.x;
    this.y = vector.y;
    this.z = vector.z;
    return this;
  }
  /**
   * Do a linear interpolation between two vectors
   * @method lerp
   * @param {Vec3} v
   * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.
   * @param {Vec3} target
   */


  lerp(vector, t, target) {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    target.x = x + (vector.x - x) * t;
    target.y = y + (vector.y - y) * t;
    target.z = z + (vector.z - z) * t;
  }
  /**
   * Check if a vector equals is almost equal to another one.
   * @method almostEquals
   * @param {Vec3} v
   * @param {Number} precision
   * @return bool
   */


  almostEquals(vector, precision = 1e-6) {
    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {
      return false;
    }

    return true;
  }
  /**
   * Check if a vector is almost zero
   * @method almostZero
   * @param {Number} precision
   */


  almostZero(precision = 1e-6) {
    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {
      return false;
    }

    return true;
  }
  /**
   * Check if the vector is anti-parallel to another vector.
   * @method isAntiparallelTo
   * @param  {Vec3}  v
   * @param  {Number}  precision Set to zero for exact comparisons
   * @return {Boolean}
   */


  isAntiparallelTo(vector, precision) {
    this.negate(antip_neg);
    return antip_neg.almostEquals(vector, precision);
  }
  /**
   * Clone the vector
   * @method clone
   * @return {Vec3}
   */


  clone() {
    return new Vec3(this.x, this.y, this.z);
  }

}

Vec3.ZERO = new Vec3(0, 0, 0);
Vec3.UNIT_X = new Vec3(1, 0, 0);
Vec3.UNIT_Y = new Vec3(0, 1, 0);
Vec3.UNIT_Z = new Vec3(0, 0, 1);
/**
 * Compute two artificial tangents to the vector
 * @method tangents
 * @param {Vec3} t1 Vector object to save the first tangent in
 * @param {Vec3} t2 Vector object to save the second tangent in
 */

const Vec3_tangents_n = new Vec3();
const Vec3_tangents_randVec = new Vec3();
const antip_neg = new Vec3();
/**
 * Axis aligned bounding box class.
 * @class AABB
 * @constructor
 * @param {Object} [options]
 * @param {Vec3}   [options.upperBound] The upper bound of the bounding box.
 * @param {Vec3}   [options.lowerBound] The lower bound of the bounding box
 */

class AABB {
  // The lower bound of the bounding box
  // The upper bound of the bounding box
  constructor(options = {}) {
    this.lowerBound = new Vec3();
    this.upperBound = new Vec3();

    if (options.lowerBound) {
      this.lowerBound.copy(options.lowerBound);
    }

    if (options.upperBound) {
      this.upperBound.copy(options.upperBound);
    }
  }
  /**
   * Set the AABB bounds from a set of points.
   * @method setFromPoints
   * @param {Array} points An array of Vec3's.
   * @param {Vec3} position Optional.
   * @param {Quaternion} quaternion Optional.
   * @param {number} skinSize Optional.
   * @return {AABB} The self object
   */


  setFromPoints(points, position, quaternion, skinSize) {
    const l = this.lowerBound;
    const u = this.upperBound;
    const q = quaternion; // Set to the first point

    l.copy(points[0]);

    if (q) {
      q.vmult(l, l);
    }

    u.copy(l);

    for (let i = 1; i < points.length; i++) {
      let p = points[i];

      if (q) {
        q.vmult(p, tmp);
        p = tmp;
      }

      if (p.x > u.x) {
        u.x = p.x;
      }

      if (p.x < l.x) {
        l.x = p.x;
      }

      if (p.y > u.y) {
        u.y = p.y;
      }

      if (p.y < l.y) {
        l.y = p.y;
      }

      if (p.z > u.z) {
        u.z = p.z;
      }

      if (p.z < l.z) {
        l.z = p.z;
      }
    } // Add offset


    if (position) {
      position.vadd(l, l);
      position.vadd(u, u);
    }

    if (skinSize) {
      l.x -= skinSize;
      l.y -= skinSize;
      l.z -= skinSize;
      u.x += skinSize;
      u.y += skinSize;
      u.z += skinSize;
    }

    return this;
  }
  /**
   * Copy bounds from an AABB to this AABB
   * @method copy
   * @param  {AABB} aabb Source to copy from
   * @return {AABB} The this object, for chainability
   */


  copy(aabb) {
    this.lowerBound.copy(aabb.lowerBound);
    this.upperBound.copy(aabb.upperBound);
    return this;
  }
  /**
   * Clone an AABB
   * @method clone
   */


  clone() {
    return new AABB().copy(this);
  }
  /**
   * Extend this AABB so that it covers the given AABB too.
   * @method extend
   * @param  {AABB} aabb
   */


  extend(aabb) {
    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);
    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);
    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);
    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);
    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);
    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);
  }
  /**
   * Returns true if the given AABB overlaps this AABB.
   * @method overlaps
   * @param  {AABB} aabb
   * @return {Boolean}
   */


  overlaps(aabb) {
    const l1 = this.lowerBound;
    const u1 = this.upperBound;
    const l2 = aabb.lowerBound;
    const u2 = aabb.upperBound; //      l2        u2
    //      |---------|
    // |--------|
    // l1       u1

    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;
    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;
    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;
    return overlapsX && overlapsY && overlapsZ;
  } // Mostly for debugging


  volume() {
    const l = this.lowerBound;
    const u = this.upperBound;
    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);
  }
  /**
   * Returns true if the given AABB is fully contained in this AABB.
   * @method contains
   * @param {AABB} aabb
   * @return {Boolean}
   */


  contains(aabb) {
    const l1 = this.lowerBound;
    const u1 = this.upperBound;
    const l2 = aabb.lowerBound;
    const u2 = aabb.upperBound; //      l2        u2
    //      |---------|
    // |---------------|
    // l1              u1

    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;
  }
  /**
   * @method getCorners
   * @param {Vec3} a
   * @param {Vec3} b
   * @param {Vec3} c
   * @param {Vec3} d
   * @param {Vec3} e
   * @param {Vec3} f
   * @param {Vec3} g
   * @param {Vec3} h
   */


  getCorners(a, b, c, d, e, f, g, h) {
    const l = this.lowerBound;
    const u = this.upperBound;
    a.copy(l);
    b.set(u.x, l.y, l.z);
    c.set(u.x, u.y, l.z);
    d.set(l.x, u.y, u.z);
    e.set(u.x, l.y, u.z);
    f.set(l.x, u.y, l.z);
    g.set(l.x, l.y, u.z);
    h.copy(u);
  }
  /**
   * Get the representation of an AABB in another frame.
   * @method toLocalFrame
   * @param  {Transform} frame
   * @param  {AABB} target
   * @return {AABB} The "target" AABB object.
   */


  toLocalFrame(frame, target) {
    const corners = transformIntoFrame_corners;
    const a = corners[0];
    const b = corners[1];
    const c = corners[2];
    const d = corners[3];
    const e = corners[4];
    const f = corners[5];
    const g = corners[6];
    const h = corners[7]; // Get corners in current frame

    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame

    for (let i = 0; i !== 8; i++) {
      const corner = corners[i];
      frame.pointToLocal(corner, corner);
    }

    return target.setFromPoints(corners);
  }
  /**
   * Get the representation of an AABB in the global frame.
   * @method toWorldFrame
   * @param  {Transform} frame
   * @param  {AABB} target
   * @return {AABB} The "target" AABB object.
   */


  toWorldFrame(frame, target) {
    const corners = transformIntoFrame_corners;
    const a = corners[0];
    const b = corners[1];
    const c = corners[2];
    const d = corners[3];
    const e = corners[4];
    const f = corners[5];
    const g = corners[6];
    const h = corners[7]; // Get corners in current frame

    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame

    for (let i = 0; i !== 8; i++) {
      const corner = corners[i];
      frame.pointToWorld(corner, corner);
    }

    return target.setFromPoints(corners);
  }
  /**
   * Check if the AABB is hit by a ray.
   * @param  {Ray} ray
   * @return {Boolean}
   */


  overlapsRay(ray) {
    const {
      direction,
      from
    } = ray;
    const dirFracX = 1 / direction.x;
    const dirFracY = 1 / direction.y;
    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner

    const t1 = (this.lowerBound.x - from.x) * dirFracX;
    const t2 = (this.upperBound.x - from.x) * dirFracX;
    const t3 = (this.lowerBound.y - from.y) * dirFracY;
    const t4 = (this.upperBound.y - from.y) * dirFracY;
    const t5 = (this.lowerBound.z - from.z) * dirFracZ;
    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));
    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));

    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us

    if (tmax < 0) {
      //t = tmax;
      return false;
    } // if tmin > tmax, ray doesn't intersect AABB


    if (tmin > tmax) {
      //t = tmax;
      return false;
    }

    return true;
  }

}

const tmp = new Vec3();
const transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
/**
 * Collision "matrix". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step
 * @class ArrayCollisionMatrix
 * @constructor
 */

class ArrayCollisionMatrix {
  // The matrix storage.
  constructor() {
    this.matrix = [];
  }
  /**
   * Get an element
   * @method get
   * @param  {Body} i
   * @param  {Body} j
   * @return {Number}
   */


  get(bi, bj) {
    let {
      index: i
    } = bi;
    let {
      index: j
    } = bj;

    if (j > i) {
      const temp = j;
      j = i;
      i = temp;
    }

    return this.matrix[(i * (i + 1) >> 1) + j - 1];
  }
  /**
   * Set an element
   * @method set
   * @param {Body} i
   * @param {Body} j
   * @param {boolean} value
   */


  set(bi, bj, value) {
    let {
      index: i
    } = bi;
    let {
      index: j
    } = bj;

    if (j > i) {
      const temp = j;
      j = i;
      i = temp;
    }

    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;
  }
  /**
   * Sets all elements to zero
   * @method reset
   */


  reset() {
    for (let i = 0, l = this.matrix.length; i !== l; i++) {
      this.matrix[i] = 0;
    }
  }
  /**
   * Sets the max number of objects
   * @method setNumObjects
   * @param {Number} n
   */


  setNumObjects(n) {
    this.matrix.length = n * (n - 1) >> 1;
  }

}
/**
 * Base class for objects that dispatches events.
 * @class EventTarget
 * @constructor
 */


class EventTarget {
  constructor() {}
  /**
   * Add an event listener
   * @method addEventListener
   * @param  {String} type
   * @param  {Function} listener
   * @return {EventTarget} The self object, for chainability.
   */


  addEventListener(type, listener) {
    if (this._listeners === undefined) {
      this._listeners = {};
    }

    const listeners = this._listeners;

    if (listeners[type] === undefined) {
      listeners[type] = [];
    }

    if (!listeners[type].includes(listener)) {
      listeners[type].push(listener);
    }

    return this;
  }
  /**
   * Check if an event listener is added
   * @method hasEventListener
   * @param  {String} type
   * @param  {Function} listener
   * @return {Boolean}
   */


  hasEventListener(type, listener) {
    if (this._listeners === undefined) {
      return false;
    }

    const listeners = this._listeners;

    if (listeners[type] !== undefined && listeners[type].includes(listener)) {
      return true;
    }

    return false;
  }
  /**
   * Check if any event listener of the given type is added
   * @method hasAnyEventListener
   * @param  {String} type
   * @return {Boolean}
   */


  hasAnyEventListener(type) {
    if (this._listeners === undefined) {
      return false;
    }

    const listeners = this._listeners;
    return listeners[type] !== undefined;
  }
  /**
   * Remove an event listener
   * @method removeEventListener
   * @param  {String} type
   * @param  {Function} listener
   * @return {EventTarget} The self object, for chainability.
   */


  removeEventListener(type, listener) {
    if (this._listeners === undefined) {
      return this;
    }

    const listeners = this._listeners;

    if (listeners[type] === undefined) {
      return this;
    }

    const index = listeners[type].indexOf(listener);

    if (index !== -1) {
      listeners[type].splice(index, 1);
    }

    return this;
  }
  /**
   * Emit an event.
   * @method dispatchEvent
   * @param  {Object} event
   * @param  {String} event.type
   * @return {EventTarget} The self object, for chainability.
   */


  dispatchEvent(event) {
    if (this._listeners === undefined) {
      return this;
    }

    const listeners = this._listeners;
    const listenerArray = listeners[event.type];

    if (listenerArray !== undefined) {
      event.target = this;

      for (let i = 0, l = listenerArray.length; i < l; i++) {
        listenerArray[i].call(this, event);
      }
    }

    return this;
  }

}
/**
 * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.
 * @param {Number} x Multiplier of the imaginary basis vector i.
 * @param {Number} y Multiplier of the imaginary basis vector j.
 * @param {Number} z Multiplier of the imaginary basis vector k.
 * @param {Number} w Multiplier of the real part.
 * @see http://en.wikipedia.org/wiki/Quaternion
 */


class Quaternion {
  constructor(x = 0, y = 0, z = 0, w = 1) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }
  /**
   * Set the value of the quaternion.
   */


  set(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    return this;
  }
  /**
   * Convert to a readable format
   * @return {String} "x,y,z,w"
   */


  toString() {
    return this.x + "," + this.y + "," + this.z + "," + this.w;
  }
  /**
   * Convert to an Array
   * @return {Array} [x, y, z, w]
   */


  toArray() {
    return [this.x, this.y, this.z, this.w];
  }
  /**
   * Set the quaternion components given an axis and an angle in radians.
   */


  setFromAxisAngle(vector, angle) {
    const s = Math.sin(angle * 0.5);
    this.x = vector.x * s;
    this.y = vector.y * s;
    this.z = vector.z * s;
    this.w = Math.cos(angle * 0.5);
    return this;
  }
  /**
   * Converts the quaternion to [ axis, angle ] representation.
   * @param {Vec3} [targetAxis] A vector object to reuse for storing the axis.
   * @return {Array} An array, first element is the axis and the second is the angle in radians.
   */


  toAxisAngle(targetAxis = new Vec3()) {
    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised

    const angle = 2 * Math.acos(this.w);
    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.

    if (s < 0.001) {
      // test to avoid divide by zero, s is always positive due to sqrt
      // if s close to zero then direction of axis not important
      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;

      targetAxis.y = this.y;
      targetAxis.z = this.z;
    } else {
      targetAxis.x = this.x / s; // normalise axis

      targetAxis.y = this.y / s;
      targetAxis.z = this.z / s;
    }

    return [targetAxis, angle];
  }
  /**
   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.
   */


  setFromVectors(u, v) {
    if (u.isAntiparallelTo(v)) {
      const t1 = sfv_t1;
      const t2 = sfv_t2;
      u.tangents(t1, t2);
      this.setFromAxisAngle(t1, Math.PI);
    } else {
      const a = u.cross(v);
      this.x = a.x;
      this.y = a.y;
      this.z = a.z;
      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);
      this.normalize();
    }

    return this;
  }
  /**
   * Multiply the quaternion with an other quaternion.
   */


  mult(quat, target = new Quaternion()) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const aw = this.w;
    const bx = quat.x;
    const by = quat.y;
    const bz = quat.z;
    const bw = quat.w;
    target.x = ax * bw + aw * bx + ay * bz - az * by;
    target.y = ay * bw + aw * by + az * bx - ax * bz;
    target.z = az * bw + aw * bz + ax * by - ay * bx;
    target.w = aw * bw - ax * bx - ay * by - az * bz;
    return target;
  }
  /**
   * Get the inverse quaternion rotation.
   */


  inverse(target = new Quaternion()) {
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const w = this.w;
    this.conjugate(target);
    const inorm2 = 1 / (x * x + y * y + z * z + w * w);
    target.x *= inorm2;
    target.y *= inorm2;
    target.z *= inorm2;
    target.w *= inorm2;
    return target;
  }
  /**
   * Get the quaternion conjugate
   */


  conjugate(target = new Quaternion()) {
    target.x = -this.x;
    target.y = -this.y;
    target.z = -this.z;
    target.w = this.w;
    return target;
  }
  /**
   * Normalize the quaternion. Note that this changes the values of the quaternion.
   * @method normalize
   */


  normalize() {
    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);

    if (l === 0) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 0;
    } else {
      l = 1 / l;
      this.x *= l;
      this.y *= l;
      this.z *= l;
      this.w *= l;
    }

    return this;
  }
  /**
   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.
   * @see http://jsperf.com/fast-quaternion-normalization
   * @author unphased, https://github.com/unphased
   */


  normalizeFast() {
    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;

    if (f === 0) {
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 0;
    } else {
      this.x *= f;
      this.y *= f;
      this.z *= f;
      this.w *= f;
    }

    return this;
  }
  /**
   * Multiply the quaternion by a vector
   */


  vmult(v, target = new Vec3()) {
    const x = v.x;
    const y = v.y;
    const z = v.z;
    const qx = this.x;
    const qy = this.y;
    const qz = this.z;
    const qw = this.w; // q*v

    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z;
    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return target;
  }
  /**
   * Copies value of source to this quaternion.
   * @method copy
   * @param {Quaternion} source
   * @return {Quaternion} this
   */


  copy(quat) {
    this.x = quat.x;
    this.y = quat.y;
    this.z = quat.z;
    this.w = quat.w;
    return this;
  }
  /**
   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm
   * @method toEuler
   * @param {Vec3} target
   * @param {String} order Three-character string, defaults to "YZX"
   */


  toEuler(target, order = 'YZX') {
    let heading;
    let attitude;
    let bank;
    const x = this.x;
    const y = this.y;
    const z = this.z;
    const w = this.w;

    switch (order) {
      case 'YZX':
        const test = x * y + z * w;

        if (test > 0.499) {
          // singularity at north pole
          heading = 2 * Math.atan2(x, w);
          attitude = Math.PI / 2;
          bank = 0;
        }

        if (test < -0.499) {
          // singularity at south pole
          heading = -2 * Math.atan2(x, w);
          attitude = -Math.PI / 2;
          bank = 0;
        }

        if (heading === undefined) {
          const sqx = x * x;
          const sqy = y * y;
          const sqz = z * z;
          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading

          attitude = Math.asin(2 * test); // attitude

          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank
        }

        break;

      default:
        throw new Error("Euler order " + order + " not supported yet.");
    }

    target.y = heading;
    target.z = attitude;
    target.x = bank;
  }
  /**
   * @param {Number} x
   * @param {Number} y
   * @param {Number} z
   * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination
   * @see http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m
   */


  setFromEuler(x, y, z, order = 'XYZ') {
    const c1 = Math.cos(x / 2);
    const c2 = Math.cos(y / 2);
    const c3 = Math.cos(z / 2);
    const s1 = Math.sin(x / 2);
    const s2 = Math.sin(y / 2);
    const s3 = Math.sin(z / 2);

    if (order === 'XYZ') {
      this.x = s1 * c2 * c3 + c1 * s2 * s3;
      this.y = c1 * s2 * c3 - s1 * c2 * s3;
      this.z = c1 * c2 * s3 + s1 * s2 * c3;
      this.w = c1 * c2 * c3 - s1 * s2 * s3;
    } else if (order === 'YXZ') {
      this.x = s1 * c2 * c3 + c1 * s2 * s3;
      this.y = c1 * s2 * c3 - s1 * c2 * s3;
      this.z = c1 * c2 * s3 - s1 * s2 * c3;
      this.w = c1 * c2 * c3 + s1 * s2 * s3;
    } else if (order === 'ZXY') {
      this.x = s1 * c2 * c3 - c1 * s2 * s3;
      this.y = c1 * s2 * c3 + s1 * c2 * s3;
      this.z = c1 * c2 * s3 + s1 * s2 * c3;
      this.w = c1 * c2 * c3 - s1 * s2 * s3;
    } else if (order === 'ZYX') {
      this.x = s1 * c2 * c3 - c1 * s2 * s3;
      this.y = c1 * s2 * c3 + s1 * c2 * s3;
      this.z = c1 * c2 * s3 - s1 * s2 * c3;
      this.w = c1 * c2 * c3 + s1 * s2 * s3;
    } else if (order === 'YZX') {
      this.x = s1 * c2 * c3 + c1 * s2 * s3;
      this.y = c1 * s2 * c3 + s1 * c2 * s3;
      this.z = c1 * c2 * s3 - s1 * s2 * c3;
      this.w = c1 * c2 * c3 - s1 * s2 * s3;
    } else if (order === 'XZY') {
      this.x = s1 * c2 * c3 - c1 * s2 * s3;
      this.y = c1 * s2 * c3 - s1 * c2 * s3;
      this.z = c1 * c2 * s3 + s1 * s2 * c3;
      this.w = c1 * c2 * c3 + s1 * s2 * s3;
    }

    return this;
  }
  /**
   * @method clone
   * @return {Quaternion}
   */


  clone() {
    return new Quaternion(this.x, this.y, this.z, this.w);
  }
  /**
   * Performs a spherical linear interpolation between two quat
   *
   * @param {Quaternion} toQuat second operand
   * @param {Number} t interpolation amount between the self quaternion and toQuat
   * @param {Quaternion} [target] A quaternion to store the result in. If not provided, a new one will be created.
   * @returns {Quaternion} The "target" object
   */


  slerp(toQuat, t, target = new Quaternion()) {
    const ax = this.x;
    const ay = this.y;
    const az = this.z;
    const aw = this.w;
    let bx = toQuat.x;
    let by = toQuat.y;
    let bz = toQuat.z;
    let bw = toQuat.w;
    let omega;
    let cosom;
    let sinom;
    let scale0;
    let scale1; // calc cosine

    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

    if (cosom < 0.0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    } // calculate coefficients


    if (1.0 - cosom > 0.000001) {
      // standard case (slerp)
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1.0 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      // "from" and "to" quaternions are very close
      //  ... so we can do a linear interpolation
      scale0 = 1.0 - t;
      scale1 = t;
    } // calculate final values


    target.x = scale0 * ax + scale1 * bx;
    target.y = scale0 * ay + scale1 * by;
    target.z = scale0 * az + scale1 * bz;
    target.w = scale0 * aw + scale1 * bw;
    return target;
  }
  /**
   * Rotate an absolute orientation quaternion given an angular velocity and a time step.
   */


  integrate(angularVelocity, dt, angularFactor, target = new Quaternion()) {
    const ax = angularVelocity.x * angularFactor.x,
          ay = angularVelocity.y * angularFactor.y,
          az = angularVelocity.z * angularFactor.z,
          bx = this.x,
          by = this.y,
          bz = this.z,
          bw = this.w;
    const half_dt = dt * 0.5;
    target.x += half_dt * (ax * bw + ay * bz - az * by);
    target.y += half_dt * (ay * bw + az * bx - ax * bz);
    target.z += half_dt * (az * bw + ax * by - ay * bx);
    target.w += half_dt * (-ax * bx - ay * by - az * bz);
    return target;
  }

}

const sfv_t1 = new Vec3();
const sfv_t2 = new Vec3();
const SHAPE_TYPES = {
  SPHERE: 1,
  PLANE: 2,
  BOX: 4,
  COMPOUND: 8,
  CONVEXPOLYHEDRON: 16,
  HEIGHTFIELD: 32,
  PARTICLE: 64,
  CYLINDER: 128,
  TRIMESH: 256
};
/**
 * Base class for shapes
 * @class Shape
 * @constructor
 * @param {object} [options]
 * @param {number} [options.collisionFilterGroup=1]
 * @param {number} [options.collisionFilterMask=-1]
 * @param {number} [options.collisionResponse=true]
 * @param {number} [options.material=null]
 * @author schteppe
 */

class Shape {
  // Identifyer of the Shape.
  // The type of this shape. Must be set to an int > 0 by subclasses.
  // The local bounding sphere radius of this shape.
  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
  constructor(options = {}) {
    this.id = Shape.idCounter++;
    this.type = options.type || 0;
    this.boundingSphereRadius = 0;
    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;
    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;
    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;
    this.material = options.material ? options.material : null;
    this.body = null;
  }
  /**
   * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius
   * @method updateBoundingSphereRadius
   */


  updateBoundingSphereRadius() {
    throw "computeBoundingSphereRadius() not implemented for shape type " + this.type;
  }
  /**
   * Get the volume of this shape
   * @method volume
   * @return {Number}
   */


  volume() {
    throw "volume() not implemented for shape type " + this.type;
  }
  /**
   * Calculates the inertia in the local frame for this shape.
   * @method calculateLocalInertia
   * @param {Number} mass
   * @param {Vec3} target
   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia
   */


  calculateLocalInertia(mass, target) {
    throw "calculateLocalInertia() not implemented for shape type " + this.type;
  }

  calculateWorldAABB(pos, quat, min, max) {
    throw "calculateWorldAABB() not implemented for shape type " + this.type;
  }

}

Shape.idCounter = 0;
/**
 * The available shape types.
 * @static
 * @property types
 * @type {Object}
 */

Shape.types = SHAPE_TYPES;

class Transform {
  constructor(options = {}) {
    this.position = new Vec3();
    this.quaternion = new Quaternion();

    if (options.position) {
      this.position.copy(options.position);
    }

    if (options.quaternion) {
      this.quaternion.copy(options.quaternion);
    }
  }
  /**
   * Get a global point in local transform coordinates.
   */


  pointToLocal(worldPoint, result) {
    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);
  }
  /**
   * Get a local point in global transform coordinates.
   */


  pointToWorld(localPoint, result) {
    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);
  }

  vectorToWorldFrame(localVector, result = new Vec3()) {
    this.quaternion.vmult(localVector, result);
    return result;
  }

  static pointToLocalFrame(position, quaternion, worldPoint, result = new Vec3()) {
    worldPoint.vsub(position, result);
    quaternion.conjugate(tmpQuat);
    tmpQuat.vmult(result, result);
    return result;
  }

  static pointToWorldFrame(position, quaternion, localPoint, result = new Vec3()) {
    quaternion.vmult(localPoint, result);
    result.vadd(position, result);
    return result;
  }

  static vectorToWorldFrame(quaternion, localVector, result = new Vec3()) {
    quaternion.vmult(localVector, result);
    return result;
  }

  static vectorToLocalFrame(position, quaternion, worldVector, result = new Vec3()) {
    quaternion.w *= -1;
    quaternion.vmult(worldVector, result);
    quaternion.w *= -1;
    return result;
  }

}

const tmpQuat = new Quaternion();
/**
 * A set of polygons describing a convex shape.
 * @class ConvexPolyhedron
 * @constructor
 * @extends Shape
 * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained
 * in the same 3D plane), instead these should be merged into one polygon.
 *
 * @param {array} points An array of Vec3's
 * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.
 *
 * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)
 * @author schteppe / https://github.com/schteppe
 * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/
 *
 * @todo Move the clipping functions to ContactGenerator?
 * @todo Automatically merge coplanar polygons in constructor.
 */

class ConvexPolyhedron extends Shape {
  // Array of integer arrays, indicating which vertices each face consists of
  // If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.
  constructor(props = {}) {
    const {
      vertices = [],
      faces = [],
      normals = [],
      axes,
      boundingSphereRadius
    } = props;
    super({
      type: Shape.types.CONVEXPOLYHEDRON
    });
    this.vertices = vertices;
    this.faces = faces;
    this.faceNormals = normals;

    if (this.faceNormals.length === 0) {
      this.computeNormals();
    }

    if (!boundingSphereRadius) {
      this.updateBoundingSphereRadius();
    } else {
      this.boundingSphereRadius = boundingSphereRadius;
    }

    this.worldVertices = []; // World transformed version of .vertices

    this.worldVerticesNeedsUpdate = true;
    this.worldFaceNormals = []; // World transformed version of .faceNormals

    this.worldFaceNormalsNeedsUpdate = true;
    this.uniqueAxes = axes ? axes.slice() : null;
    this.uniqueEdges = [];
    this.computeEdges();
  }
  /**
   * Computes uniqueEdges
   * @method computeEdges
   */


  computeEdges() {
    const faces = this.faces;
    const vertices = this.vertices;
    const edges = this.uniqueEdges;
    edges.length = 0;
    const edge = new Vec3();

    for (let i = 0; i !== faces.length; i++) {
      const face = faces[i];
      const numVertices = face.length;

      for (let j = 0; j !== numVertices; j++) {
        const k = (j + 1) % numVertices;
        vertices[face[j]].vsub(vertices[face[k]], edge);
        edge.normalize();
        let found = false;

        for (let p = 0; p !== edges.length; p++) {
          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {
            found = true;
            break;
          }
        }

        if (!found) {
          edges.push(edge.clone());
        }
      }
    }
  }
  /**
   * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.
   * @method computeNormals
   */


  computeNormals() {
    this.faceNormals.length = this.faces.length; // Generate normals

    for (let i = 0; i < this.faces.length; i++) {
      // Check so all vertices exists for this face
      for (let j = 0; j < this.faces[i].length; j++) {
        if (!this.vertices[this.faces[i][j]]) {
          throw new Error("Vertex " + this.faces[i][j] + " not found!");
        }
      }

      const n = this.faceNormals[i] || new Vec3();
      this.getFaceNormal(i, n);
      n.negate(n);
      this.faceNormals[i] = n;
      const vertex = this.vertices[this.faces[i][0]];

      if (n.dot(vertex) < 0) {
        console.error(".faceNormals[" + i + "] = Vec3(" + n.toString() + ") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.");

        for (let j = 0; j < this.faces[i].length; j++) {
          console.warn(".vertices[" + this.faces[i][j] + "] = Vec3(" + this.vertices[this.faces[i][j]].toString() + ")");
        }
      }
    }
  }
  /**
   * Compute the normal of a face from its vertices
   * @method getFaceNormal
   * @param  {Number} i
   * @param  {Vec3} target
   */


  getFaceNormal(i, target) {
    const f = this.faces[i];
    const va = this.vertices[f[0]];
    const vb = this.vertices[f[1]];
    const vc = this.vertices[f[2]];
    ConvexPolyhedron.computeNormal(va, vb, vc, target);
  }
  /**
   * @method clipAgainstHull
   * @param {Vec3} posA
   * @param {Quaternion} quatA
   * @param {ConvexPolyhedron} hullB
   * @param {Vec3} posB
   * @param {Quaternion} quatB
   * @param {Vec3} separatingNormal
   * @param {Number} minDist Clamp distance
   * @param {Number} maxDist
   * @param {array} result The an array of contact point objects, see clipFaceAgainstHull
   */


  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {
    const WorldNormal = new Vec3();
    let closestFaceB = -1;
    let dmax = -Number.MAX_VALUE;

    for (let face = 0; face < hullB.faces.length; face++) {
      WorldNormal.copy(hullB.faceNormals[face]);
      quatB.vmult(WorldNormal, WorldNormal);
      const d = WorldNormal.dot(separatingNormal);

      if (d > dmax) {
        dmax = d;
        closestFaceB = face;
      }
    }

    const worldVertsB1 = [];

    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {
      const b = hullB.vertices[hullB.faces[closestFaceB][i]];
      const worldb = new Vec3();
      worldb.copy(b);
      quatB.vmult(worldb, worldb);
      posB.vadd(worldb, worldb);
      worldVertsB1.push(worldb);
    }

    if (closestFaceB >= 0) {
      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);
    }
  }
  /**
   * Find the separating axis between this hull and another
   * @method findSeparatingAxis
   * @param {ConvexPolyhedron} hullB
   * @param {Vec3} posA
   * @param {Quaternion} quatA
   * @param {Vec3} posB
   * @param {Quaternion} quatB
   * @param {Vec3} target The target vector to save the axis in
   * @return {bool} Returns false if a separation is found, else true
   */


  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {
    const faceANormalWS3 = new Vec3();
    const Worldnormal1 = new Vec3();
    const deltaC = new Vec3();
    const worldEdge0 = new Vec3();
    const worldEdge1 = new Vec3();
    const Cross = new Vec3();
    let dmin = Number.MAX_VALUE;
    const hullA = this;

    if (!hullA.uniqueAxes) {
      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA

      for (let i = 0; i < numFacesA; i++) {
        const fi = faceListA ? faceListA[i] : i; // Get world face normal

        faceANormalWS3.copy(hullA.faceNormals[fi]);
        quatA.vmult(faceANormalWS3, faceANormalWS3);
        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);

        if (d === false) {
          return false;
        }

        if (d < dmin) {
          dmin = d;
          target.copy(faceANormalWS3);
        }
      }
    } else {
      // Test unique axes
      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {
        // Get world axis
        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);
        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);

        if (d === false) {
          return false;
        }

        if (d < dmin) {
          dmin = d;
          target.copy(faceANormalWS3);
        }
      }
    }

    if (!hullB.uniqueAxes) {
      // Test face normals from hullB
      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;

      for (let i = 0; i < numFacesB; i++) {
        const fi = faceListB ? faceListB[i] : i;
        Worldnormal1.copy(hullB.faceNormals[fi]);
        quatB.vmult(Worldnormal1, Worldnormal1);
        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);

        if (d === false) {
          return false;
        }

        if (d < dmin) {
          dmin = d;
          target.copy(Worldnormal1);
        }
      }
    } else {
      // Test unique axes in B
      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {
        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);
        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);

        if (d === false) {
          return false;
        }

        if (d < dmin) {
          dmin = d;
          target.copy(Worldnormal1);
        }
      }
    } // Test edges


    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {
      // Get world edge
      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);

      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {
        // Get world edge 2
        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);
        worldEdge0.cross(worldEdge1, Cross);

        if (!Cross.almostZero()) {
          Cross.normalize();
          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);

          if (dist === false) {
            return false;
          }

          if (dist < dmin) {
            dmin = dist;
            target.copy(Cross);
          }
        }
      }
    }

    posB.vsub(posA, deltaC);

    if (deltaC.dot(target) > 0.0) {
      target.negate(target);
    }

    return true;
  }
  /**
   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.
   * @method testSepAxis
   * @param {Vec3} axis
   * @param {ConvexPolyhedron} hullB
   * @param {Vec3} posA
   * @param {Quaternion} quatA
   * @param {Vec3} posB
   * @param {Quaternion} quatB
   * @return {number} The overlap depth, or FALSE if no penetration.
   */


  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {
    const hullA = this;
    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);
    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);
    const maxA = maxminA[0];
    const minA = maxminA[1];
    const maxB = maxminB[0];
    const minB = maxminB[1];

    if (maxA < minB || maxB < minA) {
      return false; // Separated
    }

    const d0 = maxA - minB;
    const d1 = maxB - minA;
    const depth = d0 < d1 ? d0 : d1;
    return depth;
  }
  /**
   * @method calculateLocalInertia
   * @param  {Number} mass
   * @param  {Vec3} target
   */


  calculateLocalInertia(mass, target) {
    // Approximate with box inertia
    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
    const aabbmax = new Vec3();
    const aabbmin = new Vec3();
    this.computeLocalAABB(aabbmin, aabbmax);
    const x = aabbmax.x - aabbmin.x;
    const y = aabbmax.y - aabbmin.y;
    const z = aabbmax.z - aabbmin.z;
    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);
    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);
    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);
  }
  /**
   * @method getPlaneConstantOfFace
   * @param  {Number} face_i Index of the face
   * @return {Number}
   */


  getPlaneConstantOfFace(face_i) {
    const f = this.faces[face_i];
    const n = this.faceNormals[face_i];
    const v = this.vertices[f[0]];
    const c = -n.dot(v);
    return c;
  }
  /**
   * Clip a face against a hull.
   * @method clipFaceAgainstHull
   * @param {Vec3} separatingNormal
   * @param {Vec3} posA
   * @param {Quaternion} quatA
   * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.
   * @param {Number} minDist Distance clamping
   * @param {Number} maxDist
   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.
   */


  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {
    const faceANormalWS = new Vec3();
    const edge0 = new Vec3();
    const WorldEdge0 = new Vec3();
    const worldPlaneAnormal1 = new Vec3();
    const planeNormalWS1 = new Vec3();
    const worldA1 = new Vec3();
    const localPlaneNormal = new Vec3();
    const planeNormalWS = new Vec3();
    const hullA = this;
    const worldVertsB2 = [];
    const pVtxIn = worldVertsB1;
    const pVtxOut = worldVertsB2;
    let closestFaceA = -1;
    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis

    for (let face = 0; face < hullA.faces.length; face++) {
      faceANormalWS.copy(hullA.faceNormals[face]);
      quatA.vmult(faceANormalWS, faceANormalWS);
      const d = faceANormalWS.dot(separatingNormal);

      if (d < dmin) {
        dmin = d;
        closestFaceA = face;
      }
    }

    if (closestFaceA < 0) {
      return;
    } // Get the face and construct connected faces


    const polyA = hullA.faces[closestFaceA];
    polyA.connectedFaces = [];

    for (let i = 0; i < hullA.faces.length; i++) {
      for (let j = 0; j < hullA.faces[i].length; j++) {
        if (
        /* Sharing a vertex*/
        polyA.indexOf(hullA.faces[i][j]) !== -1 &&
        /* Not the one we are looking for connections from */
        i !== closestFaceA &&
        /* Not already added */
        polyA.connectedFaces.indexOf(i) === -1) {
          polyA.connectedFaces.push(i);
        }
      }
    } // Clip the polygon to the back of the planes of all faces of hull A,
    // that are adjacent to the witness face


    const numVerticesA = polyA.length;

    for (let i = 0; i < numVerticesA; i++) {
      const a = hullA.vertices[polyA[i]];
      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];
      a.vsub(b, edge0);
      WorldEdge0.copy(edge0);
      quatA.vmult(WorldEdge0, WorldEdge0);
      posA.vadd(WorldEdge0, WorldEdge0);
      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);
      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);
      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);
      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);
      planeNormalWS1.negate(planeNormalWS1);
      worldA1.copy(a);
      quatA.vmult(worldA1, worldA1);
      posA.vadd(worldA1, worldA1);
      const otherFace = polyA.connectedFaces[i];
      localPlaneNormal.copy(this.faceNormals[otherFace]);
      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);
      planeNormalWS.copy(localPlaneNormal);
      quatA.vmult(planeNormalWS, planeNormalWS);
      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane

      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip

      while (pVtxIn.length) {
        pVtxIn.shift();
      }

      while (pVtxOut.length) {
        pVtxIn.push(pVtxOut.shift());
      }
    } // only keep contact points that are behind the witness face


    localPlaneNormal.copy(this.faceNormals[closestFaceA]);
    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);
    planeNormalWS.copy(localPlaneNormal);
    quatA.vmult(planeNormalWS, planeNormalWS);
    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);

    for (let i = 0; i < pVtxIn.length; i++) {
      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???

      if (depth <= minDist) {
        console.log("clamped: depth=" + depth + " to minDist=" + minDist);
        depth = minDist;
      }

      if (depth <= maxDist) {
        const point = pVtxIn[i];

        if (depth <= 1e-6) {
          const p = {
            point,
            normal: planeNormalWS,
            depth
          };
          result.push(p);
        }
      }
    }
  }
  /**
   * Clip a face in a hull against the back of a plane.
   * @method clipFaceAgainstPlane
   * @param {Array} inVertices
   * @param {Array} outVertices
   * @param {Vec3} planeNormal
   * @param {Number} planeConstant The constant in the mathematical plane equation
   */


  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {
    let n_dot_first;
    let n_dot_last;
    const numVerts = inVertices.length;

    if (numVerts < 2) {
      return outVertices;
    }

    let firstVertex = inVertices[inVertices.length - 1];
    let lastVertex = inVertices[0];
    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;

    for (let vi = 0; vi < numVerts; vi++) {
      lastVertex = inVertices[vi];
      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;

      if (n_dot_first < 0) {
        if (n_dot_last < 0) {
          // Start < 0, end < 0, so output lastVertex
          const newv = new Vec3();
          newv.copy(lastVertex);
          outVertices.push(newv);
        } else {
          // Start < 0, end >= 0, so output intersection
          const newv = new Vec3();
          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);
          outVertices.push(newv);
        }
      } else {
        if (n_dot_last < 0) {
          // Start >= 0, end < 0 so output intersection and end
          const newv = new Vec3();
          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);
          outVertices.push(newv);
          outVertices.push(lastVertex);
        }
      }

      firstVertex = lastVertex;
      n_dot_first = n_dot_last;
    }

    return outVertices;
  } // Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.


  computeWorldVertices(position, quat) {
    while (this.worldVertices.length < this.vertices.length) {
      this.worldVertices.push(new Vec3());
    }

    const verts = this.vertices;
    const worldVerts = this.worldVertices;

    for (let i = 0; i !== this.vertices.length; i++) {
      quat.vmult(verts[i], worldVerts[i]);
      position.vadd(worldVerts[i], worldVerts[i]);
    }

    this.worldVerticesNeedsUpdate = false;
  }

  computeLocalAABB(aabbmin, aabbmax) {
    const vertices = this.vertices;
    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);

    for (let i = 0; i < this.vertices.length; i++) {
      const v = vertices[i];

      if (v.x < aabbmin.x) {
        aabbmin.x = v.x;
      } else if (v.x > aabbmax.x) {
        aabbmax.x = v.x;
      }

      if (v.y < aabbmin.y) {
        aabbmin.y = v.y;
      } else if (v.y > aabbmax.y) {
        aabbmax.y = v.y;
      }

      if (v.z < aabbmin.z) {
        aabbmin.z = v.z;
      } else if (v.z > aabbmax.z) {
        aabbmax.z = v.z;
      }
    }
  }
  /**
   * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.
   * @method computeWorldFaceNormals
   * @param  {Quaternion} quat
   */


  computeWorldFaceNormals(quat) {
    const N = this.faceNormals.length;

    while (this.worldFaceNormals.length < N) {
      this.worldFaceNormals.push(new Vec3());
    }

    const normals = this.faceNormals;
    const worldNormals = this.worldFaceNormals;

    for (let i = 0; i !== N; i++) {
      quat.vmult(normals[i], worldNormals[i]);
    }

    this.worldFaceNormalsNeedsUpdate = false;
  }
  /**
   * @method updateBoundingSphereRadius
   */


  updateBoundingSphereRadius() {
    // Assume points are distributed with local (0,0,0) as center
    let max2 = 0;
    const verts = this.vertices;

    for (let i = 0; i !== verts.length; i++) {
      const norm2 = verts[i].lengthSquared();

      if (norm2 > max2) {
        max2 = norm2;
      }
    }

    this.boundingSphereRadius = Math.sqrt(max2);
  }
  /**
   * @method calculateWorldAABB
   * @param {Vec3}        pos
   * @param {Quaternion}  quat
   * @param {Vec3}        min
   * @param {Vec3}        max
   */


  calculateWorldAABB(pos, quat, min, max) {
    const verts = this.vertices;
    let minx;
    let miny;
    let minz;
    let maxx;
    let maxy;
    let maxz;
    let tempWorldVertex = new Vec3();

    for (let i = 0; i < verts.length; i++) {
      tempWorldVertex.copy(verts[i]);
      quat.vmult(tempWorldVertex, tempWorldVertex);
      pos.vadd(tempWorldVertex, tempWorldVertex);
      const v = tempWorldVertex;

      if (minx === undefined || v.x < minx) {
        minx = v.x;
      }

      if (maxx === undefined || v.x > maxx) {
        maxx = v.x;
      }

      if (miny === undefined || v.y < miny) {
        miny = v.y;
      }

      if (maxy === undefined || v.y > maxy) {
        maxy = v.y;
      }

      if (minz === undefined || v.z < minz) {
        minz = v.z;
      }

      if (maxz === undefined || v.z > maxz) {
        maxz = v.z;
      }
    }

    min.set(minx, miny, minz);
    max.set(maxx, maxy, maxz);
  }
  /**
   * Get approximate convex volume
   * @method volume
   * @return {Number}
   */


  volume() {
    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
  }
  /**
   * Get an average of all the vertices positions
   * @method getAveragePointLocal
   * @param  {Vec3} target
   * @return {Vec3}
   */


  getAveragePointLocal(target = new Vec3()) {
    const verts = this.vertices;

    for (let i = 0; i < verts.length; i++) {
      target.vadd(verts[i], target);
    }

    target.scale(1 / verts.length, target);
    return target;
  }
  /**
   * Transform all local points. Will change the .vertices
   * @method transformAllPoints
   * @param  {Vec3} offset
   * @param  {Quaternion} quat
   */


  transformAllPoints(offset, quat) {
    const n = this.vertices.length;
    const verts = this.vertices; // Apply rotation

    if (quat) {
      // Rotate vertices
      for (let i = 0; i < n; i++) {
        const v = verts[i];
        quat.vmult(v, v);
      } // Rotate face normals


      for (let i = 0; i < this.faceNormals.length; i++) {
        const v = this.faceNormals[i];
        quat.vmult(v, v);
      }
      /*
            // Rotate edges
            for(let i=0; i<this.uniqueEdges.length; i++){
                const v = this.uniqueEdges[i];
                quat.vmult(v,v);
            }*/

    } // Apply offset


    if (offset) {
      for (let i = 0; i < n; i++) {
        const v = verts[i];
        v.vadd(offset, v);
      }
    }
  }
  /**
   * Checks whether p is inside the polyhedra. Must be in local coords.
   * The point lies outside of the convex hull of the other points if and only if the direction
   * of all the vectors from it to those other points are on less than one half of a sphere around it.
   * @method pointIsInside
   * @param  {Vec3} p      A point given in local coordinates
   * @return {Boolean}
   */


  pointIsInside(p) {
    const verts = this.vertices;
    const faces = this.faces;
    const normals = this.faceNormals;
    const pointInside = new Vec3();
    this.getAveragePointLocal(pointInside);

    for (let i = 0; i < this.faces.length; i++) {
      let n = normals[i];
      const v = verts[faces[i][0]]; // We only need one point in the face
      // This dot product determines which side of the edge the point is

      const vToP = new Vec3();
      p.vsub(v, vToP);
      const r1 = n.dot(vToP);
      const vToPointInside = new Vec3();
      pointInside.vsub(v, vToPointInside);
      const r2 = n.dot(vToPointInside);

      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {
        return false; // Encountered some other sign. Exit.
      }
    } // If we got here, all dot products were of the same sign.


    return -1;
  }

}
/**
 * Get face normal given 3 vertices
 * @static
 * @method computeNormal
 * @param {Vec3} va
 * @param {Vec3} vb
 * @param {Vec3} vc
 * @param {Vec3} target
 */


ConvexPolyhedron.computeNormal = (va, vb, vc, target) => {
  const cb = new Vec3();
  const ab = new Vec3();
  vb.vsub(va, ab);
  vc.vsub(vb, cb);
  cb.cross(ab, target);

  if (!target.isZero()) {
    target.normalize();
  }
};

const maxminA = [];
const maxminB = [];
/**
 * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.
 * Results are saved in the array maxmin.
 * @static
 * @method project
 * @param {ConvexPolyhedron} hull
 * @param {Vec3} axis
 * @param {Vec3} pos
 * @param {Quaternion} quat
 * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.
 */

ConvexPolyhedron.project = (shape, axis, pos, quat, result) => {
  const n = shape.vertices.length;
  const localAxis = new Vec3();
  let max = 0;
  let min = 0;
  const localOrigin = new Vec3();
  const vs = shape.vertices;
  localOrigin.setZero(); // Transform the axis to local

  Transform.vectorToLocalFrame(pos, quat, axis, localAxis);
  Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);
  const add = localOrigin.dot(localAxis);
  min = max = vs[0].dot(localAxis);

  for (let i = 1; i < n; i++) {
    const val = vs[i].dot(localAxis);

    if (val > max) {
      max = val;
    }

    if (val < min) {
      min = val;
    }
  }

  min -= add;
  max -= add;

  if (min > max) {
    // Inconsistent - swap
    const temp = min;
    min = max;
    max = temp;
  } // Output


  result[0] = max;
  result[1] = min;
};
/**
 * A 3d box shape.
 * @class Box
 * @constructor
 * @param {Vec3} halfExtents
 * @author schteppe
 * @extends Shape
 */


class Box extends Shape {
  // Used by the contact generator to make contacts with other convex polyhedra for example.
  constructor(halfExtents) {
    super({
      type: Shape.types.BOX
    });
    this.halfExtents = halfExtents;
    this.convexPolyhedronRepresentation = null;
    this.updateConvexPolyhedronRepresentation();
    this.updateBoundingSphereRadius();
  }
  /**
   * Updates the local convex polyhedron representation used for some collisions.
   * @method updateConvexPolyhedronRepresentation
   */


  updateConvexPolyhedronRepresentation() {
    const sx = this.halfExtents.x;
    const sy = this.halfExtents.y;
    const sz = this.halfExtents.z;
    const V = Vec3;
    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];
    const faces = [[3, 2, 1, 0], // -z
    [4, 5, 6, 7], // +z
    [5, 4, 0, 1], // -y
    [2, 3, 7, 6], // +y
    [0, 4, 7, 3], // -x
    [1, 2, 6, 5] // +x
    ];
    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];
    const h = new ConvexPolyhedron({
      vertices,
      faces,
      axes
    });
    this.convexPolyhedronRepresentation = h;
    h.material = this.material;
  }
  /**
   * @method calculateLocalInertia
   * @param  {Number} mass
   * @param  {Vec3} target
   * @return {Vec3}
   */


  calculateLocalInertia(mass, target = new Vec3()) {
    Box.calculateInertia(this.halfExtents, mass, target);
    return target;
  }
  /**
   * Get the box 6 side normals
   * @method getSideNormals
   * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.
   * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.
   * @return {array}
   */


  getSideNormals(sixTargetVectors, quat) {
    const sides = sixTargetVectors;
    const ex = this.halfExtents;
    sides[0].set(ex.x, 0, 0);
    sides[1].set(0, ex.y, 0);
    sides[2].set(0, 0, ex.z);
    sides[3].set(-ex.x, 0, 0);
    sides[4].set(0, -ex.y, 0);
    sides[5].set(0, 0, -ex.z);

    if (quat !== undefined) {
      for (let i = 0; i !== sides.length; i++) {
        quat.vmult(sides[i], sides[i]);
      }
    }

    return sides;
  }

  volume() {
    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
  }

  updateBoundingSphereRadius() {
    this.boundingSphereRadius = this.halfExtents.length();
  }

  forEachWorldCorner(pos, quat, callback) {
    const e = this.halfExtents;
    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];

    for (let i = 0; i < corners.length; i++) {
      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);
      quat.vmult(worldCornerTempPos, worldCornerTempPos);
      pos.vadd(worldCornerTempPos, worldCornerTempPos);
      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);
    }
  }

  calculateWorldAABB(pos, quat, min, max) {
    const e = this.halfExtents;
    worldCornersTemp[0].set(e.x, e.y, e.z);
    worldCornersTemp[1].set(-e.x, e.y, e.z);
    worldCornersTemp[2].set(-e.x, -e.y, e.z);
    worldCornersTemp[3].set(-e.x, -e.y, -e.z);
    worldCornersTemp[4].set(e.x, -e.y, -e.z);
    worldCornersTemp[5].set(e.x, e.y, -e.z);
    worldCornersTemp[6].set(-e.x, e.y, -e.z);
    worldCornersTemp[7].set(e.x, -e.y, e.z);
    const wc = worldCornersTemp[0];
    quat.vmult(wc, wc);
    pos.vadd(wc, wc);
    max.copy(wc);
    min.copy(wc);

    for (let i = 1; i < 8; i++) {
      const wc = worldCornersTemp[i];
      quat.vmult(wc, wc);
      pos.vadd(wc, wc);
      const x = wc.x;
      const y = wc.y;
      const z = wc.z;

      if (x > max.x) {
        max.x = x;
      }

      if (y > max.y) {
        max.y = y;
      }

      if (z > max.z) {
        max.z = z;
      }

      if (x < min.x) {
        min.x = x;
      }

      if (y < min.y) {
        min.y = y;
      }

      if (z < min.z) {
        min.z = z;
      }
    } // Get each axis max
    // min.set(Infinity,Infinity,Infinity);
    // max.set(-Infinity,-Infinity,-Infinity);
    // this.forEachWorldCorner(pos,quat,function(x,y,z){
    //     if(x > max.x){
    //         max.x = x;
    //     }
    //     if(y > max.y){
    //         max.y = y;
    //     }
    //     if(z > max.z){
    //         max.z = z;
    //     }
    //     if(x < min.x){
    //         min.x = x;
    //     }
    //     if(y < min.y){
    //         min.y = y;
    //     }
    //     if(z < min.z){
    //         min.z = z;
    //     }
    // });

  }

}

Box.calculateInertia = (halfExtents, mass, target) => {
  const e = halfExtents;
  target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);
  target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);
  target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);
};

const worldCornerTempPos = new Vec3();
const worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
const BODY_SLEEP_STATES = {
  AWAKE: 0,
  SLEEPY: 1,
  SLEEPING: 2
};
/**
 * Base class for all body types.
 * @class Body
 * @constructor
 * @extends EventTarget
 * @param {object} [options]
 * @param {Vec3} [options.position]
 * @param {Vec3} [options.velocity]
 * @param {Vec3} [options.angularVelocity]
 * @param {Quaternion} [options.quaternion]
 * @param {number} [options.mass]
 * @param {Material} [options.material]
 * @param {number} [options.type]
 * @param {number} [options.linearDamping=0.01]
 * @param {number} [options.angularDamping=0.01]
 * @param {boolean} [options.allowSleep=true]
 * @param {number} [options.sleepSpeedLimit=0.1]
 * @param {number} [options.sleepTimeLimit=1]
 * @param {number} [options.collisionFilterGroup=1]
 * @param {number} [options.collisionFilterMask=-1]
 * @param {boolean} [options.fixedRotation=false]
 * @param {Vec3} [options.linearFactor]
 * @param {Vec3} [options.angularFactor]
 * @param {Shape} [options.shape]
 * @example
 *     const body = new Body({
 *         mass: 1
 *     });
 *     const shape = new Sphere(1);
 *     body.addShape(shape);
 *     world.addBody(body);
 */

class Body extends EventTarget {
  // Position of body in World.bodies. Updated by World and used in ArrayCollisionMatrix.
  // Reference to the world the body is living in.
  // Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, "this" will refer to this Body object. Deprecated - use World events instead.
  // Callback function that is used AFTER stepping the system. Inside the function, "this" will refer to this Body object. Deprecated - use World events instead.
  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled - i.e. "collide" events will be raised, but forces will not be altered.
  // World space position of the body.
  // Interpolated position of the body.
  // Initial position of the body.
  // World space velocity of the body.
  // Linear force on the body in world space.
  // One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.
  // If true, the body will automatically fall to sleep.
  // Current sleep state.
  // If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.
  // If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.
  // World space rotational force on the body, around center of mass.
  // World space orientation of the body.
  // Interpolated orientation of the body.
  // Angular velocity of the body, in world space. Think of the angular velocity as a vector, which the body rotates around. The length of this vector determines how fast (in radians per second) the body rotates.
  // Position of each Shape in the body, given in local Body space.
  // Orientation of each Shape, given in local Body space.
  // Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.
  // Use this property to limit the motion along any world axis. (1,1,1) will allow motion along all axes while (0,0,0) allows none.
  // Use this property to limit the rotational motion along any world axis. (1,1,1) will allow rotation along all axes while (0,0,0) allows none.
  // World space bounding box of the body and its shapes.
  // Indicates if the AABB needs to be updated before use.
  // Total bounding radius of the Body including its shapes, relative to body.position.
  constructor(options = {}) {
    super();
    this.id = Body.idCounter++;
    this.index = -1;
    this.world = null;
    this.preStep = null;
    this.postStep = null;
    this.vlambda = new Vec3();
    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;
    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;
    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;
    this.position = new Vec3();
    this.previousPosition = new Vec3();
    this.interpolatedPosition = new Vec3();
    this.initPosition = new Vec3();

    if (options.position) {
      this.position.copy(options.position);
      this.previousPosition.copy(options.position);
      this.interpolatedPosition.copy(options.position);
      this.initPosition.copy(options.position);
    }

    this.velocity = new Vec3();

    if (options.velocity) {
      this.velocity.copy(options.velocity);
    }

    this.initVelocity = new Vec3();
    this.force = new Vec3();
    const mass = typeof options.mass === 'number' ? options.mass : 0;
    this.mass = mass;
    this.invMass = mass > 0 ? 1.0 / mass : 0;
    this.material = options.material || null;
    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;
    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;

    if (typeof options.type === typeof Body.STATIC) {
      this.type = options.type;
    }

    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;
    this.sleepState = 0;
    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;
    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;
    this.timeLastSleepy = 0;
    this.wakeUpAfterNarrowphase = false;
    this.torque = new Vec3();
    this.quaternion = new Quaternion();
    this.initQuaternion = new Quaternion();
    this.previousQuaternion = new Quaternion();
    this.interpolatedQuaternion = new Quaternion();

    if (options.quaternion) {
      this.quaternion.copy(options.quaternion);
      this.initQuaternion.copy(options.quaternion);
      this.previousQuaternion.copy(options.quaternion);
      this.interpolatedQuaternion.copy(options.quaternion);
    }

    this.angularVelocity = new Vec3();

    if (options.angularVelocity) {
      this.angularVelocity.copy(options.angularVelocity);
    }

    this.initAngularVelocity = new Vec3();
    this.shapes = [];
    this.shapeOffsets = [];
    this.shapeOrientations = [];
    this.inertia = new Vec3();
    this.invInertia = new Vec3();
    this.invInertiaWorld = new Mat3();
    this.invMassSolve = 0;
    this.invInertiaSolve = new Vec3();
    this.invInertiaWorldSolve = new Mat3();
    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;
    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;
    this.linearFactor = new Vec3(1, 1, 1);

    if (options.linearFactor) {
      this.linearFactor.copy(options.linearFactor);
    }

    this.angularFactor = new Vec3(1, 1, 1);

    if (options.angularFactor) {
      this.angularFactor.copy(options.angularFactor);
    }

    this.aabb = new AABB();
    this.aabbNeedsUpdate = true;
    this.boundingRadius = 0;
    this.wlambda = new Vec3();

    if (options.shape) {
      this.addShape(options.shape);
    }

    this.updateMassProperties();
  }
  /**
   * Wake the body up.
   * @method wakeUp
   */


  wakeUp() {
    const prevState = this.sleepState;
    this.sleepState = 0;
    this.wakeUpAfterNarrowphase = false;

    if (prevState === Body.SLEEPING) {
      this.dispatchEvent(Body.wakeupEvent);
    }
  }
  /**
   * Force body sleep
   * @method sleep
   */


  sleep() {
    this.sleepState = Body.SLEEPING;
    this.velocity.set(0, 0, 0);
    this.angularVelocity.set(0, 0, 0);
    this.wakeUpAfterNarrowphase = false;
  }
  /**
   * Called every timestep to update internal sleep timer and change sleep state if needed.
   * @method sleepTick
   * @param {Number} time The world time in seconds
   */


  sleepTick(time) {
    if (this.allowSleep) {
      const sleepState = this.sleepState;
      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();
      const speedLimitSquared = this.sleepSpeedLimit ** 2;

      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {
        this.sleepState = Body.SLEEPY; // Sleepy

        this.timeLastSleepy = time;
        this.dispatchEvent(Body.sleepyEvent);
      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {
        this.wakeUp(); // Wake up
      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {
        this.sleep(); // Sleeping

        this.dispatchEvent(Body.sleepEvent);
      }
    }
  }
  /**
   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate "solve mass".
   * @method updateSolveMassProperties
   */


  updateSolveMassProperties() {
    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {
      this.invMassSolve = 0;
      this.invInertiaSolve.setZero();
      this.invInertiaWorldSolve.setZero();
    } else {
      this.invMassSolve = this.invMass;
      this.invInertiaSolve.copy(this.invInertia);
      this.invInertiaWorldSolve.copy(this.invInertiaWorld);
    }
  }
  /**
   * Convert a world point to local body frame.
   * @method pointToLocalFrame
   * @param  {Vec3} worldPoint
   * @param  {Vec3} result
   * @return {Vec3}
   */


  pointToLocalFrame(worldPoint, result = new Vec3()) {
    worldPoint.vsub(this.position, result);
    this.quaternion.conjugate().vmult(result, result);
    return result;
  }
  /**
   * Convert a world vector to local body frame.
   * @method vectorToLocalFrame
   * @param  {Vec3} worldPoint
   * @param  {Vec3} result
   * @return {Vec3}
   */


  vectorToLocalFrame(worldVector, result = new Vec3()) {
    this.quaternion.conjugate().vmult(worldVector, result);
    return result;
  }
  /**
   * Convert a local body point to world frame.
   * @method pointToWorldFrame
   * @param  {Vec3} localPoint
   * @param  {Vec3} result
   * @return {Vec3}
   */


  pointToWorldFrame(localPoint, result = new Vec3()) {
    this.quaternion.vmult(localPoint, result);
    result.vadd(this.position, result);
    return result;
  }
  /**
   * Convert a local body point to world frame.
   * @method vectorToWorldFrame
   * @param  {Vec3} localVector
   * @param  {Vec3} result
   * @return {Vec3}
   */


  vectorToWorldFrame(localVector, result = new Vec3()) {
    this.quaternion.vmult(localVector, result);
    return result;
  }
  /**
   * Add a shape to the body with a local offset and orientation.
   * @method addShape
   * @param {Shape} shape
   * @param {Vec3} [_offset]
   * @param {Quaternion} [_orientation]
   * @return {Body} The body object, for chainability.
   */


  addShape(shape, _offset, _orientation) {
    const offset = new Vec3();
    const orientation = new Quaternion();

    if (_offset) {
      offset.copy(_offset);
    }

    if (_orientation) {
      orientation.copy(_orientation);
    }

    this.shapes.push(shape);
    this.shapeOffsets.push(offset);
    this.shapeOrientations.push(orientation);
    this.updateMassProperties();
    this.updateBoundingRadius();
    this.aabbNeedsUpdate = true;
    shape.body = this;
    return this;
  }
  /**
   * Update the bounding radius of the body. Should be done if any of the shapes are changed.
   * @method updateBoundingRadius
   */


  updateBoundingRadius() {
    const shapes = this.shapes;
    const shapeOffsets = this.shapeOffsets;
    const N = shapes.length;
    let radius = 0;

    for (let i = 0; i !== N; i++) {
      const shape = shapes[i];
      shape.updateBoundingSphereRadius();
      const offset = shapeOffsets[i].length();
      const r = shape.boundingSphereRadius;

      if (offset + r > radius) {
        radius = offset + r;
      }
    }

    this.boundingRadius = radius;
  }
  /**
   * Updates the .aabb
   * @method computeAABB
   * @todo rename to updateAABB()
   */


  computeAABB() {
    const shapes = this.shapes;
    const shapeOffsets = this.shapeOffsets;
    const shapeOrientations = this.shapeOrientations;
    const N = shapes.length;
    const offset = tmpVec;
    const orientation = tmpQuat$1;
    const bodyQuat = this.quaternion;
    const aabb = this.aabb;
    const shapeAABB = computeAABB_shapeAABB;

    for (let i = 0; i !== N; i++) {
      const shape = shapes[i]; // Get shape world position

      bodyQuat.vmult(shapeOffsets[i], offset);
      offset.vadd(this.position, offset); // Get shape world quaternion

      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB

      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);

      if (i === 0) {
        aabb.copy(shapeAABB);
      } else {
        aabb.extend(shapeAABB);
      }
    }

    this.aabbNeedsUpdate = false;
  }
  /**
   * Update .inertiaWorld and .invInertiaWorld
   * @method updateInertiaWorld
   */


  updateInertiaWorld(force) {
    const I = this.invInertia;
    if (I.x === I.y && I.y === I.z && !force) ;else {
      const m1 = uiw_m1;
      const m2 = uiw_m2;
      m1.setRotationFromQuaternion(this.quaternion);
      m1.transpose(m2);
      m1.scale(I, m1);
      m1.mmult(m2, this.invInertiaWorld);
    }
  }

  applyForce(force, relativePoint) {
    if (this.type !== Body.DYNAMIC) {
      // Needed?
      return;
    } // Compute produced rotational force


    const rotForce = Body_applyForce_rotForce;
    relativePoint.cross(force, rotForce); // Add linear force

    this.force.vadd(force, this.force); // Add rotational force

    this.torque.vadd(rotForce, this.torque);
  }

  applyLocalForce(localForce, localPoint) {
    if (this.type !== Body.DYNAMIC) {
      return;
    }

    const worldForce = Body_applyLocalForce_worldForce;
    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space

    this.vectorToWorldFrame(localForce, worldForce);
    this.vectorToWorldFrame(localPoint, relativePointWorld);
    this.applyForce(worldForce, relativePointWorld);
  }

  applyImpulse(impulse, relativePoint) {
    if (this.type !== Body.DYNAMIC) {
      return;
    } // Compute point position relative to the body center


    const r = relativePoint; // Compute produced central impulse velocity

    const velo = Body_applyImpulse_velo;
    velo.copy(impulse);
    velo.scale(this.invMass, velo); // Add linear impulse

    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity

    const rotVelo = Body_applyImpulse_rotVelo;
    r.cross(impulse, rotVelo);
    /*
     rotVelo.x *= this.invInertia.x;
     rotVelo.y *= this.invInertia.y;
     rotVelo.z *= this.invInertia.z;
     */

    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse

    this.angularVelocity.vadd(rotVelo, this.angularVelocity);
  }

  applyLocalImpulse(localImpulse, localPoint) {
    if (this.type !== Body.DYNAMIC) {
      return;
    }

    const worldImpulse = Body_applyLocalImpulse_worldImpulse;
    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space

    this.vectorToWorldFrame(localImpulse, worldImpulse);
    this.vectorToWorldFrame(localPoint, relativePointWorld);
    this.applyImpulse(worldImpulse, relativePointWorld);
  }
  /**
   * Should be called whenever you change the body shape or mass.
   * @method updateMassProperties
   */


  updateMassProperties() {
    const halfExtents = Body_updateMassProperties_halfExtents;
    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;
    const I = this.inertia;
    const fixed = this.fixedRotation; // Approximate with AABB box

    this.computeAABB();
    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
    Box.calculateInertia(halfExtents, this.mass, I);
    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);
    this.updateInertiaWorld(true);
  }
  /**
   * Get world velocity of a point in the body.
   * @method getVelocityAtWorldPoint
   * @param  {Vec3} worldPoint
   * @param  {Vec3} result
   * @return {Vec3} The result vector.
   */


  getVelocityAtWorldPoint(worldPoint, result) {
    const r = new Vec3();
    worldPoint.vsub(this.position, r);
    this.angularVelocity.cross(r, result);
    this.velocity.vadd(result, result);
    return result;
  }
  /**
   * Move the body forward in time.
   * @param {number} dt Time step
   * @param {boolean} quatNormalize Set to true to normalize the body quaternion
   * @param {boolean} quatNormalizeFast If the quaternion should be normalized using "fast" quaternion normalization
   */


  integrate(dt, quatNormalize, quatNormalizeFast) {
    // Save previous position
    this.previousPosition.copy(this.position);
    this.previousQuaternion.copy(this.quaternion);

    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {
      // Only for dynamic
      return;
    }

    const velo = this.velocity;
    const angularVelo = this.angularVelocity;
    const pos = this.position;
    const force = this.force;
    const torque = this.torque;
    const quat = this.quaternion;
    const invMass = this.invMass;
    const invInertia = this.invInertiaWorld;
    const linearFactor = this.linearFactor;
    const iMdt = invMass * dt;
    velo.x += force.x * iMdt * linearFactor.x;
    velo.y += force.y * iMdt * linearFactor.y;
    velo.z += force.z * iMdt * linearFactor.z;
    const e = invInertia.elements;
    const angularFactor = this.angularFactor;
    const tx = torque.x * angularFactor.x;
    const ty = torque.y * angularFactor.y;
    const tz = torque.z * angularFactor.z;
    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);
    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);
    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog

    pos.x += velo.x * dt;
    pos.y += velo.y * dt;
    pos.z += velo.z * dt;
    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);

    if (quatNormalize) {
      if (quatNormalizeFast) {
        quat.normalizeFast();
      } else {
        quat.normalize();
      }
    }

    this.aabbNeedsUpdate = true; // Update world inertia

    this.updateInertiaWorld();
  }

}
/**
 * Dispatched after two bodies collide. This event is dispatched on each
 * of the two bodies involved in the collision.
 * @event collide
 * @param {Body} body The body that was involved in the collision.
 * @param {ContactEquation} contact The details of the collision.
 */


Body.COLLIDE_EVENT_NAME = 'collide';
/**
 * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.
 * @static
 * @property DYNAMIC
 * @type {Number}
 */

Body.DYNAMIC = 1;
/**
 * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.
 * @static
 * @property STATIC
 * @type {Number}
 */

Body.STATIC = 2;
/**
 * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.
 * @static
 * @property KINEMATIC
 * @type {Number}
 */

Body.KINEMATIC = 4;
/**
 * @static
 * @property AWAKE
 * @type {number}
 */

Body.AWAKE = BODY_SLEEP_STATES.AWAKE;
Body.SLEEPY = BODY_SLEEP_STATES.SLEEPY;
Body.SLEEPING = BODY_SLEEP_STATES.SLEEPING;
Body.idCounter = 0;
/**
 * Dispatched after a sleeping body has woken up.
 * @event wakeup
 */

Body.wakeupEvent = {
  type: 'wakeup'
};
/**
 * Dispatched after a body has gone in to the sleepy state.
 * @event sleepy
 */

Body.sleepyEvent = {
  type: 'sleepy'
};
/**
 * Dispatched after a body has fallen asleep.
 * @event sleep
 */

Body.sleepEvent = {
  type: 'sleep'
};
const tmpVec = new Vec3();
const tmpQuat$1 = new Quaternion();
const computeAABB_shapeAABB = new AABB();
const uiw_m1 = new Mat3();
const uiw_m2 = new Mat3();
/**
 * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.
 * @method applyForce
 * @param  {Vec3} force The amount of force to add.
 * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.
 */

const Body_applyForce_rotForce = new Vec3();
/**
 * Apply force to a local point in the body.
 * @method applyLocalForce
 * @param  {Vec3} force The force vector to apply, defined locally in the body frame.
 * @param  {Vec3} localPoint A local point in the body to apply the force on.
 */

const Body_applyLocalForce_worldForce = new Vec3();
const Body_applyLocalForce_relativePointWorld = new Vec3();
/**
 * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
 * @method applyImpulse
 * @param  {Vec3} impulse The amount of impulse to add.
 * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.
 */

const Body_applyImpulse_velo = new Vec3();
const Body_applyImpulse_rotVelo = new Vec3();
/**
 * Apply locally-defined impulse to a local point in the body.
 * @method applyLocalImpulse
 * @param  {Vec3} force The force vector to apply, defined locally in the body frame.
 * @param  {Vec3} localPoint A local point in the body to apply the force on.
 */

const Body_applyLocalImpulse_worldImpulse = new Vec3();
const Body_applyLocalImpulse_relativePoint = new Vec3();
const Body_updateMassProperties_halfExtents = new Vec3();
/**
 * Base class for broadphase implementations
 * @class Broadphase
 * @constructor
 * @author schteppe
 */

class Broadphase {
  // The world to search for collisions in.
  // If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.
  // Set to true if the objects in the world moved.
  constructor() {
    this.world = null;
    this.useBoundingBoxes = false;
    this.dirty = true;
  }
  /**
   * Get the collision pairs from the world
   * @method collisionPairs
   * @param {World} world The world to search in
   * @param {Array} p1 Empty array to be filled with body objects
   * @param {Array} p2 Empty array to be filled with body objects
   */


  collisionPairs(world, p1, p2) {
    throw new Error('collisionPairs not implemented for this BroadPhase class!');
  }
  /**
   * Check if a body pair needs to be intersection tested at all.
   * @method needBroadphaseCollision
   * @param {Body} bodyA
   * @param {Body} bodyB
   * @return {bool}
   */


  needBroadphaseCollision(bodyA, bodyB) {
    // Check collision filter masks
    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {
      return false;
    } // Check types


    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {
      // Both bodies are static or sleeping. Skip.
      return false;
    }

    return true;
  }
  /**
   * Check if the bounding volumes of two bodies intersect.
   * @method intersectionTest
   * @param {Body} bodyA
   * @param {Body} bodyB
   * @param {array} pairs1
   * @param {array} pairs2
   */


  intersectionTest(bodyA, bodyB, pairs1, pairs2) {
    if (this.useBoundingBoxes) {
      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);
    } else {
      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);
    }
  }

  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {
    const r = Broadphase_collisionPairs_r;
    bodyB.position.vsub(bodyA.position, r);
    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;
    const norm2 = r.lengthSquared();

    if (norm2 < boundingRadiusSum2) {
      pairs1.push(bodyA);
      pairs2.push(bodyB);
    }
  }
  /**
   * Check if the bounding boxes of two bodies are intersecting.
   * @method doBoundingBoxBroadphase
   * @param {Body} bodyA
   * @param {Body} bodyB
   * @param {Array} pairs1
   * @param {Array} pairs2
   */


  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {
    if (bodyA.aabbNeedsUpdate) {
      bodyA.computeAABB();
    }

    if (bodyB.aabbNeedsUpdate) {
      bodyB.computeAABB();
    } // Check AABB / AABB


    if (bodyA.aabb.overlaps(bodyB.aabb)) {
      pairs1.push(bodyA);
      pairs2.push(bodyB);
    }
  }

  makePairsUnique(pairs1, pairs2) {
    const t = Broadphase_makePairsUnique_temp;
    const p1 = Broadphase_makePairsUnique_p1;
    const p2 = Broadphase_makePairsUnique_p2;
    const N = pairs1.length;

    for (let i = 0; i !== N; i++) {
      p1[i] = pairs1[i];
      p2[i] = pairs2[i];
    }

    pairs1.length = 0;
    pairs2.length = 0;

    for (let i = 0; i !== N; i++) {
      const id1 = p1[i].id;
      const id2 = p2[i].id;
      const key = id1 < id2 ? id1 + "," + id2 : id2 + "," + id1;
      t[key] = i;
      t.keys.push(key);
    }

    for (let i = 0; i !== t.keys.length; i++) {
      const key = t.keys.pop();
      const pairIndex = t[key];
      pairs1.push(p1[pairIndex]);
      pairs2.push(p2[pairIndex]);
      delete t[key];
    }
  }
  /**
   * To be implemented by subcasses
   * @method setWorld
   * @param {World} world
   */


  setWorld(world) {}
  /**
   * Returns all the bodies within the AABB.
   * @method aabbQuery
   * @param  {World} world
   * @param  {AABB} aabb
   * @param  {array} result An array to store resulting bodies in.
   * @return {array}
   */


  aabbQuery(world, aabb, result) {
    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');
    return [];
  }

}
/**
 * Check if the bounding spheres of two bodies are intersecting.
 * @method doBoundingSphereBroadphase
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Array} pairs1 bodyA is appended to this array if intersection
 * @param {Array} pairs2 bodyB is appended to this array if intersection
 */


const // Temp objects
Broadphase_collisionPairs_r = new Vec3();
/**
 * Removes duplicate pairs from the pair arrays.
 * @method makePairsUnique
 * @param {Array} pairs1
 * @param {Array} pairs2
 */

const Broadphase_makePairsUnique_temp = {
  keys: []
};
const Broadphase_makePairsUnique_p1 = [];
const Broadphase_makePairsUnique_p2 = [];

Broadphase.boundingSphereCheck = (bodyA, bodyB) => {
  const dist = new Vec3(); // bsc_dist;

  bodyA.position.vsub(bodyB.position, dist);
  const sa = bodyA.shapes[0];
  const sb = bodyB.shapes[0];
  return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();
};
/**
 * Naive broadphase implementation, used in lack of better ones.
 * @class NaiveBroadphase
 * @constructor
 * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)
 * @extends Broadphase
 */

class NaiveBroadphase extends Broadphase {
  constructor() {
    super();
  }
  /**
   * Get all the collision pairs in the physics world
   * @method collisionPairs
   * @param {World} world
   * @param {Array} pairs1
   * @param {Array} pairs2
   */


  collisionPairs(world, pairs1, pairs2) {
    const bodies = world.bodies;
    const n = bodies.length;
    let bi;
    let bj; // Naive N^2 ftw!

    for (let i = 0; i !== n; i++) {
      for (let j = 0; j !== i; j++) {
        bi = bodies[i];
        bj = bodies[j];

        if (!this.needBroadphaseCollision(bi, bj)) {
          continue;
        }

        this.intersectionTest(bi, bj, pairs1, pairs2);
      }
    }
  }
  /**
   * Returns all the bodies within an AABB.
   * @method aabbQuery
   * @param  {World} world
   * @param  {AABB} aabb
   * @param {array} result An array to store resulting bodies in.
   * @return {array}
   */


  aabbQuery(world, aabb, result = []) {
    for (let i = 0; i < world.bodies.length; i++) {
      const b = world.bodies[i];

      if (b.aabbNeedsUpdate) {
        b.computeAABB();
      } // Ugly hack until Body gets aabb


      if (b.aabb.overlaps(aabb)) {
        result.push(b);
      }
    }

    return result;
  }

}
/**
 * Storage for Ray casting data.
 * @class RaycastResult
 * @constructor
 */


class RaycastResult {
  // The index of the hit triangle, if the hit shape was a trimesh.
  // Distance to the hit. Will be set to -1 if there was no hit.
  // If the ray should stop traversing the bodies.
  constructor() {
    this.rayFromWorld = new Vec3();
    this.rayToWorld = new Vec3();
    this.hitNormalWorld = new Vec3();
    this.hitPointWorld = new Vec3();
    this.hasHit = false;
    this.shape = null;
    this.body = null;
    this.hitFaceIndex = -1;
    this.distance = -1;
    this.shouldStop = false;
  }
  /**
   * Reset all result data.
   * @method reset
   */


  reset() {
    this.rayFromWorld.setZero();
    this.rayToWorld.setZero();
    this.hitNormalWorld.setZero();
    this.hitPointWorld.setZero();
    this.hasHit = false;
    this.shape = null;
    this.body = null;
    this.hitFaceIndex = -1;
    this.distance = -1;
    this.shouldStop = false;
  }
  /**
   * @method abort
   */


  abort() {
    this.shouldStop = true;
  }
  /**
   * @method set
   * @param {Vec3} rayFromWorld
   * @param {Vec3} rayToWorld
   * @param {Vec3} hitNormalWorld
   * @param {Vec3} hitPointWorld
   * @param {Shape} shape
   * @param {Body} body
   * @param {number} distance
   */


  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {
    this.rayFromWorld.copy(rayFromWorld);
    this.rayToWorld.copy(rayToWorld);
    this.hitNormalWorld.copy(hitNormalWorld);
    this.hitPointWorld.copy(hitPointWorld);
    this.shape = shape;
    this.body = body;
    this.distance = distance;
  }

}
/**
 * A line in 3D space that intersects bodies and return points.
 * @class Ray
 * @constructor
 * @param {Vec3} from
 * @param {Vec3} to
 */

class Ray {
  // The precision of the ray. Used when checking parallelity etc.
  // Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.
  // If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.
  // The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.
  // Current result object.
  // Will be set to true during intersectWorld() if the ray hit anything.
  // User-provided result callback. Will be used if mode is Ray.ALL.
  constructor(from = new Vec3(), to = new Vec3()) {
    this.from = from.clone();
    this.to = to.clone();
    this.direction = new Vec3();
    this.precision = 0.0001;
    this.checkCollisionResponse = true;
    this.skipBackfaces = false;
    this.collisionFilterMask = -1;
    this.collisionFilterGroup = -1;
    this.mode = Ray.ANY;
    this.result = new RaycastResult();
    this.hasHit = false;

    this.callback = result => {};
  }
  /**
   * Do itersection against all bodies in the given World.
   * @method intersectWorld
   * @param  {World} world
   * @param  {object} options
   * @return {Boolean} True if the ray hit anything, otherwise false.
   */


  intersectWorld(world, options) {
    this.mode = options.mode || Ray.ANY;
    this.result = options.result || new RaycastResult();
    this.skipBackfaces = !!options.skipBackfaces;
    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;
    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;
    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;

    if (options.from) {
      this.from.copy(options.from);
    }

    if (options.to) {
      this.to.copy(options.to);
    }

    this.callback = options.callback || (() => {});

    this.hasHit = false;
    this.result.reset();
    this.updateDirection();
    this.getAABB(tmpAABB);
    tmpArray.length = 0;
    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);
    this.intersectBodies(tmpArray);
    return this.hasHit;
  }
  /**
   * Shoot a ray at a body, get back information about the hit.
   * @param {Body} body
   * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.
   */


  intersectBody(body, result) {
    if (result) {
      this.result = result;
      this.updateDirection();
    }

    const checkCollisionResponse = this.checkCollisionResponse;

    if (checkCollisionResponse && !body.collisionResponse) {
      return;
    }

    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {
      return;
    }

    const xi = intersectBody_xi;
    const qi = intersectBody_qi;

    for (let i = 0, N = body.shapes.length; i < N; i++) {
      const shape = body.shapes[i];

      if (checkCollisionResponse && !shape.collisionResponse) {
        continue; // Skip
      }

      body.quaternion.mult(body.shapeOrientations[i], qi);
      body.quaternion.vmult(body.shapeOffsets[i], xi);
      xi.vadd(body.position, xi);
      this.intersectShape(shape, qi, xi, body);

      if (this.result.shouldStop) {
        break;
      }
    }
  }
  /**
   * @method intersectBodies
   * @param {Array} bodies An array of Body objects.
   * @param {RaycastResult} [result] Deprecated
   */


  intersectBodies(bodies, result) {
    if (result) {
      this.result = result;
      this.updateDirection();
    }

    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {
      this.intersectBody(bodies[i]);
    }
  }
  /**
   * Updates the direction vector.
   */


  updateDirection() {
    this.to.vsub(this.from, this.direction);
    this.direction.normalize();
  }

  intersectShape(shape, quat, position, body) {
    const from = this.from; // Checking boundingSphere

    const distance = distanceFromIntersection(from, this.direction, position);

    if (distance > shape.boundingSphereRadius) {
      return;
    }

    const intersectMethod = this[shape.type];

    if (intersectMethod) {
      intersectMethod.call(this, shape, quat, position, body, shape);
    }
  }

  _intersectBox(box, quat, position, body, reportedShape) {
    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);
  }

  _intersectPlane(shape, quat, position, body, reportedShape) {
    const from = this.from;
    const to = this.to;
    const direction = this.direction; // Get plane normal

    const worldNormal = new Vec3(0, 0, 1);
    quat.vmult(worldNormal, worldNormal);
    const len = new Vec3();
    from.vsub(position, len);
    const planeToFrom = len.dot(worldNormal);
    to.vsub(position, len);
    const planeToTo = len.dot(worldNormal);

    if (planeToFrom * planeToTo > 0) {
      // "from" and "to" are on the same side of the plane... bail out
      return;
    }

    if (from.distanceTo(to) < planeToFrom) {
      return;
    }

    const n_dot_dir = worldNormal.dot(direction);

    if (Math.abs(n_dot_dir) < this.precision) {
      // No intersection
      return;
    }

    const planePointToFrom = new Vec3();
    const dir_scaled_with_t = new Vec3();
    const hitPointWorld = new Vec3();
    from.vsub(position, planePointToFrom);
    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;
    direction.scale(t, dir_scaled_with_t);
    from.vadd(dir_scaled_with_t, hitPointWorld);
    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);
  }
  /**
   * Get the world AABB of the ray.
   */


  getAABB(aabb) {
    const {
      lowerBound,
      upperBound
    } = aabb;
    const to = this.to;
    const from = this.from;
    lowerBound.x = Math.min(to.x, from.x);
    lowerBound.y = Math.min(to.y, from.y);
    lowerBound.z = Math.min(to.z, from.z);
    upperBound.x = Math.max(to.x, from.x);
    upperBound.y = Math.max(to.y, from.y);
    upperBound.z = Math.max(to.z, from.z);
  }

  _intersectHeightfield(shape, quat, position, body, reportedShape) {
    const data = shape.data;
    const w = shape.elementSize; // Convert the ray to local heightfield coordinates

    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);

    localRay.from.copy(this.from);
    localRay.to.copy(this.to);
    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);
    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);
    localRay.updateDirection(); // Get the index of the data points to test against

    const index = intersectHeightfield_index;
    let iMinX;
    let iMinY;
    let iMaxX;
    let iMaxY; // Set to max

    iMinX = iMinY = 0;
    iMaxX = iMaxY = shape.data.length - 1;
    const aabb = new AABB();
    localRay.getAABB(aabb);
    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);
    iMinX = Math.max(iMinX, index[0]);
    iMinY = Math.max(iMinY, index[1]);
    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);
    iMaxX = Math.min(iMaxX, index[0] + 1);
    iMaxY = Math.min(iMaxY, index[1] + 1);

    for (let i = iMinX; i < iMaxX; i++) {
      for (let j = iMinY; j < iMaxY; j++) {
        if (this.result.shouldStop) {
          return;
        }

        shape.getAabbAtIndex(i, j, aabb);

        if (!aabb.overlapsRay(localRay)) {
          continue;
        } // Lower triangle


        shape.getConvexTrianglePillar(i, j, false);
        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);

        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);

        if (this.result.shouldStop) {
          return;
        } // Upper triangle


        shape.getConvexTrianglePillar(i, j, true);
        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);

        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);
      }
    }
  }

  _intersectSphere(sphere, quat, position, body, reportedShape) {
    const from = this.from;
    const to = this.to;
    const r = sphere.radius;
    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;
    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));
    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;
    const delta = b ** 2 - 4 * a * c;
    const intersectionPoint = Ray_intersectSphere_intersectionPoint;
    const normal = Ray_intersectSphere_normal;

    if (delta < 0) {
      // No intersection
      return;
    } else if (delta === 0) {
      // single intersection point
      from.lerp(to, delta, intersectionPoint);
      intersectionPoint.vsub(position, normal);
      normal.normalize();
      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
    } else {
      const d1 = (-b - Math.sqrt(delta)) / (2 * a);
      const d2 = (-b + Math.sqrt(delta)) / (2 * a);

      if (d1 >= 0 && d1 <= 1) {
        from.lerp(to, d1, intersectionPoint);
        intersectionPoint.vsub(position, normal);
        normal.normalize();
        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
      }

      if (this.result.shouldStop) {
        return;
      }

      if (d2 >= 0 && d2 <= 1) {
        from.lerp(to, d2, intersectionPoint);
        intersectionPoint.vsub(position, normal);
        normal.normalize();
        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
      }
    }
  }

  _intersectConvex(shape, quat, position, body, reportedShape, options) {
    const normal = intersectConvex_normal;
    const vector = intersectConvex_vector;
    const faceList = options && options.faceList || null; // Checking faces

    const faces = shape.faces;
    const vertices = shape.vertices;
    const normals = shape.faceNormals;
    const direction = this.direction;
    const from = this.from;
    const to = this.to;
    const fromToDistance = from.distanceTo(to);
    const Nfaces = faceList ? faceList.length : faces.length;
    const result = this.result;

    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {
      const fi = faceList ? faceList[j] : j;
      const face = faces[fi];
      const faceNormal = normals[fi];
      const q = quat;
      const x = position; // determine if ray intersects the plane of the face
      // note: this works regardless of the direction of the face normal
      // Get plane point in world coordinates...

      vector.copy(vertices[face[0]]);
      q.vmult(vector, vector);
      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.

      vector.vsub(from, vector); // Get plane normal

      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting

      const dot = direction.dot(normal); // Bail out if ray and plane are parallel

      if (Math.abs(dot) < this.precision) {
        continue;
      } // calc distance to plane


      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray

      if (scalar < 0) {
        continue;
      } // if (dot < 0) {
      // Intersection point is from + direction * scalar


      direction.scale(scalar, intersectPoint);
      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.

      a.copy(vertices[face[0]]);
      q.vmult(a, a);
      x.vadd(a, a);

      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {
        // Transform 3 vertices to world coords
        b.copy(vertices[face[i]]);
        c.copy(vertices[face[i + 1]]);
        q.vmult(b, b);
        q.vmult(c, c);
        x.vadd(b, b);
        x.vadd(c, c);
        const distance = intersectPoint.distanceTo(from);

        if (!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {
          continue;
        }

        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);
      } // }

    }
  }
  /**
   * @todo Optimize by transforming the world to local space first.
   * @todo Use Octree lookup
   */


  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {
    const normal = intersectTrimesh_normal;
    const triangles = intersectTrimesh_triangles;
    const treeTransform = intersectTrimesh_treeTransform;
    const vector = intersectConvex_vector;
    const localDirection = intersectTrimesh_localDirection;
    const localFrom = intersectTrimesh_localFrom;
    const localTo = intersectTrimesh_localTo;
    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;
    const worldNormal = intersectTrimesh_worldNormal;
    const faceList = options && options.faceList || null; // Checking faces

    const indices = mesh.indices;
    const vertices = mesh.vertices; // const normals = mesh.faceNormals

    const from = this.from;
    const to = this.to;
    const direction = this.direction;
    treeTransform.position.copy(position);
    treeTransform.quaternion.copy(quat); // Transform ray to local space!

    Transform.vectorToLocalFrame(position, quat, direction, localDirection);
    Transform.pointToLocalFrame(position, quat, from, localFrom);
    Transform.pointToLocalFrame(position, quat, to, localTo);
    localTo.x *= mesh.scale.x;
    localTo.y *= mesh.scale.y;
    localTo.z *= mesh.scale.z;
    localFrom.x *= mesh.scale.x;
    localFrom.y *= mesh.scale.y;
    localFrom.z *= mesh.scale.z;
    localTo.vsub(localFrom, localDirection);
    localDirection.normalize();
    const fromToDistanceSquared = localFrom.distanceSquared(localTo);
    mesh.tree.rayQuery(this, treeTransform, triangles);

    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {
      const trianglesIndex = triangles[i];
      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face
      // note: this works regardless of the direction of the face normal
      // Get plane point in world coordinates...

      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.

      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting

      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel
      // if (Math.abs( dot ) < this.precision){
      //     continue;
      // }
      // calc distance to plane

      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray

      if (scalar < 0) {
        continue;
      } // Intersection point is from + direction * scalar


      localDirection.scale(scalar, intersectPoint);
      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices

      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);
      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);
      const squaredDistance = intersectPoint.distanceSquared(localFrom);

      if (!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {
        continue;
      } // transform intersectpoint and normal to world


      Transform.vectorToWorldFrame(quat, normal, worldNormal);
      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);
      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);
    }

    triangles.length = 0;
  }
  /**
   * @return {boolean} True if the intersections should continue
   */


  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {
    const from = this.from;
    const to = this.to;
    const distance = from.distanceTo(hitPointWorld);
    const result = this.result; // Skip back faces?

    if (this.skipBackfaces && normal.dot(this.direction) > 0) {
      return;
    }

    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;

    switch (this.mode) {
      case Ray.ALL:
        this.hasHit = true;
        result.set(from, to, normal, hitPointWorld, shape, body, distance);
        result.hasHit = true;
        this.callback(result);
        break;

      case Ray.CLOSEST:
        // Store if closer than current closest
        if (distance < result.distance || !result.hasHit) {
          this.hasHit = true;
          result.hasHit = true;
          result.set(from, to, normal, hitPointWorld, shape, body, distance);
        }

        break;

      case Ray.ANY:
        // Report and stop.
        this.hasHit = true;
        result.hasHit = true;
        result.set(from, to, normal, hitPointWorld, shape, body, distance);
        result.shouldStop = true;
        break;
    }
  }

}

Ray.CLOSEST = 1;
Ray.ANY = 2;
Ray.ALL = 4;
const tmpAABB = new AABB();
const tmpArray = [];
const v1 = new Vec3();
const v2 = new Vec3();
/*
 * As per "Barycentric Technique" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division
 */

Ray.pointInTriangle = pointInTriangle;

function pointInTriangle(p, a, b, c) {
  c.vsub(a, v0);
  b.vsub(a, v1);
  p.vsub(a, v2);
  const dot00 = v0.dot(v0);
  const dot01 = v0.dot(v1);
  const dot02 = v0.dot(v2);
  const dot11 = v1.dot(v1);
  const dot12 = v1.dot(v2);
  let u;
  let v;
  return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;
}

const intersectBody_xi = new Vec3();
const intersectBody_qi = new Quaternion();
const intersectPoint = new Vec3();
const a = new Vec3();
const b = new Vec3();
const c = new Vec3();
Ray.prototype[Shape.types.BOX] = Ray.prototype._intersectBox;
Ray.prototype[Shape.types.PLANE] = Ray.prototype._intersectPlane;
const intersectConvexOptions = {
  faceList: [0]
};
const worldPillarOffset = new Vec3();
const intersectHeightfield_localRay = new Ray();
const intersectHeightfield_index = [];
Ray.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype._intersectHeightfield;
const Ray_intersectSphere_intersectionPoint = new Vec3();
const Ray_intersectSphere_normal = new Vec3();
Ray.prototype[Shape.types.SPHERE] = Ray.prototype._intersectSphere;
const intersectConvex_normal = new Vec3();
const intersectConvex_vector = new Vec3();
Ray.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype._intersectConvex;
const intersectTrimesh_normal = new Vec3();
const intersectTrimesh_localDirection = new Vec3();
const intersectTrimesh_localFrom = new Vec3();
const intersectTrimesh_localTo = new Vec3();
const intersectTrimesh_worldNormal = new Vec3();
const intersectTrimesh_worldIntersectPoint = new Vec3();
const intersectTrimesh_localAABB = new AABB();
const intersectTrimesh_triangles = [];
const intersectTrimesh_treeTransform = new Transform();
Ray.prototype[Shape.types.TRIMESH] = Ray.prototype._intersectTrimesh;
const v0 = new Vec3();
const intersect = new Vec3();

function distanceFromIntersection(from, direction, position) {
  // v0 is vector from from to position
  position.vsub(from, v0);
  const dot = v0.dot(direction); // intersect = direction*dot + from

  direction.scale(dot, intersect);
  intersect.vadd(from, intersect);
  const distance = position.distanceTo(intersect);
  return distance;
}
/**
 * Sweep and prune broadphase along one axis.
 *
 * @class SAPBroadphase
 * @constructor
 * @param {World} [world]
 * @extends Broadphase
 */


class SAPBroadphase extends Broadphase {
  // List of bodies currently in the broadphase.
  // The world to search in.
  // Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.
  constructor(world) {
    super();
    this.axisList = [];
    this.world = null;
    this.axisIndex = 0;
    const axisList = this.axisList;

    this._addBodyHandler = event => {
      axisList.push(event.body);
    };

    this._removeBodyHandler = event => {
      const idx = axisList.indexOf(event.body);

      if (idx !== -1) {
        axisList.splice(idx, 1);
      }
    };

    if (world) {
      this.setWorld(world);
    }
  }
  /**
   * Change the world
   * @method setWorld
   * @param  {World} world
   */


  setWorld(world) {
    // Clear the old axis array
    this.axisList.length = 0; // Add all bodies from the new world

    for (let i = 0; i < world.bodies.length; i++) {
      this.axisList.push(world.bodies[i]);
    } // Remove old handlers, if any


    world.removeEventListener('addBody', this._addBodyHandler);
    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.

    world.addEventListener('addBody', this._addBodyHandler);
    world.addEventListener('removeBody', this._removeBodyHandler);
    this.world = world;
    this.dirty = true;
  }
  /**
   * Collect all collision pairs
   * @method collisionPairs
   * @param  {World} world
   * @param  {Array} p1
   * @param  {Array} p2
   */


  collisionPairs(world, p1, p2) {
    const bodies = this.axisList;
    const N = bodies.length;
    const axisIndex = this.axisIndex;
    let i;
    let j;

    if (this.dirty) {
      this.sortList();
      this.dirty = false;
    } // Look through the list


    for (i = 0; i !== N; i++) {
      const bi = bodies[i];

      for (j = i + 1; j < N; j++) {
        const bj = bodies[j];

        if (!this.needBroadphaseCollision(bi, bj)) {
          continue;
        }

        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {
          break;
        }

        this.intersectionTest(bi, bj, p1, p2);
      }
    }
  }

  sortList() {
    const axisList = this.axisList;
    const axisIndex = this.axisIndex;
    const N = axisList.length; // Update AABBs

    for (let i = 0; i !== N; i++) {
      const bi = axisList[i];

      if (bi.aabbNeedsUpdate) {
        bi.computeAABB();
      }
    } // Sort the list


    if (axisIndex === 0) {
      SAPBroadphase.insertionSortX(axisList);
    } else if (axisIndex === 1) {
      SAPBroadphase.insertionSortY(axisList);
    } else if (axisIndex === 2) {
      SAPBroadphase.insertionSortZ(axisList);
    }
  }
  /**
   * Computes the variance of the body positions and estimates the best
   * axis to use. Will automatically set property .axisIndex.
   * @method autoDetectAxis
   */


  autoDetectAxis() {
    let sumX = 0;
    let sumX2 = 0;
    let sumY = 0;
    let sumY2 = 0;
    let sumZ = 0;
    let sumZ2 = 0;
    const bodies = this.axisList;
    const N = bodies.length;
    const invN = 1 / N;

    for (let i = 0; i !== N; i++) {
      const b = bodies[i];
      const centerX = b.position.x;
      sumX += centerX;
      sumX2 += centerX * centerX;
      const centerY = b.position.y;
      sumY += centerY;
      sumY2 += centerY * centerY;
      const centerZ = b.position.z;
      sumZ += centerZ;
      sumZ2 += centerZ * centerZ;
    }

    const varianceX = sumX2 - sumX * sumX * invN;
    const varianceY = sumY2 - sumY * sumY * invN;
    const varianceZ = sumZ2 - sumZ * sumZ * invN;

    if (varianceX > varianceY) {
      if (varianceX > varianceZ) {
        this.axisIndex = 0;
      } else {
        this.axisIndex = 2;
      }
    } else if (varianceY > varianceZ) {
      this.axisIndex = 1;
    } else {
      this.axisIndex = 2;
    }
  }
  /**
   * Returns all the bodies within an AABB.
   * @method aabbQuery
   * @param  {World} world
   * @param  {AABB} aabb
   * @param {array} result An array to store resulting bodies in.
   * @return {array}
   */


  aabbQuery(world, aabb, result = []) {
    if (this.dirty) {
      this.sortList();
      this.dirty = false;
    }

    const axisIndex = this.axisIndex;
    let axis = 'x';

    if (axisIndex === 1) {
      axis = 'y';
    }

    if (axisIndex === 2) {
      axis = 'z';
    }

    const axisList = this.axisList;
    const lower = aabb.lowerBound[axis];
    const upper = aabb.upperBound[axis];

    for (let i = 0; i < axisList.length; i++) {
      const b = axisList[i];

      if (b.aabbNeedsUpdate) {
        b.computeAABB();
      }

      if (b.aabb.overlaps(aabb)) {
        result.push(b);
      }
    }

    return result;
  }

}
/**
 * @static
 * @method insertionSortX
 * @param  {Array} a
 * @return {Array}
 */


SAPBroadphase.insertionSortX = a => {
  for (let i = 1, l = a.length; i < l; i++) {
    const v = a[i];
    let j;

    for (j = i - 1; j >= 0; j--) {
      if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {
        break;
      }

      a[j + 1] = a[j];
    }

    a[j + 1] = v;
  }

  return a;
};
/**
 * @static
 * @method insertionSortY
 * @param  {Array} a
 * @return {Array}
 */


SAPBroadphase.insertionSortY = a => {
  for (let i = 1, l = a.length; i < l; i++) {
    const v = a[i];
    let j;

    for (j = i - 1; j >= 0; j--) {
      if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {
        break;
      }

      a[j + 1] = a[j];
    }

    a[j + 1] = v;
  }

  return a;
};
/**
 * @static
 * @method insertionSortZ
 * @param  {Array} a
 * @return {Array}
 */


SAPBroadphase.insertionSortZ = a => {
  for (let i = 1, l = a.length; i < l; i++) {
    const v = a[i];
    let j;

    for (j = i - 1; j >= 0; j--) {
      if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {
        break;
      }

      a[j + 1] = a[j];
    }

    a[j + 1] = v;
  }

  return a;
};
/**
 * Check if the bounds of two bodies overlap, along the given SAP axis.
 * @static
 * @method checkBounds
 * @param  {Body} bi
 * @param  {Body} bj
 * @param  {Number} axisIndex
 * @return {Boolean}
 */


SAPBroadphase.checkBounds = (bi, bj, axisIndex) => {
  let biPos;
  let bjPos;

  if (axisIndex === 0) {
    biPos = bi.position.x;
    bjPos = bj.position.x;
  } else if (axisIndex === 1) {
    biPos = bi.position.y;
    bjPos = bj.position.y;
  } else if (axisIndex === 2) {
    biPos = bi.position.z;
    bjPos = bj.position.z;
  }

  const ri = bi.boundingRadius,
        rj = bj.boundingRadius,
        // boundA1 = biPos - ri,
  boundA2 = biPos + ri,
        boundB1 = bjPos - rj; // boundB2 = bjPos + rj;

  return boundB1 < boundA2;
};

function Utils() {}
/**
 * Extend an options object with default values.
 * @static
 * @method defaults
 * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.
 * @param  {object} defaults An object containing default values.
 * @return {object} The modified options object.
 */


Utils.defaults = (options = {}, defaults) => {
  for (let key in defaults) {
    if (!(key in options)) {
      options[key] = defaults[key];
    }
  }

  return options;
};
/**
 * Constraint base class
 * @class Constraint
 * @author schteppe
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {boolean} [options.collideConnected=true]
 * @param {boolean} [options.wakeUpBodies=true]
 */


class Constraint {
  // Equations to be solved in this constraint.
  // Set to true if you want the bodies to collide when they are connected.
  constructor(bodyA, bodyB, options = {}) {
    options = Utils.defaults(options, {
      collideConnected: true,
      wakeUpBodies: true
    });
    this.equations = [];
    this.bodyA = bodyA;
    this.bodyB = bodyB;
    this.id = Constraint.idCounter++;
    this.collideConnected = options.collideConnected;

    if (options.wakeUpBodies) {
      if (bodyA) {
        bodyA.wakeUp();
      }

      if (bodyB) {
        bodyB.wakeUp();
      }
    }
  }
  /**
   * Update all the equations with data.
   * @method update
   */


  update() {
    throw new Error('method update() not implmemented in this Constraint subclass!');
  }
  /**
   * Enables all equations in the constraint.
   * @method enable
   */


  enable() {
    const eqs = this.equations;

    for (let i = 0; i < eqs.length; i++) {
      eqs[i].enabled = true;
    }
  }
  /**
   * Disables all equations in the constraint.
   * @method disable
   */


  disable() {
    const eqs = this.equations;

    for (let i = 0; i < eqs.length; i++) {
      eqs[i].enabled = false;
    }
  }

}

Constraint.idCounter = 0;
/**
 * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.
 */

class JacobianElement {
  constructor() {
    this.spatial = new Vec3();
    this.rotational = new Vec3();
  }
  /**
   * Multiply with other JacobianElement
   */


  multiplyElement(element) {
    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);
  }
  /**
   * Multiply with two vectors
   */


  multiplyVectors(spatial, rotational) {
    return spatial.dot(this.spatial) + rotational.dot(this.rotational);
  }

}
/**
 * Equation base class
 * @class Equation
 * @constructor
 * @author schteppe
 * @param {Body} bi
 * @param {Body} bj
 * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.
 * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.
 */


class Equation {
  // SPOOK parameter
  // SPOOK parameter
  // SPOOK parameter
  // A number, proportional to the force added to the bodies.
  constructor(bi, bj, minForce = -1e6, maxForce = 1e6) {
    this.id = Equation.id++;
    this.minForce = minForce;
    this.maxForce = maxForce;
    this.bi = bi;
    this.bj = bj;
    this.a = 0.0; // SPOOK parameter

    this.b = 0.0; // SPOOK parameter

    this.eps = 0.0; // SPOOK parameter

    this.jacobianElementA = new JacobianElement();
    this.jacobianElementB = new JacobianElement();
    this.enabled = true;
    this.multiplier = 0;
    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params
  }
  /**
   * Recalculates a,b,eps.
   * @method setSpookParams
   */


  setSpookParams(stiffness, relaxation, timeStep) {
    const d = relaxation;
    const k = stiffness;
    const h = timeStep;
    this.a = 4.0 / (h * (1 + 4 * d));
    this.b = 4.0 * d / (1 + 4 * d);
    this.eps = 4.0 / (h * h * k * (1 + 4 * d));
  }
  /**
   * Computes the right hand side of the SPOOK equation
   * @method computeB
   * @return {Number}
   */


  computeB(a, b, h) {
    const GW = this.computeGW();
    const Gq = this.computeGq();
    const GiMf = this.computeGiMf();
    return -Gq * a - GW * b - GiMf * h;
  }
  /**
   * Computes G*q, where q are the generalized body coordinates
   * @method computeGq
   * @return {Number}
   */


  computeGq() {
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const bi = this.bi;
    const bj = this.bj;
    const xi = bi.position;
    const xj = bj.position;
    return GA.spatial.dot(xi) + GB.spatial.dot(xj);
  }
  /**
   * Computes G*W, where W are the body velocities
   * @method computeGW
   * @return {Number}
   */


  computeGW() {
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const bi = this.bi;
    const bj = this.bj;
    const vi = bi.velocity;
    const vj = bj.velocity;
    const wi = bi.angularVelocity;
    const wj = bj.angularVelocity;
    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
  }
  /**
   * Computes G*Wlambda, where W are the body velocities
   * @method computeGWlambda
   * @return {Number}
   */


  computeGWlambda() {
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const bi = this.bi;
    const bj = this.bj;
    const vi = bi.vlambda;
    const vj = bj.vlambda;
    const wi = bi.wlambda;
    const wj = bj.wlambda;
    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
  }

  computeGiMf() {
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const bi = this.bi;
    const bj = this.bj;
    const fi = bi.force;
    const ti = bi.torque;
    const fj = bj.force;
    const tj = bj.torque;
    const invMassi = bi.invMassSolve;
    const invMassj = bj.invMassSolve;
    fi.scale(invMassi, iMfi);
    fj.scale(invMassj, iMfj);
    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);
    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);
    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);
  }

  computeGiMGt() {
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const bi = this.bi;
    const bj = this.bj;
    const invMassi = bi.invMassSolve;
    const invMassj = bj.invMassSolve;
    const invIi = bi.invInertiaWorldSolve;
    const invIj = bj.invInertiaWorldSolve;
    let result = invMassi + invMassj;
    invIi.vmult(GA.rotational, tmp$1);
    result += tmp$1.dot(GA.rotational);
    invIj.vmult(GB.rotational, tmp$1);
    result += tmp$1.dot(GB.rotational);
    return result;
  }
  /**
   * Add constraint velocity to the bodies.
   * @method addToWlambda
   * @param {Number} deltalambda
   */


  addToWlambda(deltalambda) {
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const bi = this.bi;
    const bj = this.bj;
    const temp = addToWlambda_temp; // Add to linear velocity
    // v_lambda += inv(M) * delta_lamba * G

    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);
    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity

    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);
    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);
    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);
    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);
  }
  /**
   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps
   * @method computeInvC
   * @param  {Number} eps
   * @return {Number}
   */


  computeC() {
    return this.computeGiMGt() + this.eps;
  }

}

Equation.id = 0;
/**
 * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
 * @method computeGiMf
 * @return {Number}
 */

const iMfi = new Vec3();
const iMfj = new Vec3();
const invIi_vmult_taui = new Vec3();
const invIj_vmult_tauj = new Vec3();
/**
 * Computes G*inv(M)*G'
 * @method computeGiMGt
 * @return {Number}
 */

const tmp$1 = new Vec3();
const addToWlambda_temp = new Vec3();
/**
 * Contact/non-penetration constraint equation
 * @class ContactEquation
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @extends Equation
 */

class ContactEquation extends Equation {
  // "bounciness": u1 = -e*u0
  // World-oriented vector that goes from the center of bi to the contact point.
  // World-oriented vector that starts in body j position and goes to the contact point.
  // Contact normal, pointing out of body i.
  constructor(bodyA, bodyB, maxForce = 1e6) {
    super(bodyA, bodyB, 0, maxForce);
    this.restitution = 0.0;
    this.ri = new Vec3();
    this.rj = new Vec3();
    this.ni = new Vec3();
  }

  computeB(h) {
    const a = this.a;
    const b = this.b;
    const bi = this.bi;
    const bj = this.bj;
    const ri = this.ri;
    const rj = this.rj;
    const rixn = ContactEquation_computeB_temp1;
    const rjxn = ContactEquation_computeB_temp2;
    const vi = bi.velocity;
    const wi = bi.angularVelocity;
    const fi = bi.force;
    const taui = bi.torque;
    const vj = bj.velocity;
    const wj = bj.angularVelocity;
    const fj = bj.force;
    const tauj = bj.torque;
    const penetrationVec = ContactEquation_computeB_temp3;
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    const n = this.ni; // Caluclate cross products

    ri.cross(n, rixn);
    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)
    // G = [ -ni  -rixn  ni  rjxn ]

    n.negate(GA.spatial);
    rixn.negate(GA.rotational);
    GB.spatial.copy(n);
    GB.rotational.copy(rjxn); // Calculate the penetration vector

    penetrationVec.copy(bj.position);
    penetrationVec.vadd(rj, penetrationVec);
    penetrationVec.vsub(bi.position, penetrationVec);
    penetrationVec.vsub(ri, penetrationVec);
    const g = n.dot(penetrationVec); // Compute iteration

    const ePlusOne = this.restitution + 1;
    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);
    const GiMf = this.computeGiMf();
    const B = -g * a - GW * b - h * GiMf;
    return B;
  }
  /**
   * Get the current relative velocity in the contact point.
   * @method getImpactVelocityAlongNormal
   * @return {number}
   */


  getImpactVelocityAlongNormal() {
    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;
    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;
    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;
    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;
    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;
    this.bi.position.vadd(this.ri, xi);
    this.bj.position.vadd(this.rj, xj);
    this.bi.getVelocityAtWorldPoint(xi, vi);
    this.bj.getVelocityAtWorldPoint(xj, vj);
    vi.vsub(vj, relVel);
    return this.ni.dot(relVel);
  }

}

const ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors

const ContactEquation_computeB_temp2 = new Vec3();
const ContactEquation_computeB_temp3 = new Vec3();
const ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();
const ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();
const ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();
const ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();
const ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();
/**
 * Connects two bodies at given offset points.
 * @class PointToPointConstraint
 * @extends Constraint
 * @constructor
 * @param {Body} bodyA
 * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.
 * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.
 * @param {Vec3} pivotB See pivotA.
 * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.
 *
 * @example
 *     const bodyA = new Body({ mass: 1 });
 *     const bodyB = new Body({ mass: 1 });
 *     bodyA.position.set(-1, 0, 0);
 *     bodyB.position.set(1, 0, 0);
 *     bodyA.addShape(shapeA);
 *     bodyB.addShape(shapeB);
 *     world.addBody(bodyA);
 *     world.addBody(bodyB);
 *     const localPivotA = new Vec3(1, 0, 0);
 *     const localPivotB = new Vec3(-1, 0, 0);
 *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);
 *     world.addConstraint(constraint);
 */

class PointToPointConstraint extends Constraint {
  // Pivot, defined locally in bodyA.
  // Pivot, defined locally in bodyB.
  constructor(bodyA, pivotA = new Vec3(), bodyB, pivotB = new Vec3(), maxForce = 1e6) {
    super(bodyA, bodyB);
    this.pivotA = pivotA.clone();
    this.pivotB = pivotB.clone();
    const x = this.equationX = new ContactEquation(bodyA, bodyB);
    const y = this.equationY = new ContactEquation(bodyA, bodyB);
    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver

    this.equations.push(x, y, z); // Make the equations bidirectional

    x.minForce = y.minForce = z.minForce = -maxForce;
    x.maxForce = y.maxForce = z.maxForce = maxForce;
    x.ni.set(1, 0, 0);
    y.ni.set(0, 1, 0);
    z.ni.set(0, 0, 1);
  }

  update() {
    const bodyA = this.bodyA;
    const bodyB = this.bodyB;
    const x = this.equationX;
    const y = this.equationY;
    const z = this.equationZ; // Rotate the pivots to world space

    bodyA.quaternion.vmult(this.pivotA, x.ri);
    bodyB.quaternion.vmult(this.pivotB, x.rj);
    y.ri.copy(x.ri);
    y.rj.copy(x.rj);
    z.ri.copy(x.ri);
    z.rj.copy(x.rj);
  }

}
/**
 * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.
 * @class ConeEquation
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Vec3} [options.axisA] Local axis in A
 * @param {Vec3} [options.axisB] Local axis in B
 * @param {Vec3} [options.angle] The "cone angle" to keep
 * @param {number} [options.maxForce=1e6]
 * @extends Equation
 */


class ConeEquation extends Equation {
  // The cone angle to keep.
  constructor(bodyA, bodyB, options = {}) {
    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
    super(bodyA, bodyB, -maxForce, maxForce);
    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);
    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;
  }

  computeB(h) {
    const a = this.a;
    const b = this.b;
    const ni = this.axisA;
    const nj = this.axisB;
    const nixnj = tmpVec1;
    const njxni = tmpVec2;
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB; // Caluclate cross products

    ni.cross(nj, nixnj);
    nj.cross(ni, njxni); // The angle between two vector is:
    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b
    // g = a * b
    // gdot = (b x a) * wi + (a x b) * wj
    // G = [0 bxa 0 axb]
    // W = [vi wi vj wj]

    GA.rotational.copy(njxni);
    GB.rotational.copy(nixnj);
    const g = Math.cos(this.angle) - ni.dot(nj);
    const GW = this.computeGW();
    const GiMf = this.computeGiMf();
    const B = -g * a - GW * b - h * GiMf;
    return B;
  }

}

const tmpVec1 = new Vec3();
const tmpVec2 = new Vec3();
/**
 * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.
 * @class RotationalEquation
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Vec3} [options.axisA]
 * @param {Vec3} [options.axisB]
 * @param {number} [options.maxForce]
 * @extends Equation
 */

class RotationalEquation extends Equation {
  constructor(bodyA, bodyB, options = {}) {
    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
    super(bodyA, bodyB, -maxForce, maxForce);
    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);
    this.maxAngle = Math.PI / 2;
  }

  computeB(h) {
    const a = this.a;
    const b = this.b;
    const ni = this.axisA;
    const nj = this.axisB;
    const nixnj = tmpVec1$1;
    const njxni = tmpVec2$1;
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB; // Caluclate cross products

    ni.cross(nj, nixnj);
    nj.cross(ni, njxni); // g = ni * nj
    // gdot = (nj x ni) * wi + (ni x nj) * wj
    // G = [0 njxni 0 nixnj]
    // W = [vi wi vj wj]

    GA.rotational.copy(njxni);
    GB.rotational.copy(nixnj);
    const g = Math.cos(this.maxAngle) - ni.dot(nj);
    const GW = this.computeGW();
    const GiMf = this.computeGiMf();
    const B = -g * a - GW * b - h * GiMf;
    return B;
  }

}

const tmpVec1$1 = new Vec3();
const tmpVec2$1 = new Vec3();
/**
 * @class ConeTwistConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {Vec3} [options.pivotA]
 * @param {Vec3} [options.pivotB]
 * @param {Vec3} [options.axisA]
 * @param {Vec3} [options.axisB]
 * @param {Number} [options.maxForce=1e6]
 * @extends PointToPointConstraint
 */

class ConeTwistConstraint extends PointToPointConstraint {
  constructor(bodyA, bodyB, options = {}) {
    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between

    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
    super(bodyA, pivotA, bodyB, pivotB, maxForce);
    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();
    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();
    this.collideConnected = !!options.collideConnected;
    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;
    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);
    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);
    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward

    c.maxForce = 0;
    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position

    t.maxForce = 0;
    t.minForce = -maxForce;
    this.equations.push(c, t);
  }

  update() {
    const bodyA = this.bodyA;
    const bodyB = this.bodyB;
    const cone = this.coneEquation;
    const twist = this.twistEquation;
    super.update(); // Update the axes to the cone constraint

    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);
    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint

    this.axisA.tangents(twist.axisA, twist.axisA);
    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);
    this.axisB.tangents(twist.axisB, twist.axisB);
    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);
    cone.angle = this.angle;
    twist.maxAngle = this.twistAngle;
  }

}
/**
 * Constrains two bodies to be at a constant distance from each others center of mass.
 * @class DistanceConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB
 * @param {Number} [maxForce=1e6]
 * @extends Constraint
 */


class DistanceConstraint extends Constraint {
  constructor(bodyA, bodyB, distance, maxForce = 1e6) {
    super(bodyA, bodyB);

    if (typeof distance === 'undefined') {
      distance = bodyA.position.distanceTo(bodyB.position);
    }

    this.distance = distance;
    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);
    this.equations.push(eq); // Make it bidirectional

    eq.minForce = -maxForce;
    eq.maxForce = maxForce;
  }

  update() {
    const bodyA = this.bodyA;
    const bodyB = this.bodyB;
    const eq = this.distanceEquation;
    const halfDist = this.distance * 0.5;
    const normal = eq.ni;
    bodyB.position.vsub(bodyA.position, normal);
    normal.normalize();
    normal.scale(halfDist, eq.ri);
    normal.scale(-halfDist, eq.rj);
  }

}
/**
 * Lock constraint. Will remove all degrees of freedom between the bodies.
 * @class LockConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {Number} [options.maxForce=1e6]
 * @extends PointToPointConstraint
 */


class LockConstraint extends PointToPointConstraint {
  constructor(bodyA, bodyB, options = {}) {
    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between

    const pivotA = new Vec3();
    const pivotB = new Vec3();
    const halfWay = new Vec3();
    bodyA.position.vadd(bodyB.position, halfWay);
    halfWay.scale(0.5, halfWay);
    bodyB.pointToLocalFrame(halfWay, pivotB);
    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies

    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces

    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);
    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);
    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);
    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);
    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);
    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place

    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);
    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);
    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);
    this.equations.push(r1, r2, r3);
  }

  update() {
    const bodyA = this.bodyA;
    const bodyB = this.bodyB;
    const motor = this.motorEquation;
    const r1 = this.rotationalEquation1;
    const r2 = this.rotationalEquation2;
    const r3 = this.rotationalEquation3;
    super.update(); // These vector pairs must be orthogonal

    bodyA.vectorToWorldFrame(this.xA, r1.axisA);
    bodyB.vectorToWorldFrame(this.yB, r1.axisB);
    bodyA.vectorToWorldFrame(this.yA, r2.axisA);
    bodyB.vectorToWorldFrame(this.zB, r2.axisB);
    bodyA.vectorToWorldFrame(this.zA, r3.axisA);
    bodyB.vectorToWorldFrame(this.xB, r3.axisB);
  }

}
/**
 * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.
 * @class RotationalMotorEquation
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} maxForce
 * @extends Equation
 */


class RotationalMotorEquation extends Equation {
  // World oriented rotational axis.
  // World oriented rotational axis.
  // Motor velocity.
  constructor(bodyA, bodyB, maxForce = 1e6) {
    super(bodyA, bodyB, -maxForce, maxForce);
    this.axisA = new Vec3();
    this.axisB = new Vec3();
    this.targetVelocity = 0;
  }

  computeB(h) {
    const a = this.a;
    const b = this.b;
    const bi = this.bi;
    const bj = this.bj;
    const axisA = this.axisA;
    const axisB = this.axisB;
    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB; // g = 0
    // gdot = axisA * wi - axisB * wj
    // gdot = G * W = G * [vi wi vj wj]
    // =>
    // G = [0 axisA 0 -axisB]

    GA.rotational.copy(axisA);
    axisB.negate(GB.rotational);
    const GW = this.computeGW() - this.targetVelocity;
    const GiMf = this.computeGiMf();
    const B = -GW * b - h * GiMf;
    return B;
  }

}
/**
 * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.
 * @class HingeConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.
 * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.
 * @param {Vec3} [options.pivotB]
 * @param {Vec3} [options.axisB]
 * @param {Number} [options.maxForce=1e6]
 * @extends PointToPointConstraint
 */


class HingeConstraint extends PointToPointConstraint {
  // Rotation axis, defined locally in bodyA.
  // Rotation axis, defined locally in bodyB.
  constructor(bodyA, bodyB, options = {}) {
    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
    super(bodyA, pivotA, bodyB, pivotB, maxForce);
    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
    axisA.normalize();
    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);
    axisB.normalize();
    this.collideConnected = !!options.collideConnected;
    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);
    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);
    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);
    motor.enabled = false; // Not enabled by default
    // Equations to be fed to the solver

    this.equations.push(rotational1, rotational2, motor);
  }
  /**
   * @method enableMotor
   */


  enableMotor() {
    this.motorEquation.enabled = true;
  }
  /**
   * @method disableMotor
   */


  disableMotor() {
    this.motorEquation.enabled = false;
  }
  /**
   * @method setMotorSpeed
   * @param {number} speed
   */


  setMotorSpeed(speed) {
    this.motorEquation.targetVelocity = speed;
  }
  /**
   * @method setMotorMaxForce
   * @param {number} maxForce
   */


  setMotorMaxForce(maxForce) {
    this.motorEquation.maxForce = maxForce;
    this.motorEquation.minForce = -maxForce;
  }

  update() {
    const bodyA = this.bodyA;
    const bodyB = this.bodyB;
    const motor = this.motorEquation;
    const r1 = this.rotationalEquation1;
    const r2 = this.rotationalEquation2;
    const worldAxisA = HingeConstraint_update_tmpVec1;
    const worldAxisB = HingeConstraint_update_tmpVec2;
    const axisA = this.axisA;
    const axisB = this.axisB;
    super.update(); // Get world axes

    bodyA.quaternion.vmult(axisA, worldAxisA);
    bodyB.quaternion.vmult(axisB, worldAxisB);
    worldAxisA.tangents(r1.axisA, r2.axisA);
    r1.axisB.copy(worldAxisB);
    r2.axisB.copy(worldAxisB);

    if (this.motorEquation.enabled) {
      bodyA.quaternion.vmult(this.axisA, motor.axisA);
      bodyB.quaternion.vmult(this.axisB, motor.axisB);
    }
  }

}

const HingeConstraint_update_tmpVec1 = new Vec3();
const HingeConstraint_update_tmpVec2 = new Vec3();
/**
 * Constrains the slipping in a contact along a tangent
 * @class FrictionEquation
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g
 * @extends Equation
 */

class FrictionEquation extends Equation {
  // Tangent.
  constructor(bodyA, bodyB, slipForce) {
    super(bodyA, bodyB, -slipForce, slipForce);
    this.ri = new Vec3();
    this.rj = new Vec3();
    this.t = new Vec3();
  }

  computeB(h) {
    const a = this.a;
    const b = this.b;
    const bi = this.bi;
    const bj = this.bj;
    const ri = this.ri;
    const rj = this.rj;
    const rixt = FrictionEquation_computeB_temp1;
    const rjxt = FrictionEquation_computeB_temp2;
    const t = this.t; // Caluclate cross products

    ri.cross(t, rixt);
    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]
    // And remember, this is a pure velocity constraint, g is always zero!

    const GA = this.jacobianElementA;
    const GB = this.jacobianElementB;
    t.negate(GA.spatial);
    rixt.negate(GA.rotational);
    GB.spatial.copy(t);
    GB.rotational.copy(rjxt);
    const GW = this.computeGW();
    const GiMf = this.computeGiMf();
    const B = -GW * b - h * GiMf;
    return B;
  }

}

const FrictionEquation_computeB_temp1 = new Vec3();
const FrictionEquation_computeB_temp2 = new Vec3();
/**
 * Defines what happens when two materials meet.
 * @class ContactMaterial
 * @constructor
 * @param {Material} m1
 * @param {Material} m2
 * @param {object} [options]
 * @param {Number} [options.friction=0.3]
 * @param {Number} [options.restitution=0.3]
 * @param {number} [options.contactEquationStiffness=1e7]
 * @param {number} [options.contactEquationRelaxation=3]
 * @param {number} [options.frictionEquationStiffness=1e7]
 * @param {Number} [options.frictionEquationRelaxation=3]
 * @todo Refactor materials to materialA and materialB
 */

class ContactMaterial {
  // Identifier of this material.
  // Participating materials.
  // Friction coefficient.
  // Restitution coefficient.
  // Stiffness of the produced contact equations.
  // Relaxation time of the produced contact equations.
  // Stiffness of the produced friction equations.
  // Relaxation time of the produced friction equations
  constructor(m1, m2, options) {
    options = Utils.defaults(options, {
      friction: 0.3,
      restitution: 0.3,
      contactEquationStiffness: 1e7,
      contactEquationRelaxation: 3,
      frictionEquationStiffness: 1e7,
      frictionEquationRelaxation: 3
    });
    this.id = ContactMaterial.idCounter++;
    this.materials = [m1, m2];
    this.friction = options.friction;
    this.restitution = options.restitution;
    this.contactEquationStiffness = options.contactEquationStiffness;
    this.contactEquationRelaxation = options.contactEquationRelaxation;
    this.frictionEquationStiffness = options.frictionEquationStiffness;
    this.frictionEquationRelaxation = options.frictionEquationRelaxation;
  }

}

ContactMaterial.idCounter = 0;
/**
 * Defines a physics material.
 * @class Material
 * @constructor
 * @param {object} [options]
 * @author schteppe
 */

class Material {
  // Material name.
  // Material id.
  // Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.
  // Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.
  constructor(options = {}) {
    let name = ''; // Backwards compatibility fix

    if (typeof options === 'string') {
      name = options;
      options = {};
    }

    this.name = name;
    this.id = Material.idCounter++;
    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;
    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;
  }

}

Material.idCounter = 0;
/**
 * A spring, connecting two bodies.
 *
 * @class Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.restLength]   A number > 0. Default: 1
 * @param {number} [options.stiffness]    A number >= 0. Default: 100
 * @param {number} [options.damping]      A number >= 0. Default: 1
 * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.
 * @param {Vec3}  [options.worldAnchorB]
 * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.
 * @param {Vec3}  [options.localAnchorB]
 */

class Spring {
  // Rest length of the spring.
  // Stiffness of the spring.
  // Damping of the spring.
  // First connected body.
  // Second connected body.
  // Anchor for bodyA in local bodyA coordinates.
  // Anchor for bodyB in local bodyB coordinates.
  constructor(bodyA, bodyB, options = {}) {
    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;
    this.stiffness = options.stiffness || 100;
    this.damping = options.damping || 1;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
    this.localAnchorA = new Vec3();
    this.localAnchorB = new Vec3();

    if (options.localAnchorA) {
      this.localAnchorA.copy(options.localAnchorA);
    }

    if (options.localAnchorB) {
      this.localAnchorB.copy(options.localAnchorB);
    }

    if (options.worldAnchorA) {
      this.setWorldAnchorA(options.worldAnchorA);
    }

    if (options.worldAnchorB) {
      this.setWorldAnchorB(options.worldAnchorB);
    }
  }
  /**
   * Set the anchor point on body A, using world coordinates.
   * @method setWorldAnchorA
   * @param {Vec3} worldAnchorA
   */


  setWorldAnchorA(worldAnchorA) {
    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);
  }
  /**
   * Set the anchor point on body B, using world coordinates.
   * @method setWorldAnchorB
   * @param {Vec3} worldAnchorB
   */


  setWorldAnchorB(worldAnchorB) {
    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);
  }
  /**
   * Get the anchor point on body A, in world coordinates.
   * @method getWorldAnchorA
   * @param {Vec3} result The vector to store the result in.
   */


  getWorldAnchorA(result) {
    this.bodyA.pointToWorldFrame(this.localAnchorA, result);
  }
  /**
   * Get the anchor point on body B, in world coordinates.
   * @method getWorldAnchorB
   * @param {Vec3} result The vector to store the result in.
   */


  getWorldAnchorB(result) {
    this.bodyB.pointToWorldFrame(this.localAnchorB, result);
  }
  /**
   * Apply the spring force to the connected bodies.
   * @method applyForce
   */


  applyForce() {
    const k = this.stiffness;
    const d = this.damping;
    const l = this.restLength;
    const bodyA = this.bodyA;
    const bodyB = this.bodyB;
    const r = applyForce_r;
    const r_unit = applyForce_r_unit;
    const u = applyForce_u;
    const f = applyForce_f;
    const tmp = applyForce_tmp;
    const worldAnchorA = applyForce_worldAnchorA;
    const worldAnchorB = applyForce_worldAnchorB;
    const ri = applyForce_ri;
    const rj = applyForce_rj;
    const ri_x_f = applyForce_ri_x_f;
    const rj_x_f = applyForce_rj_x_f; // Get world anchors

    this.getWorldAnchorA(worldAnchorA);
    this.getWorldAnchorB(worldAnchorB); // Get offset points

    worldAnchorA.vsub(bodyA.position, ri);
    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points

    worldAnchorB.vsub(worldAnchorA, r);
    const rlen = r.length();
    r_unit.copy(r);
    r_unit.normalize(); // Compute relative velocity of the anchor points, u

    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity

    bodyB.angularVelocity.cross(rj, tmp);
    u.vadd(tmp, u);
    bodyA.angularVelocity.cross(ri, tmp);
    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )

    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies

    bodyA.force.vsub(f, bodyA.force);
    bodyB.force.vadd(f, bodyB.force); // Angular force

    ri.cross(f, ri_x_f);
    rj.cross(f, rj_x_f);
    bodyA.torque.vsub(ri_x_f, bodyA.torque);
    bodyB.torque.vadd(rj_x_f, bodyB.torque);
  }

}

const applyForce_r = new Vec3();
const applyForce_r_unit = new Vec3();
const applyForce_u = new Vec3();
const applyForce_f = new Vec3();
const applyForce_worldAnchorA = new Vec3();
const applyForce_worldAnchorB = new Vec3();
const applyForce_ri = new Vec3();
const applyForce_rj = new Vec3();
const applyForce_ri_x_f = new Vec3();
const applyForce_rj_x_f = new Vec3();
const applyForce_tmp = new Vec3();
const tmpRay = new Ray();
/**
 * Spherical shape
 * @class Sphere
 * @constructor
 * @extends Shape
 * @param {Number} radius The radius of the sphere, a non-negative number.
 * @author schteppe / http://github.com/schteppe
 */


class Sphere extends Shape {
  constructor(radius) {
    super({
      type: Shape.types.SPHERE
    });
    this.radius = radius !== undefined ? radius : 1.0;

    if (this.radius < 0) {
      throw new Error('The sphere radius cannot be negative.');
    }

    this.updateBoundingSphereRadius();
  }

  calculateLocalInertia(mass, target = new Vec3()) {
    const I = 2.0 * mass * this.radius * this.radius / 5.0;
    target.x = I;
    target.y = I;
    target.z = I;
    return target;
  }

  volume() {
    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;
  }

  updateBoundingSphereRadius() {
    this.boundingSphereRadius = this.radius;
  }

  calculateWorldAABB(pos, quat, min, max) {
    const r = this.radius;
    const axes = ['x', 'y', 'z'];

    for (let i = 0; i < axes.length; i++) {
      const ax = axes[i];
      min[ax] = pos[ax] - r;
      max[ax] = pos[ax] + r;
    }
  }

}
/**
 * @class Cylinder
 * @constructor
 * @extends ConvexPolyhedron
 * @author schteppe / https://github.com/schteppe
 * @param {Number} radiusTop
 * @param {Number} radiusBottom
 * @param {Number} height
 * @param {Number} numSegments The number of segments to build the cylinder out of
 */

class Cylinder extends ConvexPolyhedron {
  constructor(radiusTop, radiusBottom, height, numSegments) {
    const N = numSegments;
    const vertices = [];
    const axes = [];
    const faces = [];
    const bottomface = [];
    const topface = [];
    const cos = Math.cos;
    const sin = Math.sin; // First bottom point

    vertices.push(new Vec3(radiusBottom * cos(0), -height * 0.5, -radiusBottom * sin(0)));
    bottomface.push(0); // First top point

    vertices.push(new Vec3(radiusTop * cos(0), height * 0.5, -radiusTop * sin(0)));
    topface.push(1);

    for (let i = 0; i < N; i++) {
      const theta = 2 * Math.PI / N * (i + 1);
      const thetaN = 2 * Math.PI / N * (i + 0.5);

      if (i < N - 1) {
        // Bottom
        vertices.push(new Vec3(radiusBottom * cos(theta), -height * 0.5, -radiusBottom * sin(theta)));
        bottomface.push(2 * i + 2); // Top

        vertices.push(new Vec3(radiusTop * cos(theta), height * 0.5, -radiusTop * sin(theta)));
        topface.push(2 * i + 3); // Face

        faces.push([2 * i + 2, 2 * i + 3, 2 * i + 1, 2 * i]);
      } else {
        faces.push([0, 1, 2 * i + 1, 2 * i]); // Connect
      } // Axis: we can cut off half of them if we have even number of segments


      if (N % 2 === 1 || i < N / 2) {
        axes.push(new Vec3(cos(thetaN), 0, -sin(thetaN)));
      }
    }

    faces.push(topface);
    axes.push(new Vec3(0, 1, 0)); // Reorder bottom face

    const temp = [];

    for (let i = 0; i < bottomface.length; i++) {
      temp.push(bottomface[bottomface.length - i - 1]);
    }

    faces.push(temp);
    super({
      vertices,
      faces,
      axes
    });
  }

}
/**
 * Particle shape.
 * @class Particle
 * @constructor
 * @author schteppe
 * @extends Shape
 */


class Particle extends Shape {
  constructor() {
    super({
      type: Shape.types.PARTICLE
    });
  }
  /**
   * @method calculateLocalInertia
   * @param  {Number} mass
   * @param  {Vec3} target
   * @return {Vec3}
   */


  calculateLocalInertia(mass, target = new Vec3()) {
    target.set(0, 0, 0);
    return target;
  }

  volume() {
    return 0;
  }

  updateBoundingSphereRadius() {
    this.boundingSphereRadius = 0;
  }

  calculateWorldAABB(pos, quat, min, max) {
    // Get each axis max
    min.copy(pos);
    max.copy(pos);
  }

}
/**
 * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.
 * @class Plane
 * @constructor
 * @extends Shape
 * @author schteppe
 */


class Plane extends Shape {
  constructor() {
    super({
      type: Shape.types.PLANE
    }); // World oriented normal

    this.worldNormal = new Vec3();
    this.worldNormalNeedsUpdate = true;
    this.boundingSphereRadius = Number.MAX_VALUE;
  }

  computeWorldNormal(quat) {
    const n = this.worldNormal;
    n.set(0, 0, 1);
    quat.vmult(n, n);
    this.worldNormalNeedsUpdate = false;
  }

  calculateLocalInertia(mass, target = new Vec3()) {
    return target;
  }

  volume() {
    return (// The plane is infinite...
      Number.MAX_VALUE
    );
  }

  calculateWorldAABB(pos, quat, min, max) {
    // The plane AABB is infinite, except if the normal is pointing along any axis
    tempNormal.set(0, 0, 1); // Default plane normal is z

    quat.vmult(tempNormal, tempNormal);
    const maxVal = Number.MAX_VALUE;
    min.set(-maxVal, -maxVal, -maxVal);
    max.set(maxVal, maxVal, maxVal);

    if (tempNormal.x === 1) {
      max.x = pos.x;
    } else if (tempNormal.x === -1) {
      min.x = pos.x;
    }

    if (tempNormal.y === 1) {
      max.y = pos.y;
    } else if (tempNormal.y === -1) {
      min.y = pos.y;
    }

    if (tempNormal.z === 1) {
      max.z = pos.z;
    } else if (tempNormal.z === -1) {
      min.z = pos.z;
    }
  }

  updateBoundingSphereRadius() {
    this.boundingSphereRadius = Number.MAX_VALUE;
  }

}

const tempNormal = new Vec3();
/**
 * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.
 * @class Heightfield
 * @extends Shape
 * @constructor
 * @param {Array} data An array of Y values that will be used to construct the terrain.
 * @param {object} options
 * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.
 * @param {Number} [options.maxValue] Maximum value.
 * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.
 * @todo Should be possible to use along all axes, not just y
 * @todo should be possible to scale along all axes
 * @todo Refactor elementSize to elementSizeX and elementSizeY
 *
 * @example
 *     // Generate some height data (y-values).
 *     const data = [];
 *     for(let i = 0; i < 1000; i++){
 *         const y = 0.5 * Math.cos(0.2 * i);
 *         data.push(y);
 *     }
 *
 *     // Create the heightfield shape
 *     const heightfieldShape = new Heightfield(data, {
 *         elementSize: 1 // Distance between the data points in X and Y directions
 *     });
 *     const heightfieldBody = new Body();
 *     heightfieldBody.addShape(heightfieldShape);
 *     world.addBody(heightfieldBody);
 */

class Heightfield extends Shape {
  // An array of numbers, or height values, that are spread out along the x axis.
  // Max value of the data.
  // Max value of the data.
  // The width of each element. To do: elementSizeX and Y
  constructor(data, options = {}) {
    options = Utils.defaults(options, {
      maxValue: null,
      minValue: null,
      elementSize: 1
    });
    super({
      type: Shape.types.HEIGHTFIELD
    });
    this.data = data;
    this.maxValue = options.maxValue;
    this.minValue = options.minValue;
    this.elementSize = options.elementSize;

    if (options.minValue === null) {
      this.updateMinValue();
    }

    if (options.maxValue === null) {
      this.updateMaxValue();
    }

    this.cacheEnabled = true;
    this.pillarConvex = new ConvexPolyhedron();
    this.pillarOffset = new Vec3();
    this.updateBoundingSphereRadius(); // "i_j_isUpper" => { convex: ..., offset: ... }
    // for example:
    // _cachedPillars["0_2_1"]

    this._cachedPillars = {};
  }
  /**
   * Call whenever you change the data array.
   * @method update
   */


  update() {
    this._cachedPillars = {};
  }
  /**
   * Update the .minValue property
   * @method updateMinValue
   */


  updateMinValue() {
    const data = this.data;
    let minValue = data[0][0];

    for (let i = 0; i !== data.length; i++) {
      for (let j = 0; j !== data[i].length; j++) {
        const v = data[i][j];

        if (v < minValue) {
          minValue = v;
        }
      }
    }

    this.minValue = minValue;
  }
  /**
   * Update the .maxValue property
   * @method updateMaxValue
   */


  updateMaxValue() {
    const data = this.data;
    let maxValue = data[0][0];

    for (let i = 0; i !== data.length; i++) {
      for (let j = 0; j !== data[i].length; j++) {
        const v = data[i][j];

        if (v > maxValue) {
          maxValue = v;
        }
      }
    }

    this.maxValue = maxValue;
  }
  /**
   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.
   * @method setHeightValueAtIndex
   * @param {integer} xi
   * @param {integer} yi
   * @param {number} value
   */


  setHeightValueAtIndex(xi, yi, value) {
    const data = this.data;
    data[xi][yi] = value; // Invalidate cache

    this.clearCachedConvexTrianglePillar(xi, yi, false);

    if (xi > 0) {
      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);
      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);
    }

    if (yi > 0) {
      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);
      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);
    }

    if (yi > 0 && xi > 0) {
      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);
    }
  }
  /**
   * Get max/min in a rectangle in the matrix data
   * @method getRectMinMax
   * @param  {integer} iMinX
   * @param  {integer} iMinY
   * @param  {integer} iMaxX
   * @param  {integer} iMaxY
   * @param  {array} [result] An array to store the results in.
   * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.
   */


  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result = []) {
    // Get max and min of the data
    const data = this.data; // Set first value

    let max = this.minValue;

    for (let i = iMinX; i <= iMaxX; i++) {
      for (let j = iMinY; j <= iMaxY; j++) {
        const height = data[i][j];

        if (height > max) {
          max = height;
        }
      }
    }

    result[0] = this.minValue;
    result[1] = max;
  }
  /**
   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.
   * @method getIndexOfPosition
   * @param  {number} x
   * @param  {number} y
   * @param  {array} result Two-element array
   * @param  {boolean} clamp If the position should be clamped to the heightfield edge.
   * @return {boolean}
   */


  getIndexOfPosition(x, y, result, clamp) {
    // Get the index of the data points to test against
    const w = this.elementSize;
    const data = this.data;
    let xi = Math.floor(x / w);
    let yi = Math.floor(y / w);
    result[0] = xi;
    result[1] = yi;

    if (clamp) {
      // Clamp index to edges
      if (xi < 0) {
        xi = 0;
      }

      if (yi < 0) {
        yi = 0;
      }

      if (xi >= data.length - 1) {
        xi = data.length - 1;
      }

      if (yi >= data[0].length - 1) {
        yi = data[0].length - 1;
      }
    } // Bail out if we are out of the terrain


    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {
      return false;
    }

    return true;
  }

  getTriangleAt(x, y, edgeClamp, a, b, c) {
    const idx = getHeightAt_idx;
    this.getIndexOfPosition(x, y, idx, edgeClamp);
    let xi = idx[0];
    let yi = idx[1];
    const data = this.data;

    if (edgeClamp) {
      xi = Math.min(data.length - 2, Math.max(0, xi));
      yi = Math.min(data[0].length - 2, Math.max(0, yi));
    }

    const elementSize = this.elementSize;
    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;
    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;
    const upper = lowerDist2 > upperDist2;
    this.getTriangle(xi, yi, upper, a, b, c);
    return upper;
  }

  getNormalAt(x, y, edgeClamp, result) {
    const a = getNormalAt_a;
    const b = getNormalAt_b;
    const c = getNormalAt_c;
    const e0 = getNormalAt_e0;
    const e1 = getNormalAt_e1;
    this.getTriangleAt(x, y, edgeClamp, a, b, c);
    b.vsub(a, e0);
    c.vsub(a, e1);
    e0.cross(e1, result);
    result.normalize();
  }
  /**
   * Get an AABB of a square in the heightfield
   * @param  {number} xi
   * @param  {number} yi
   * @param  {AABB} result
   */


  getAabbAtIndex(xi, yi, {
    lowerBound,
    upperBound
  }) {
    const data = this.data;
    const elementSize = this.elementSize;
    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);
    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);
  }
  /**
   * Get the height in the heightfield at a given position
   * @param  {number} x
   * @param  {number} y
   * @param  {boolean} edgeClamp
   * @return {number}
   */


  getHeightAt(x, y, edgeClamp) {
    const data = this.data;
    const a = getHeightAt_a;
    const b = getHeightAt_b;
    const c = getHeightAt_c;
    const idx = getHeightAt_idx;
    this.getIndexOfPosition(x, y, idx, edgeClamp);
    let xi = idx[0];
    let yi = idx[1];

    if (edgeClamp) {
      xi = Math.min(data.length - 2, Math.max(0, xi));
      yi = Math.min(data[0].length - 2, Math.max(0, yi));
    }

    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);
    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);
    const w = getHeightAt_weights;

    if (upper) {
      // Top triangle verts
      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;
    } else {
      // Top triangle verts
      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;
    }
  }

  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {
    return xi + "_" + yi + "_" + (getUpperTriangle ? 1 : 0);
  }

  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {
    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
  }

  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {
    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {
      convex,
      offset
    };
  }

  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {
    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
  }
  /**
   * Get a triangle from the heightfield
   * @param  {number} xi
   * @param  {number} yi
   * @param  {boolean} upper
   * @param  {Vec3} a
   * @param  {Vec3} b
   * @param  {Vec3} c
   */


  getTriangle(xi, yi, upper, a, b, c) {
    const data = this.data;
    const elementSize = this.elementSize;

    if (upper) {
      // Top triangle verts
      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);
      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);
      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);
    } else {
      // Top triangle verts
      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);
      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);
      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);
    }
  }
  /**
   * Get a triangle in the terrain in the form of a triangular convex shape.
   * @method getConvexTrianglePillar
   * @param  {integer} i
   * @param  {integer} j
   * @param  {boolean} getUpperTriangle
   */


  getConvexTrianglePillar(xi, yi, getUpperTriangle) {
    let result = this.pillarConvex;
    let offsetResult = this.pillarOffset;

    if (this.cacheEnabled) {
      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);

      if (data) {
        this.pillarConvex = data.convex;
        this.pillarOffset = data.offset;
        return;
      }

      result = new ConvexPolyhedron();
      offsetResult = new Vec3();
      this.pillarConvex = result;
      this.pillarOffset = offsetResult;
    }

    const data = this.data;
    const elementSize = this.elementSize;
    const faces = result.faces; // Reuse verts if possible

    result.vertices.length = 6;

    for (let i = 0; i < 6; i++) {
      if (!result.vertices[i]) {
        result.vertices[i] = new Vec3();
      }
    } // Reuse faces if possible


    faces.length = 5;

    for (let i = 0; i < 5; i++) {
      if (!faces[i]) {
        faces[i] = [];
      }
    }

    const verts = result.vertices;
    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;

    if (!getUpperTriangle) {
      // Center of the triangle pillar - all polygons are given relative to this one
      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle
      (yi + 0.25) * elementSize, h // vertical center
      ); // Top triangle verts

      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);
      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);
      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts

      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -h - 1);
      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -h - 1);
      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -h - 1); // top triangle

      faces[0][0] = 0;
      faces[0][1] = 1;
      faces[0][2] = 2; // bottom triangle

      faces[1][0] = 5;
      faces[1][1] = 4;
      faces[1][2] = 3; // -x facing quad

      faces[2][0] = 0;
      faces[2][1] = 2;
      faces[2][2] = 5;
      faces[2][3] = 3; // -y facing quad

      faces[3][0] = 1;
      faces[3][1] = 0;
      faces[3][2] = 3;
      faces[3][3] = 4; // +xy facing quad

      faces[4][0] = 4;
      faces[4][1] = 5;
      faces[4][2] = 2;
      faces[4][3] = 1;
    } else {
      // Center of the triangle pillar - all polygons are given relative to this one
      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle
      (yi + 0.75) * elementSize, h // vertical center
      ); // Top triangle verts

      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);
      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);
      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts

      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -h - 1);
      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -h - 1);
      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -h - 1); // Top triangle

      faces[0][0] = 0;
      faces[0][1] = 1;
      faces[0][2] = 2; // bottom triangle

      faces[1][0] = 5;
      faces[1][1] = 4;
      faces[1][2] = 3; // +x facing quad

      faces[2][0] = 2;
      faces[2][1] = 5;
      faces[2][2] = 3;
      faces[2][3] = 0; // +y facing quad

      faces[3][0] = 3;
      faces[3][1] = 4;
      faces[3][2] = 1;
      faces[3][3] = 0; // -xy facing quad

      faces[4][0] = 1;
      faces[4][1] = 4;
      faces[4][2] = 5;
      faces[4][3] = 2;
    }

    result.computeNormals();
    result.computeEdges();
    result.updateBoundingSphereRadius();
    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);
  }

  calculateLocalInertia(mass, target = new Vec3()) {
    target.set(0, 0, 0);
    return target;
  }

  volume() {
    return (// The terrain is infinite
      Number.MAX_VALUE
    );
  }

  calculateWorldAABB(pos, quat, min, max) {
    // TODO: do it properly
    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
  }

  updateBoundingSphereRadius() {
    // Use the bounding box of the min/max values
    const data = this.data;
    const s = this.elementSize;
    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();
  }
  /**
   * Sets the height values from an image. Currently only supported in browser.
   * @method setHeightsFromImage
   * @param {Image} image
   * @param {Vec3} scale
   */


  setHeightsFromImage(image, scale) {
    const {
      x,
      z,
      y
    } = scale;
    const canvas = document.createElement('canvas');
    canvas.width = image.width;
    canvas.height = image.height;
    const context = canvas.getContext('2d');
    context.drawImage(image, 0, 0);
    const imageData = context.getImageData(0, 0, image.width, image.height);
    const matrix = this.data;
    matrix.length = 0;
    this.elementSize = Math.abs(x) / imageData.width;

    for (let i = 0; i < imageData.height; i++) {
      const row = [];

      for (let j = 0; j < imageData.width; j++) {
        const a = imageData.data[(i * imageData.height + j) * 4];
        const b = imageData.data[(i * imageData.height + j) * 4 + 1];
        const c = imageData.data[(i * imageData.height + j) * 4 + 2];
        const height = (a + b + c) / 4 / 255 * z;

        if (x < 0) {
          row.push(height);
        } else {
          row.unshift(height);
        }
      }

      if (y < 0) {
        matrix.unshift(row);
      } else {
        matrix.push(row);
      }
    }

    this.updateMaxValue();
    this.updateMinValue();
    this.update();
  }

}

const getHeightAt_idx = [];
const getHeightAt_weights = new Vec3();
const getHeightAt_a = new Vec3();
const getHeightAt_b = new Vec3();
const getHeightAt_c = new Vec3();
const getNormalAt_a = new Vec3();
const getNormalAt_b = new Vec3();
const getNormalAt_c = new Vec3();
const getNormalAt_e0 = new Vec3();
const getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system

function barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {
  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));
  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));
  result.z = 1 - result.x - result.y;
}
/**
 * @class OctreeNode
 * @constructor
 * @param {object} [options]
 * @param {Octree} [options.root]
 * @param {AABB} [options.aabb]
 */


class OctreeNode {
  // The root node
  // Boundary of this node
  // Contained data at the current node level
  // Children to this node
  constructor(options = {}) {
    this.root = options.root || null;
    this.aabb = options.aabb ? options.aabb.clone() : new AABB();
    this.data = [];
    this.children = [];
  }

  reset() {
    this.children.length = this.data.length = 0;
  }
  /**
   * Insert data into this node
   * @method insert
   * @param  {AABB} aabb
   * @param  {object} elementData
   * @return {boolean} True if successful, otherwise false
   */


  insert(aabb, elementData, level = 0) {
    const nodeData = this.data; // Ignore objects that do not belong in this node

    if (!this.aabb.contains(aabb)) {
      return false; // object cannot be added
    }

    const children = this.children;
    const maxDepth = this.maxDepth || this.root.maxDepth;

    if (level < maxDepth) {
      // Subdivide if there are no children yet
      let subdivided = false;

      if (!children.length) {
        this.subdivide();
        subdivided = true;
      } // add to whichever node will accept it


      for (let i = 0; i !== 8; i++) {
        if (children[i].insert(aabb, elementData, level + 1)) {
          return true;
        }
      }

      if (subdivided) {
        // No children accepted! Might as well just remove em since they contain none
        children.length = 0;
      }
    } // Too deep, or children didnt want it. add it in current node


    nodeData.push(elementData);
    return true;
  }
  /**
   * Create 8 equally sized children nodes and put them in the .children array.
   * @method subdivide
   */


  subdivide() {
    const aabb = this.aabb;
    const l = aabb.lowerBound;
    const u = aabb.upperBound;
    const children = this.children;
    children.push(new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(0, 0, 0)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(1, 0, 0)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(1, 1, 0)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(1, 1, 1)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(0, 1, 1)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(0, 0, 1)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(1, 0, 1)
      })
    }), new OctreeNode({
      aabb: new AABB({
        lowerBound: new Vec3(0, 1, 0)
      })
    }));
    u.vsub(l, halfDiagonal);
    halfDiagonal.scale(0.5, halfDiagonal);
    const root = this.root || this;

    for (let i = 0; i !== 8; i++) {
      const child = children[i]; // Set current node as root

      child.root = root; // Compute bounds

      const lowerBound = child.aabb.lowerBound;
      lowerBound.x *= halfDiagonal.x;
      lowerBound.y *= halfDiagonal.y;
      lowerBound.z *= halfDiagonal.z;
      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal

      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);
    }
  }
  /**
   * Get all data, potentially within an AABB
   * @method aabbQuery
   * @param  {AABB} aabb
   * @param  {array} result
   * @return {array} The "result" object
   */


  aabbQuery(aabb, result) {
    const nodeData = this.data; // abort if the range does not intersect this node
    // if (!this.aabb.overlaps(aabb)){
    //     return result;
    // }
    // Add objects at this level
    // Array.prototype.push.apply(result, nodeData);
    // Add child data
    // @todo unwrap recursion into a queue / loop, that's faster in JS

    const children = this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {
    //     children[i].aabbQuery(aabb, result);
    // }

    const queue = [this];

    while (queue.length) {
      const node = queue.pop();

      if (node.aabb.overlaps(aabb)) {
        Array.prototype.push.apply(result, node.data);
      }

      Array.prototype.push.apply(queue, node.children);
    }

    return result;
  }
  /**
   * Get all data, potentially intersected by a ray.
   * @method rayQuery
   * @param  {Ray} ray
   * @param  {Transform} treeTransform
   * @param  {array} result
   * @return {array} The "result" object
   */


  rayQuery(ray, treeTransform, result) {
    // Use aabb query for now.
    // @todo implement real ray query which needs less lookups
    ray.getAABB(tmpAABB$1);
    tmpAABB$1.toLocalFrame(treeTransform, tmpAABB$1);
    this.aabbQuery(tmpAABB$1, result);
    return result;
  }
  /**
   * @method removeEmptyNodes
   */


  removeEmptyNodes() {
    for (let i = this.children.length - 1; i >= 0; i--) {
      this.children[i].removeEmptyNodes();

      if (!this.children[i].children.length && !this.children[i].data.length) {
        this.children.splice(i, 1);
      }
    }
  }

}
/**
 * @class Octree
 * @param {AABB} aabb The total AABB of the tree
 * @param {object} [options]
 * @param {number} [options.maxDepth=8] Maximum subdivision depth
 * @extends OctreeNode
 */


class Octree extends OctreeNode {
  // Maximum subdivision depth
  constructor(aabb, options = {}) {
    super({
      root: null,
      aabb
    });
    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;
  }

}

const halfDiagonal = new Vec3();
const tmpAABB$1 = new AABB();
/**
 * @class Trimesh
 * @constructor
 * @param {array} vertices
 * @param {array} indices
 * @extends Shape
 * @example
 *     // How to make a mesh with a single triangle
 *     const vertices = [
 *         0, 0, 0, // vertex 0
 *         1, 0, 0, // vertex 1
 *         0, 1, 0  // vertex 2
 *     ];
 *     const indices = [
 *         0, 1, 2  // triangle 0
 *     ];
 *     const trimeshShape = new Trimesh(vertices, indices);
 */

class Trimesh extends Shape {
  // Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.
  // The normals data.
  // The local AABB of the mesh.
  // References to vertex pairs, making up all unique edges in the trimesh.
  // Local scaling of the mesh. Use .setScale() to set it.
  // The indexed triangles. Use .updateTree() to update it.
  constructor(vertices, indices) {
    super({
      type: Shape.types.TRIMESH
    });
    this.vertices = new Float32Array(vertices);
    this.indices = new Int16Array(indices);
    this.normals = new Float32Array(indices.length);
    this.aabb = new AABB();
    this.edges = null;
    this.scale = new Vec3(1, 1, 1);
    this.tree = new Octree();
    this.updateEdges();
    this.updateNormals();
    this.updateAABB();
    this.updateBoundingSphereRadius();
    this.updateTree();
  }
  /**
   * @method updateTree
   */


  updateTree() {
    const tree = this.tree;
    tree.reset();
    tree.aabb.copy(this.aabb);
    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled

    tree.aabb.lowerBound.x *= 1 / scale.x;
    tree.aabb.lowerBound.y *= 1 / scale.y;
    tree.aabb.lowerBound.z *= 1 / scale.z;
    tree.aabb.upperBound.x *= 1 / scale.x;
    tree.aabb.upperBound.y *= 1 / scale.y;
    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles

    const triangleAABB = new AABB();
    const a = new Vec3();
    const b = new Vec3();
    const c = new Vec3();
    const points = [a, b, c];

    for (let i = 0; i < this.indices.length / 3; i++) {
      //this.getTriangleVertices(i, a, b, c);
      // Get unscaled triangle verts
      const i3 = i * 3;

      this._getUnscaledVertex(this.indices[i3], a);

      this._getUnscaledVertex(this.indices[i3 + 1], b);

      this._getUnscaledVertex(this.indices[i3 + 2], c);

      triangleAABB.setFromPoints(points);
      tree.insert(triangleAABB, i);
    }

    tree.removeEmptyNodes();
  }
  /**
   * Get triangles in a local AABB from the trimesh.
   * @method getTrianglesInAABB
   * @param  {AABB} aabb
   * @param  {array} result An array of integers, referencing the queried triangles.
   */


  getTrianglesInAABB(aabb, result) {
    unscaledAABB.copy(aabb); // Scale it to local

    const scale = this.scale;
    const isx = scale.x;
    const isy = scale.y;
    const isz = scale.z;
    const l = unscaledAABB.lowerBound;
    const u = unscaledAABB.upperBound;
    l.x /= isx;
    l.y /= isy;
    l.z /= isz;
    u.x /= isx;
    u.y /= isy;
    u.z /= isz;
    return this.tree.aabbQuery(unscaledAABB, result);
  }
  /**
   * @method setScale
   * @param {Vec3} scale
   */


  setScale(scale) {
    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;
    const isUniform = scale.x === scale.y && scale.y === scale.z;

    if (!(wasUniform && isUniform)) {
      // Non-uniform scaling. Need to update normals.
      this.updateNormals();
    }

    this.scale.copy(scale);
    this.updateAABB();
    this.updateBoundingSphereRadius();
  }
  /**
   * Compute the normals of the faces. Will save in the .normals array.
   * @method updateNormals
   */


  updateNormals() {
    const n = computeNormals_n; // Generate normals

    const normals = this.normals;

    for (let i = 0; i < this.indices.length / 3; i++) {
      const i3 = i * 3;
      const a = this.indices[i3];
      const b = this.indices[i3 + 1];
      const c = this.indices[i3 + 2];
      this.getVertex(a, va);
      this.getVertex(b, vb);
      this.getVertex(c, vc);
      Trimesh.computeNormal(vb, va, vc, n);
      normals[i3] = n.x;
      normals[i3 + 1] = n.y;
      normals[i3 + 2] = n.z;
    }
  }
  /**
   * Update the .edges property
   * @method updateEdges
   */


  updateEdges() {
    const edges = {};

    const add = (a, b) => {
      const key = a < b ? a + "_" + b : b + "_" + a;
      edges[key] = true;
    };

    for (let i = 0; i < this.indices.length / 3; i++) {
      const i3 = i * 3;
      const a = this.indices[i3];
      const b = this.indices[i3 + 1];
      const c = this.indices[i3 + 2];
      add(a, b);
      add(b, c);
      add(c, a);
    }

    const keys = Object.keys(edges);
    this.edges = new Int16Array(keys.length * 2);

    for (let i = 0; i < keys.length; i++) {
      const indices = keys[i].split('_');
      this.edges[2 * i] = parseInt(indices[0], 10);
      this.edges[2 * i + 1] = parseInt(indices[1], 10);
    }
  }
  /**
   * Get an edge vertex
   * @method getEdgeVertex
   * @param  {number} edgeIndex
   * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.
   * @param  {Vec3} vertexStore Where to store the result
   */


  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {
    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];
    this.getVertex(vertexIndex, vertexStore);
  }
  /**
   * Get a vector along an edge.
   * @method getEdgeVector
   * @param  {number} edgeIndex
   * @param  {Vec3} vectorStore
   */


  getEdgeVector(edgeIndex, vectorStore) {
    const va = getEdgeVector_va;
    const vb = getEdgeVector_vb;
    this.getEdgeVertex(edgeIndex, 0, va);
    this.getEdgeVertex(edgeIndex, 1, vb);
    vb.vsub(va, vectorStore);
  }
  /**
   * Get vertex i.
   * @method getVertex
   * @param  {number} i
   * @param  {Vec3} out
   * @return {Vec3} The "out" vector object
   */


  getVertex(i, out) {
    const scale = this.scale;

    this._getUnscaledVertex(i, out);

    out.x *= scale.x;
    out.y *= scale.y;
    out.z *= scale.z;
    return out;
  }
  /**
   * Get raw vertex i
   * @private
   * @method _getUnscaledVertex
   * @param  {number} i
   * @param  {Vec3} out
   * @return {Vec3} The "out" vector object
   */


  _getUnscaledVertex(i, out) {
    const i3 = i * 3;
    const vertices = this.vertices;
    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);
  }
  /**
   * Get a vertex from the trimesh,transformed by the given position and quaternion.
   * @method getWorldVertex
   * @param  {number} i
   * @param  {Vec3} pos
   * @param  {Quaternion} quat
   * @param  {Vec3} out
   * @return {Vec3} The "out" vector object
   */


  getWorldVertex(i, pos, quat, out) {
    this.getVertex(i, out);
    Transform.pointToWorldFrame(pos, quat, out, out);
    return out;
  }
  /**
   * Get the three vertices for triangle i.
   * @method getTriangleVertices
   * @param  {number} i
   * @param  {Vec3} a
   * @param  {Vec3} b
   * @param  {Vec3} c
   */


  getTriangleVertices(i, a, b, c) {
    const i3 = i * 3;
    this.getVertex(this.indices[i3], a);
    this.getVertex(this.indices[i3 + 1], b);
    this.getVertex(this.indices[i3 + 2], c);
  }
  /**
   * Compute the normal of triangle i.
   * @method getNormal
   * @param  {Number} i
   * @param  {Vec3} target
   * @return {Vec3} The "target" vector object
   */


  getNormal(i, target) {
    const i3 = i * 3;
    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);
  }
  /**
   * @method calculateLocalInertia
   * @param  {Number} mass
   * @param  {Vec3} target
   * @return {Vec3} The "target" vector object
   */


  calculateLocalInertia(mass, target) {
    // Approximate with box inertia
    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
    this.computeLocalAABB(cli_aabb);
    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;
    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;
    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;
    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));
  }
  /**
   * Compute the local AABB for the trimesh
   * @method computeLocalAABB
   * @param  {AABB} aabb
   */


  computeLocalAABB(aabb) {
    const l = aabb.lowerBound;
    const u = aabb.upperBound;
    const n = this.vertices.length;
    const vertices = this.vertices;
    const v = computeLocalAABB_worldVert;
    this.getVertex(0, v);
    l.copy(v);
    u.copy(v);

    for (let i = 0; i !== n; i++) {
      this.getVertex(i, v);

      if (v.x < l.x) {
        l.x = v.x;
      } else if (v.x > u.x) {
        u.x = v.x;
      }

      if (v.y < l.y) {
        l.y = v.y;
      } else if (v.y > u.y) {
        u.y = v.y;
      }

      if (v.z < l.z) {
        l.z = v.z;
      } else if (v.z > u.z) {
        u.z = v.z;
      }
    }
  }
  /**
   * Update the .aabb property
   * @method updateAABB
   */


  updateAABB() {
    this.computeLocalAABB(this.aabb);
  }
  /**
   * Will update the .boundingSphereRadius property
   * @method updateBoundingSphereRadius
   */


  updateBoundingSphereRadius() {
    // Assume points are distributed with local (0,0,0) as center
    let max2 = 0;
    const vertices = this.vertices;
    const v = new Vec3();

    for (let i = 0, N = vertices.length / 3; i !== N; i++) {
      this.getVertex(i, v);
      const norm2 = v.lengthSquared();

      if (norm2 > max2) {
        max2 = norm2;
      }
    }

    this.boundingSphereRadius = Math.sqrt(max2);
  }
  /**
   * @method calculateWorldAABB
   * @param {Vec3}        pos
   * @param {Quaternion}  quat
   * @param {Vec3}        min
   * @param {Vec3}        max
   */


  calculateWorldAABB(pos, quat, min, max) {
    /*
        const n = this.vertices.length / 3,
            verts = this.vertices;
        const minx,miny,minz,maxx,maxy,maxz;
         const v = tempWorldVertex;
        for(let i=0; i<n; i++){
            this.getVertex(i, v);
            quat.vmult(v, v);
            pos.vadd(v, v);
            if (v.x < minx || minx===undefined){
                minx = v.x;
            } else if(v.x > maxx || maxx===undefined){
                maxx = v.x;
            }
             if (v.y < miny || miny===undefined){
                miny = v.y;
            } else if(v.y > maxy || maxy===undefined){
                maxy = v.y;
            }
             if (v.z < minz || minz===undefined){
                minz = v.z;
            } else if(v.z > maxz || maxz===undefined){
                maxz = v.z;
            }
        }
        min.set(minx,miny,minz);
        max.set(maxx,maxy,maxz);
        */
    // Faster approximation using local AABB
    const frame = calculateWorldAABB_frame;
    const result = calculateWorldAABB_aabb;
    frame.position = pos;
    frame.quaternion = quat;
    this.aabb.toWorldFrame(frame, result);
    min.copy(result.lowerBound);
    max.copy(result.upperBound);
  }
  /**
   * Get approximate volume
   * @method volume
   * @return {Number}
   */


  volume() {
    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
  }

}

const computeNormals_n = new Vec3();
const unscaledAABB = new AABB();
const getEdgeVector_va = new Vec3();
const getEdgeVector_vb = new Vec3();
/**
 * Get face normal given 3 vertices
 * @static
 * @method computeNormal
 * @param {Vec3} va
 * @param {Vec3} vb
 * @param {Vec3} vc
 * @param {Vec3} target
 */

const cb = new Vec3();
const ab = new Vec3();

Trimesh.computeNormal = (va, vb, vc, target) => {
  vb.vsub(va, ab);
  vc.vsub(vb, cb);
  cb.cross(ab, target);

  if (!target.isZero()) {
    target.normalize();
  }
};

const va = new Vec3();
const vb = new Vec3();
const vc = new Vec3();
const cli_aabb = new AABB();
const computeLocalAABB_worldVert = new Vec3();
const calculateWorldAABB_frame = new Transform();
const calculateWorldAABB_aabb = new AABB();
/**
 * Create a Trimesh instance, shaped as a torus.
 * @static
 * @method createTorus
 * @param  {number} [radius=1]
 * @param  {number} [tube=0.5]
 * @param  {number} [radialSegments=8]
 * @param  {number} [tubularSegments=6]
 * @param  {number} [arc=6.283185307179586]
 * @return {Trimesh} A torus
 */

Trimesh.createTorus = (radius = 1, tube = 0.5, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) => {
  const vertices = [];
  const indices = [];

  for (let j = 0; j <= radialSegments; j++) {
    for (let i = 0; i <= tubularSegments; i++) {
      const u = i / tubularSegments * arc;
      const v = j / radialSegments * Math.PI * 2;
      const x = (radius + tube * Math.cos(v)) * Math.cos(u);
      const y = (radius + tube * Math.cos(v)) * Math.sin(u);
      const z = tube * Math.sin(v);
      vertices.push(x, y, z);
    }
  }

  for (let j = 1; j <= radialSegments; j++) {
    for (let i = 1; i <= tubularSegments; i++) {
      const a = (tubularSegments + 1) * j + i - 1;
      const b = (tubularSegments + 1) * (j - 1) + i - 1;
      const c = (tubularSegments + 1) * (j - 1) + i;
      const d = (tubularSegments + 1) * j + i;
      indices.push(a, b, d);
      indices.push(b, c, d);
    }
  }

  return new Trimesh(vertices, indices);
};
/**
 * Constraint equation solver base class.
 * @class Solver
 * @constructor
 * @author schteppe / https://github.com/schteppe
 */


class Solver {
  // All equations to be solved
  constructor() {
    this.equations = [];
  }
  /**
   * Should be implemented in subclasses!
   * @method solve
   * @param  {Number} dt
   * @param  {World} world
   * @return {Number} number of iterations performed
   */


  solve(dt, world) {
    return (// Should return the number of iterations done!
      0
    );
  }
  /**
   * Add an equation
   * @method addEquation
   * @param {Equation} eq
   */


  addEquation(eq) {
    if (eq.enabled) {
      this.equations.push(eq);
    }
  }
  /**
   * Remove an equation
   * @method removeEquation
   * @param {Equation} eq
   */


  removeEquation(eq) {
    const eqs = this.equations;
    const i = eqs.indexOf(eq);

    if (i !== -1) {
      eqs.splice(i, 1);
    }
  }
  /**
   * Add all equations
   * @method removeAllEquations
   */


  removeAllEquations() {
    this.equations.length = 0;
  }

}
/**
 * Constraint equation Gauss-Seidel solver.
 * @class GSSolver
 * @constructor
 * @todo The spook parameters should be specified for each constraint, not globally.
 * @author schteppe / https://github.com/schteppe
 * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf
 * @extends Solver
 */


class GSSolver extends Solver {
  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
  // When tolerance is reached, the system is assumed to be converged.
  constructor() {
    super();
    this.iterations = 10;
    this.tolerance = 1e-7;
  }
  /**
   * Solve
   * @method solve
   * @param  {Number} dt
   * @param  {World} world
   * @return {Number} number of iterations performed
   */


  solve(dt, world) {
    let iter = 0;
    const maxIter = this.iterations;
    const tolSquared = this.tolerance * this.tolerance;
    const equations = this.equations;
    const Neq = equations.length;
    const bodies = world.bodies;
    const Nbodies = bodies.length;
    const h = dt;
    let B;
    let invC;
    let deltalambda;
    let deltalambdaTot;
    let GWlambda;
    let lambdaj; // Update solve mass

    if (Neq !== 0) {
      for (let i = 0; i !== Nbodies; i++) {
        bodies[i].updateSolveMassProperties();
      }
    } // Things that does not change during iteration can be computed once


    const invCs = GSSolver_solve_invCs;
    const Bs = GSSolver_solve_Bs;
    const lambda = GSSolver_solve_lambda;
    invCs.length = Neq;
    Bs.length = Neq;
    lambda.length = Neq;

    for (let i = 0; i !== Neq; i++) {
      const c = equations[i];
      lambda[i] = 0.0;
      Bs[i] = c.computeB(h);
      invCs[i] = 1.0 / c.computeC();
    }

    if (Neq !== 0) {
      // Reset vlambda
      for (let i = 0; i !== Nbodies; i++) {
        const b = bodies[i];
        const vlambda = b.vlambda;
        const wlambda = b.wlambda;
        vlambda.set(0, 0, 0);
        wlambda.set(0, 0, 0);
      } // Iterate over equations


      for (iter = 0; iter !== maxIter; iter++) {
        // Accumulate the total error for each iteration.
        deltalambdaTot = 0.0;

        for (let j = 0; j !== Neq; j++) {
          const c = equations[j]; // Compute iteration

          B = Bs[j];
          invC = invCs[j];
          lambdaj = lambda[j];
          GWlambda = c.computeGWlambda();
          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval

          if (lambdaj + deltalambda < c.minForce) {
            deltalambda = c.minForce - lambdaj;
          } else if (lambdaj + deltalambda > c.maxForce) {
            deltalambda = c.maxForce - lambdaj;
          }

          lambda[j] += deltalambda;
          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)

          c.addToWlambda(deltalambda);
        } // If the total error is small enough - stop iterate


        if (deltalambdaTot * deltalambdaTot < tolSquared) {
          break;
        }
      } // Add result to velocity


      for (let i = 0; i !== Nbodies; i++) {
        const b = bodies[i];
        const v = b.velocity;
        const w = b.angularVelocity;
        b.vlambda.vmul(b.linearFactor, b.vlambda);
        v.vadd(b.vlambda, v);
        b.wlambda.vmul(b.angularFactor, b.wlambda);
        w.vadd(b.wlambda, w);
      } // Set the .multiplier property of each equation


      let l = equations.length;
      const invDt = 1 / h;

      while (l--) {
        equations[l].multiplier = lambda[l] * invDt;
      }
    }

    return iter;
  }

}

const GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.

const GSSolver_solve_invCs = [];
const GSSolver_solve_Bs = [];
/**
 * For pooling objects that can be reused.
 * @class Pool
 * @constructor
 */


class Pool {
  constructor() {
    this.objects = [];
    this.type = Object;
  }
  /**
   * Release an object after use
   * @method release
   * @param {Object} obj
   */


  release(...args) {
    const Nargs = args.length;

    for (let i = 0; i !== Nargs; i++) {
      this.objects.push(args[i]);
    }

    return this;
  }
  /**
   * Get an object
   * @method get
   * @return {mixed}
   */


  get() {
    if (this.objects.length === 0) {
      return this.constructObject();
    } else {
      return this.objects.pop();
    }
  }
  /**
   * Construct an object. Should be implemented in each subclass.
   * @method constructObject
   * @return {mixed}
   */


  constructObject() {
    throw new Error('constructObject() not implemented in this Pool subclass yet!');
  }
  /**
   * @method resize
   * @param {number} size
   * @return {Pool} Self, for chaining
   */


  resize(size) {
    const objects = this.objects;

    while (objects.length > size) {
      objects.pop();
    }

    while (objects.length < size) {
      objects.push(this.constructObject());
    }

    return this;
  }

}
/**
 * @class Vec3Pool
 * @constructor
 * @extends Pool
 */


class Vec3Pool extends Pool {
  constructor() {
    super();
    this.type = Vec3;
  }
  /**
   * Construct a vector
   * @method constructObject
   * @return {Vec3}
   */


  constructObject() {
    return new Vec3();
  }

}

const COLLISION_TYPES = {
  sphereSphere: Shape.types.SPHERE,
  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,
  boxBox: Shape.types.BOX | Shape.types.BOX,
  sphereBox: Shape.types.SPHERE | Shape.types.BOX,
  planeBox: Shape.types.PLANE | Shape.types.BOX,
  convexConvex: Shape.types.CONVEXPOLYHEDRON,
  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,
  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,
  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,
  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,
  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,
  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,
  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,
  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,
  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,
  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,
  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,
  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH
};
/**
 * Helper class for the World. Generates ContactEquations.
 * @class Narrowphase
 * @constructor
 * @todo Sphere-ConvexPolyhedron contacts
 * @todo Contact reduction
 * @todo should move methods to prototype
 */

class Narrowphase {
  // Internal storage of pooled contact points.
  // Pooled vectors.
  constructor(world) {
    this.contactPointPool = [];
    this.frictionEquationPool = [];
    this.result = [];
    this.frictionResult = [];
    this.v3pool = new Vec3Pool();
    this.world = world;
    this.currentContactMaterial = world.defaultContactMaterial;
    this.enableFrictionReduction = false;
  }
  /**
   * Make a contact object, by using the internal pool or creating a new one.
   * @method createContactEquation
   * @param {Body} bi
   * @param {Body} bj
   * @param {Shape} si
   * @param {Shape} sj
   * @param {Shape} overrideShapeA
   * @param {Shape} overrideShapeB
   * @return {ContactEquation}
   */


  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {
    let c;

    if (this.contactPointPool.length) {
      c = this.contactPointPool.pop();
      c.bi = bi;
      c.bj = bj;
    } else {
      c = new ContactEquation(bi, bj);
    }

    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;
    const cm = this.currentContactMaterial;
    c.restitution = cm.restitution;
    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);
    const matA = si.material || bi.material;
    const matB = sj.material || bj.material;

    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {
      c.restitution = matA.restitution * matB.restitution;
    }

    c.si = overrideShapeA || si;
    c.sj = overrideShapeB || sj;
    return c;
  }

  createFrictionEquationsFromContact(contactEquation, outArray) {
    const bodyA = contactEquation.bi;
    const bodyB = contactEquation.bj;
    const shapeA = contactEquation.si;
    const shapeB = contactEquation.sj;
    const world = this.world;
    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them

    let friction = cm.friction;
    const matA = shapeA.material || bodyA.material;
    const matB = shapeB.material || bodyB.material;

    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {
      friction = matA.friction * matB.friction;
    }

    if (friction > 0) {
      // Create 2 tangent equations
      const mug = friction * world.gravity.length();
      let reducedMass = bodyA.invMass + bodyB.invMass;

      if (reducedMass > 0) {
        reducedMass = 1 / reducedMass;
      }

      const pool = this.frictionEquationPool;
      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
      c1.bi = c2.bi = bodyA;
      c1.bj = c2.bj = bodyB;
      c1.minForce = c2.minForce = -mug * reducedMass;
      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors

      c1.ri.copy(contactEquation.ri);
      c1.rj.copy(contactEquation.rj);
      c2.ri.copy(contactEquation.ri);
      c2.rj.copy(contactEquation.rj); // Construct tangents

      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params

      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
      c1.enabled = c2.enabled = contactEquation.enabled;
      outArray.push(c1, c2);
      return true;
    }

    return false;
  } // Take the average N latest contact point on the plane.


  createFrictionFromAverage(numContacts) {
    // The last contactEquation
    let c = this.result[this.result.length - 1]; // Create the result: two "average" friction equations

    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {
      return;
    }

    const f1 = this.frictionResult[this.frictionResult.length - 2];
    const f2 = this.frictionResult[this.frictionResult.length - 1];
    averageNormal.setZero();
    averageContactPointA.setZero();
    averageContactPointB.setZero();
    const bodyA = c.bi;
    const bodyB = c.bj;

    for (let i = 0; i !== numContacts; i++) {
      c = this.result[this.result.length - 1 - i];

      if (c.bi !== bodyA) {
        averageNormal.vadd(c.ni, averageNormal);
        averageContactPointA.vadd(c.ri, averageContactPointA);
        averageContactPointB.vadd(c.rj, averageContactPointB);
      } else {
        averageNormal.vsub(c.ni, averageNormal);
        averageContactPointA.vadd(c.rj, averageContactPointA);
        averageContactPointB.vadd(c.ri, averageContactPointB);
      }
    }

    const invNumContacts = 1 / numContacts;
    averageContactPointA.scale(invNumContacts, f1.ri);
    averageContactPointB.scale(invNumContacts, f1.rj);
    f2.ri.copy(f1.ri); // Should be the same

    f2.rj.copy(f1.rj);
    averageNormal.normalize();
    averageNormal.tangents(f1.t, f2.t); // return eq;
  }
  /**
   * Generate all contacts between a list of body pairs
   * @method getContacts
   * @param {array} p1 Array of body indices
   * @param {array} p2 Array of body indices
   * @param {World} world
   * @param {array} result Array to store generated contacts
   * @param {array} oldcontacts Optional. Array of reusable contact objects
   */


  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {
    // Save old contact objects
    this.contactPointPool = oldcontacts;
    this.frictionEquationPool = frictionPool;
    this.result = result;
    this.frictionResult = frictionResult;
    const qi = tmpQuat1;
    const qj = tmpQuat2;
    const xi = tmpVec1$2;
    const xj = tmpVec2$2;

    for (let k = 0, N = p1.length; k !== N; k++) {
      // Get current collision bodies
      const bi = p1[k];
      const bj = p2[k]; // Get contact material

      let bodyContactMaterial = null;

      if (bi.material && bj.material) {
        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;
      }

      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;

      for (let i = 0; i < bi.shapes.length; i++) {
        bi.quaternion.mult(bi.shapeOrientations[i], qi);
        bi.quaternion.vmult(bi.shapeOffsets[i], xi);
        xi.vadd(bi.position, xi);
        const si = bi.shapes[i];

        for (let j = 0; j < bj.shapes.length; j++) {
          // Compute world transform of shapes
          bj.quaternion.mult(bj.shapeOrientations[j], qj);
          bj.quaternion.vmult(bj.shapeOffsets[j], xj);
          xj.vadd(bj.position, xj);
          const sj = bj.shapes[j];

          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {
            continue;
          }

          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
            continue;
          } // Get collision material


          let shapeContactMaterial = null;

          if (si.material && sj.material) {
            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;
          }

          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts

          const resolverIndex = si.type | sj.type;
          const resolver = this[resolverIndex];

          if (resolver) {
            let retval = false; // TO DO: investigate why sphereParticle and convexParticle
            // resolvers expect si and sj shapes to be in reverse order
            // (i.e. larger integer value type first instead of smaller first)

            if (si.type < sj.type) {
              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
            } else {
              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);
            }

            if (retval && justTest) {
              // Register overlap
              world.shapeOverlapKeeper.set(si.id, sj.id);
              world.bodyOverlapKeeper.set(bi.id, bj.id);
            }
          }
        }
      }
    }
  }

  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    if (justTest) {
      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;
    } // We will have only one contact in this case


    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal

    xj.vsub(xi, r.ni);
    r.ni.normalize(); // Contact point locations

    r.ri.copy(r.ni);
    r.rj.copy(r.ni);
    r.ri.scale(si.radius, r.ri);
    r.rj.scale(-sj.radius, r.rj);
    r.ri.vadd(xi, r.ri);
    r.ri.vsub(bi.position, r.ri);
    r.rj.vadd(xj, r.rj);
    r.rj.vsub(bj.position, r.rj);
    this.result.push(r);
    this.createFrictionEquationsFromContact(r, this.frictionResult);
  }

  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    // We will have one contact in this case
    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal

    r.ni.set(0, 0, 1);
    qj.vmult(r.ni, r.ni);
    r.ni.negate(r.ni); // body i is the sphere, flip normal

    r.ni.normalize(); // Needed?
    // Vector from sphere center to contact point

    r.ni.scale(si.radius, r.ri); // Project down sphere on plane

    xi.vsub(xj, point_on_plane_to_sphere);
    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);
    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane

    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {
      if (justTest) {
        return true;
      } // Make it relative to the body


      const ri = r.ri;
      const rj = r.rj;
      ri.vadd(xi, ri);
      ri.vsub(bi.position, ri);
      rj.vadd(xj, rj);
      rj.vsub(bj.position, rj);
      this.result.push(r);
      this.createFrictionEquationsFromContact(r, this.frictionResult);
    }
  }

  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    si.convexPolyhedronRepresentation.material = si.material;
    sj.convexPolyhedronRepresentation.material = sj.material;
    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);
  }

  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    const v3pool = this.v3pool; // we refer to the box as body j

    const sides = sphereBox_sides;
    xi.vsub(xj, box_to_sphere);
    sj.getSideNormals(sides, qj);
    const R = si.radius;
    let found = false; // Store the resulting side penetration info

    const side_ns = sphereBox_side_ns;
    const side_ns1 = sphereBox_side_ns1;
    const side_ns2 = sphereBox_side_ns2;
    let side_h = null;
    let side_penetrations = 0;
    let side_dot1 = 0;
    let side_dot2 = 0;
    let side_distance = null;

    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {
      // Get the plane side normal (ns)
      const ns = sphereBox_ns;
      ns.copy(sides[idx]);
      const h = ns.length();
      ns.normalize(); // The normal/distance dot product tells which side of the plane we are

      const dot = box_to_sphere.dot(ns);

      if (dot < h + R && dot > 0) {
        // Intersects plane. Now check the other two dimensions
        const ns1 = sphereBox_ns1;
        const ns2 = sphereBox_ns2;
        ns1.copy(sides[(idx + 1) % 3]);
        ns2.copy(sides[(idx + 2) % 3]);
        const h1 = ns1.length();
        const h2 = ns2.length();
        ns1.normalize();
        ns2.normalize();
        const dot1 = box_to_sphere.dot(ns1);
        const dot2 = box_to_sphere.dot(ns2);

        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {
          const dist = Math.abs(dot - h - R);

          if (side_distance === null || dist < side_distance) {
            side_distance = dist;
            side_dot1 = dot1;
            side_dot2 = dot2;
            side_h = h;
            side_ns.copy(ns);
            side_ns1.copy(ns1);
            side_ns2.copy(ns2);
            side_penetrations++;

            if (justTest) {
              return true;
            }
          }
        }
      }
    }

    if (side_penetrations) {
      found = true;
      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
      side_ns.scale(-R, r.ri); // Sphere r

      r.ni.copy(side_ns);
      r.ni.negate(r.ni); // Normal should be out of sphere

      side_ns.scale(side_h, side_ns);
      side_ns1.scale(side_dot1, side_ns1);
      side_ns.vadd(side_ns1, side_ns);
      side_ns2.scale(side_dot2, side_ns2);
      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies

      r.ri.vadd(xi, r.ri);
      r.ri.vsub(bi.position, r.ri);
      r.rj.vadd(xj, r.rj);
      r.rj.vsub(bj.position, r.rj);
      this.result.push(r);
      this.createFrictionEquationsFromContact(r, this.frictionResult);
    } // Check corners


    let rj = v3pool.get();
    const sphere_to_corner = sphereBox_sphere_to_corner;

    for (let j = 0; j !== 2 && !found; j++) {
      for (let k = 0; k !== 2 && !found; k++) {
        for (let l = 0; l !== 2 && !found; l++) {
          rj.set(0, 0, 0);

          if (j) {
            rj.vadd(sides[0], rj);
          } else {
            rj.vsub(sides[0], rj);
          }

          if (k) {
            rj.vadd(sides[1], rj);
          } else {
            rj.vsub(sides[1], rj);
          }

          if (l) {
            rj.vadd(sides[2], rj);
          } else {
            rj.vsub(sides[2], rj);
          } // World position of corner


          xj.vadd(rj, sphere_to_corner);
          sphere_to_corner.vsub(xi, sphere_to_corner);

          if (sphere_to_corner.lengthSquared() < R * R) {
            if (justTest) {
              return true;
            }

            found = true;
            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
            r.ri.copy(sphere_to_corner);
            r.ri.normalize();
            r.ni.copy(r.ri);
            r.ri.scale(R, r.ri);
            r.rj.copy(rj); // Make relative to bodies

            r.ri.vadd(xi, r.ri);
            r.ri.vsub(bi.position, r.ri);
            r.rj.vadd(xj, r.rj);
            r.rj.vsub(bj.position, r.rj);
            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      }
    }

    v3pool.release(rj);
    rj = null; // Check edges

    const edgeTangent = v3pool.get();
    const edgeCenter = v3pool.get();
    const r = v3pool.get(); // r = edge center to sphere center

    const orthogonal = v3pool.get();
    const dist = v3pool.get();
    const Nsides = sides.length;

    for (let j = 0; j !== Nsides && !found; j++) {
      for (let k = 0; k !== Nsides && !found; k++) {
        if (j % 3 !== k % 3) {
          // Get edge tangent
          sides[k].cross(sides[j], edgeTangent);
          edgeTangent.normalize();
          sides[j].vadd(sides[k], edgeCenter);
          r.copy(xi);
          r.vsub(edgeCenter, r);
          r.vsub(xj, r);
          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction

          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction
          // Find the third side orthogonal to this one

          let l = 0;

          while (l === j % 3 || l === k % 3) {
            l++;
          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent


          dist.copy(xi);
          dist.vsub(orthogonal, dist);
          dist.vsub(edgeCenter, dist);
          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it

          const tdist = Math.abs(orthonorm);
          const ndist = dist.length();

          if (tdist < sides[l].length() && ndist < R) {
            if (justTest) {
              return true;
            }

            found = true;
            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
            edgeCenter.vadd(orthogonal, res.rj); // box rj

            res.rj.copy(res.rj);
            dist.negate(res.ni);
            res.ni.normalize();
            res.ri.copy(res.rj);
            res.ri.vadd(xj, res.ri);
            res.ri.vsub(xi, res.ri);
            res.ri.normalize();
            res.ri.scale(R, res.ri); // Make relative to bodies

            res.ri.vadd(xi, res.ri);
            res.ri.vsub(bi.position, res.ri);
            res.rj.vadd(xj, res.rj);
            res.rj.vsub(bj.position, res.rj);
            this.result.push(res);
            this.createFrictionEquationsFromContact(res, this.frictionResult);
          }
        }
      }
    }

    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);
  }

  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    sj.convexPolyhedronRepresentation.material = sj.material;
    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
    sj.convexPolyhedronRepresentation.id = sj.id;
    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);
  }

  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {
    const sepAxis = convexConvex_sepAxis;

    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
      return;
    }

    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {
      const res = [];
      const q = convexConvex_q;
      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);
      let numContacts = 0;

      for (let j = 0; j !== res.length; j++) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        const ri = r.ri;
        const rj = r.rj;
        sepAxis.negate(r.ni);
        res[j].normal.negate(q);
        q.scale(res[j].depth, q);
        res[j].point.vadd(q, ri);
        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative

        ri.vsub(xi, ri);
        rj.vsub(xj, rj); // Make relative to bodies

        ri.vadd(xi, ri);
        ri.vsub(bi.position, ri);
        rj.vadd(xj, rj);
        rj.vsub(bj.position, rj);
        this.result.push(r);
        numContacts++;

        if (!this.enableFrictionReduction) {
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }

      if (this.enableFrictionReduction && numContacts) {
        this.createFrictionFromAverage(numContacts);
      }
    }
  }

  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    const v3pool = this.v3pool;
    xi.vsub(xj, convex_to_sphere);
    const normals = sj.faceNormals;
    const faces = sj.faces;
    const verts = sj.vertices;
    const R = si.radius; //     return;
    // }

    let found = false; // Check corners

    for (let i = 0; i !== verts.length; i++) {
      const v = verts[i]; // World position of corner

      const worldCorner = sphereConvex_worldCorner;
      qj.vmult(v, worldCorner);
      xj.vadd(worldCorner, worldCorner);
      const sphere_to_corner = sphereConvex_sphereToCorner;
      worldCorner.vsub(xi, sphere_to_corner);

      if (sphere_to_corner.lengthSquared() < R * R) {
        if (justTest) {
          return true;
        }

        found = true;
        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        r.ri.copy(sphere_to_corner);
        r.ri.normalize();
        r.ni.copy(r.ri);
        r.ri.scale(R, r.ri);
        worldCorner.vsub(xj, r.rj); // Should be relative to the body.

        r.ri.vadd(xi, r.ri);
        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.

        r.rj.vadd(xj, r.rj);
        r.rj.vsub(bj.position, r.rj);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
        return;
      }
    } // Check side (plane) intersections


    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {
      const normal = normals[i];
      const face = faces[i]; // Get world-transformed normal of the face

      const worldNormal = sphereConvex_worldNormal;
      qj.vmult(normal, worldNormal); // Get a world vertex from the face

      const worldPoint = sphereConvex_worldPoint;
      qj.vmult(verts[face[0]], worldPoint);
      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal

      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;
      worldNormal.scale(-R, worldSpherePointClosestToPlane);
      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere

      const penetrationVec = sphereConvex_penetrationVec;
      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.

      const penetration = penetrationVec.dot(worldNormal);
      const worldPointToSphere = sphereConvex_sphereToWorldPoint;
      xi.vsub(worldPoint, worldPointToSphere);

      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {
        // Intersects plane. Now check if the sphere is inside the face polygon
        const faceVerts = []; // Face vertices, in world coords

        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {
          const worldVertex = v3pool.get();
          qj.vmult(verts[face[j]], worldVertex);
          xj.vadd(worldVertex, worldVertex);
          faceVerts.push(worldVertex);
        }

        if (pointInPolygon(faceVerts, worldNormal, xi)) {
          // Is the sphere center in the face polygon?
          if (justTest) {
            return true;
          }

          found = true;
          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact

          worldNormal.negate(r.ni); // Normal pointing out of sphere

          const penetrationVec2 = v3pool.get();
          worldNormal.scale(-penetration, penetrationVec2);
          const penetrationSpherePoint = v3pool.get();
          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);

          xi.vsub(xj, r.rj);
          r.rj.vadd(penetrationSpherePoint, r.rj);
          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.

          r.rj.vadd(xj, r.rj);
          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.

          r.ri.vadd(xi, r.ri);
          r.ri.vsub(bi.position, r.ri);
          v3pool.release(penetrationVec2);
          v3pool.release(penetrationSpherePoint);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices

          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
            v3pool.release(faceVerts[j]);
          }

          return; // We only expect *one* face contact
        } else {
          // Edge?
          for (let j = 0; j !== face.length; j++) {
            // Get two world transformed vertices
            const v1 = v3pool.get();
            const v2 = v3pool.get();
            qj.vmult(verts[face[(j + 1) % face.length]], v1);
            qj.vmult(verts[face[(j + 2) % face.length]], v2);
            xj.vadd(v1, v1);
            xj.vadd(v2, v2); // Construct edge vector

            const edge = sphereConvex_edge;
            v2.vsub(v1, edge); // Construct the same vector, but normalized

            const edgeUnit = sphereConvex_edgeUnit;
            edge.unit(edgeUnit); // p is xi projected onto the edge

            const p = v3pool.get();
            const v1_to_xi = v3pool.get();
            xi.vsub(v1, v1_to_xi);
            const dot = v1_to_xi.dot(edgeUnit);
            edgeUnit.scale(dot, p);
            p.vadd(v1, p); // Compute a vector from p to the center of the sphere

            const xi_to_p = v3pool.get();
            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius
            // AND if p is in between v1 and v2

            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {
              // Collision if the edge-sphere distance is less than the radius
              // Edge contact!
              if (justTest) {
                return true;
              }

              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
              p.vsub(xj, r.rj);
              p.vsub(xi, r.ni);
              r.ni.normalize();
              r.ni.scale(R, r.ri); // Should be relative to the body.

              r.rj.vadd(xj, r.rj);
              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.

              r.ri.vadd(xi, r.ri);
              r.ri.vsub(bi.position, r.ri);
              this.result.push(r);
              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices

              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
                v3pool.release(faceVerts[j]);
              }

              v3pool.release(v1);
              v3pool.release(v2);
              v3pool.release(p);
              v3pool.release(xi_to_p);
              v3pool.release(v1_to_xi);
              return;
            }

            v3pool.release(v1);
            v3pool.release(v2);
            v3pool.release(p);
            v3pool.release(xi_to_p);
            v3pool.release(v1_to_xi);
          }
        } // Release world vertices


        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
          v3pool.release(faceVerts[j]);
        }
      }
    }
  }

  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {
    // Simply return the points behind the plane.
    const worldVertex = planeConvex_v;
    const worldNormal = planeConvex_normal;
    worldNormal.set(0, 0, 1);
    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation

    let numContacts = 0;
    const relpos = planeConvex_relpos;

    for (let i = 0; i !== convexShape.vertices.length; i++) {
      // Get world convex vertex
      worldVertex.copy(convexShape.vertices[i]);
      convexQuat.vmult(worldVertex, worldVertex);
      convexPosition.vadd(worldVertex, worldVertex);
      worldVertex.vsub(planePosition, relpos);
      const dot = worldNormal.dot(relpos);

      if (dot <= 0.0) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane

        const projected = planeConvex_projected;
        worldNormal.scale(worldNormal.dot(relpos), projected);
        worldVertex.vsub(projected, projected);
        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane

        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane
        // rj is now just the vector from the convex center to the vertex

        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body

        r.ri.vadd(planePosition, r.ri);
        r.ri.vsub(planeBody.position, r.ri);
        r.rj.vadd(convexPosition, r.rj);
        r.rj.vsub(convexBody.position, r.rj);
        this.result.push(r);
        numContacts++;

        if (!this.enableFrictionReduction) {
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }
    }

    if (this.enableFrictionReduction && numContacts) {
      this.createFrictionFromAverage(numContacts);
    }
  }

  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    si.convexPolyhedronRepresentation.material = si.material;
    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
  }

  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {
    const data = hfShape.data;
    const radius = sphereShape.radius;
    const w = hfShape.elementSize;
    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!

    const localSpherePos = sphereHeightfield_tmp1;
    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against

    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;
    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;
    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;
    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain

    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
      return;
    } // Clamp index to edges


    if (iMinX < 0) {
      iMinX = 0;
    }

    if (iMaxX < 0) {
      iMaxX = 0;
    }

    if (iMinY < 0) {
      iMinY = 0;
    }

    if (iMaxY < 0) {
      iMaxY = 0;
    }

    if (iMinX >= data.length) {
      iMinX = data.length - 1;
    }

    if (iMaxX >= data.length) {
      iMaxX = data.length - 1;
    }

    if (iMaxY >= data[0].length) {
      iMaxY = data[0].length - 1;
    }

    if (iMinY >= data[0].length) {
      iMinY = data[0].length - 1;
    }

    const minMax = [];
    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
    const min = minMax[0];
    const max = minMax[1]; // Bail out if we can't touch the bounding height box

    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {
      return;
    }

    const result = this.result;

    for (let i = iMinX; i < iMaxX; i++) {
      for (let j = iMinY; j < iMaxY; j++) {
        const numContactsBefore = result.length;
        let intersecting = false; // Lower triangle

        hfShape.getConvexTrianglePillar(i, j, false);
        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);
        }

        if (justTest && intersecting) {
          return true;
        } // Upper triangle


        hfShape.getConvexTrianglePillar(i, j, true);
        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);
        }

        if (justTest && intersecting) {
          return true;
        }

        const numContacts = result.length - numContactsBefore;

        if (numContacts > 2) {
          return;
        }
        /*
          // Skip all but 1
          for (let k = 0; k < numContacts - 1; k++) {
              result.pop();
          }
        */

      }
    }
  }

  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    si.convexPolyhedronRepresentation.material = si.material;
    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
  }

  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {
    const data = hfShape.data;
    const w = hfShape.elementSize;
    const radius = convexShape.boundingSphereRadius;
    const worldPillarOffset = convexHeightfield_tmp2;
    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!

    const localConvexPos = convexHeightfield_tmp1;
    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against

    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;
    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;
    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;
    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain

    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
      return;
    } // Clamp index to edges


    if (iMinX < 0) {
      iMinX = 0;
    }

    if (iMaxX < 0) {
      iMaxX = 0;
    }

    if (iMinY < 0) {
      iMinY = 0;
    }

    if (iMaxY < 0) {
      iMaxY = 0;
    }

    if (iMinX >= data.length) {
      iMinX = data.length - 1;
    }

    if (iMaxX >= data.length) {
      iMaxX = data.length - 1;
    }

    if (iMaxY >= data[0].length) {
      iMaxY = data[0].length - 1;
    }

    if (iMinY >= data[0].length) {
      iMinY = data[0].length - 1;
    }

    const minMax = [];
    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
    const min = minMax[0];
    const max = minMax[1]; // Bail out if we're cant touch the bounding height box

    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {
      return;
    }

    for (let i = iMinX; i < iMaxX; i++) {
      for (let j = iMinY; j < iMaxY; j++) {
        let intersecting = false; // Lower triangle

        hfShape.getConvexTrianglePillar(i, j, false);
        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);
        }

        if (justTest && intersecting) {
          return true;
        } // Upper triangle


        hfShape.getConvexTrianglePillar(i, j, true);
        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);
        }

        if (justTest && intersecting) {
          return true;
        }
      }
    }
  }

  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
    // The normal is the unit vector from sphere center to particle center
    const normal = particleSphere_normal;
    normal.set(0, 0, 1);
    xi.vsub(xj, normal);
    const lengthSquared = normal.lengthSquared();

    if (lengthSquared <= sj.radius * sj.radius) {
      if (justTest) {
        return true;
      }

      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
      normal.normalize();
      r.rj.copy(normal);
      r.rj.scale(sj.radius, r.rj);
      r.ni.copy(normal); // Contact normal

      r.ni.negate(r.ni);
      r.ri.set(0, 0, 0); // Center of particle

      this.result.push(r);
      this.createFrictionEquationsFromContact(r, this.frictionResult);
    }
  }

  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
    const normal = particlePlane_normal;
    normal.set(0, 0, 1);
    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation

    const relpos = particlePlane_relpos;
    xi.vsub(bj.position, relpos);
    const dot = normal.dot(relpos);

    if (dot <= 0.0) {
      if (justTest) {
        return true;
      }

      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
      r.ni.copy(normal); // Contact normal is the plane normal

      r.ni.negate(r.ni);
      r.ri.set(0, 0, 0); // Center of particle
      // Get particle position projected on plane

      const projected = particlePlane_projected;
      normal.scale(normal.dot(xi), projected);
      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);
      // rj is now the projected world position minus plane position

      r.rj.copy(projected);
      this.result.push(r);
      this.createFrictionEquationsFromContact(r, this.frictionResult);
    }
  }

  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
    si.convexPolyhedronRepresentation.material = si.material;
    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
  }

  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
    let penetratedFaceIndex = -1;
    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;
    const worldPenetrationVec = convexParticle_worldPenetrationVec;
    let minPenetration = null;
    const local = convexParticle_local;
    local.copy(xi);
    local.vsub(xj, local); // Convert position to relative the convex origin

    qj.conjugate(cqj);
    cqj.vmult(local, local);

    if (sj.pointIsInside(local)) {
      if (sj.worldVerticesNeedsUpdate) {
        sj.computeWorldVertices(xj, qj);
      }

      if (sj.worldFaceNormalsNeedsUpdate) {
        sj.computeWorldFaceNormals(qj);
      } // For each world polygon in the polyhedra


      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {
        // Construct world face vertices
        const verts = [sj.worldVertices[sj.faces[i][0]]];
        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.

        xi.vsub(verts[0], convexParticle_vertexToParticle);
        const penetration = -normal.dot(convexParticle_vertexToParticle);

        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {
          if (justTest) {
            return true;
          }

          minPenetration = penetration;
          penetratedFaceIndex = i;
          penetratedFaceNormal.copy(normal);
        }
      }

      if (penetratedFaceIndex !== -1) {
        // Setup contact
        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face

        worldPenetrationVec.vadd(xi, worldPenetrationVec);
        worldPenetrationVec.vsub(xj, worldPenetrationVec);
        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);
        //projectedToFace.copy(r.rj);
        //qj.vmult(r.rj,r.rj);

        penetratedFaceNormal.negate(r.ni); // Contact normal

        r.ri.set(0, 0, 0); // Center of particle

        const ri = r.ri;
        const rj = r.rj; // Make relative to bodies

        ri.vadd(xi, ri);
        ri.vsub(bi.position, ri);
        rj.vadd(xj, rj);
        rj.vsub(bj.position, rj);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      } else {
        console.warn('Point found inside convex, but did not find penetrating face!');
      }
    }
  }

  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {
    const edgeVertexA = sphereTrimesh_edgeVertexA;
    const edgeVertexB = sphereTrimesh_edgeVertexB;
    const edgeVector = sphereTrimesh_edgeVector;
    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;
    const localSpherePos = sphereTrimesh_localSpherePos;
    const tmp = sphereTrimesh_tmp;
    const localSphereAABB = sphereTrimesh_localSphereAABB;
    const v2 = sphereTrimesh_v2;
    const relpos = sphereTrimesh_relpos;
    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh

    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh

    const sphereRadius = sphereShape.radius;
    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);
    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);
    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All
    // Vertices

    const v = sphereTrimesh_v;
    const radiusSquared = sphereShape.radius * sphereShape.radius;

    for (let i = 0; i < triangles.length; i++) {
      for (let j = 0; j < 3; j++) {
        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere

        v.vsub(localSpherePos, relpos);

        if (relpos.lengthSquared() <= radiusSquared) {
          // Safe up
          v2.copy(v);
          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);
          v.vsub(spherePos, relpos);

          if (justTest) {
            return true;
          }

          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
          r.ni.copy(relpos);
          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface

          r.ri.copy(r.ni);
          r.ri.scale(sphereShape.radius, r.ri);
          r.ri.vadd(spherePos, r.ri);
          r.ri.vsub(sphereBody.position, r.ri);
          r.rj.copy(v);
          r.rj.vsub(trimeshBody.position, r.rj); // Store result

          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }
    } // Check all edges


    for (let i = 0; i < triangles.length; i++) {
      for (let j = 0; j < 3; j++) {
        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);
        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);
        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge

        localSpherePos.vsub(edgeVertexB, tmp);
        const positionAlongEdgeB = tmp.dot(edgeVector);
        localSpherePos.vsub(edgeVertexA, tmp);
        let positionAlongEdgeA = tmp.dot(edgeVector);

        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {
          // Now check the orthogonal distance from edge to sphere center
          localSpherePos.vsub(edgeVertexA, tmp);
          edgeVectorUnit.copy(edgeVector);
          edgeVectorUnit.normalize();
          positionAlongEdgeA = tmp.dot(edgeVectorUnit);
          edgeVectorUnit.scale(positionAlongEdgeA, tmp);
          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame

          const dist = tmp.distanceTo(localSpherePos);

          if (dist < sphereShape.radius) {
            if (justTest) {
              return true;
            }

            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
            tmp.vsub(localSpherePos, r.ni);
            r.ni.normalize();
            r.ni.scale(sphereShape.radius, r.ri);
            r.ri.vadd(spherePos, r.ri);
            r.ri.vsub(sphereBody.position, r.ri);
            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
            tmp.vsub(trimeshBody.position, r.rj);
            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);
            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      }
    } // Triangle faces


    const va = sphereTrimesh_va;
    const vb = sphereTrimesh_vb;
    const vc = sphereTrimesh_vc;
    const normal = sphereTrimesh_normal;

    for (let i = 0, N = triangles.length; i !== N; i++) {
      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);
      trimeshShape.getNormal(triangles[i], normal);
      localSpherePos.vsub(va, tmp);
      let dist = tmp.dot(normal);
      normal.scale(dist, tmp);
      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane

      dist = tmp.distanceTo(localSpherePos);

      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {
        if (justTest) {
          return true;
        }

        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
        tmp.vsub(localSpherePos, r.ni);
        r.ni.normalize();
        r.ni.scale(sphereShape.radius, r.ri);
        r.ri.vadd(spherePos, r.ri);
        r.ri.vsub(sphereBody.position, r.ri);
        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
        tmp.vsub(trimeshBody.position, r.rj);
        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    triangles.length = 0;
  }

  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {
    // Make contacts!
    const v = new Vec3();
    const normal = planeTrimesh_normal;
    normal.set(0, 0, 1);
    planeQuat.vmult(normal, normal); // Turn normal according to plane

    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {
      // Get world vertex from trimesh
      trimeshShape.getVertex(i, v); // Safe up

      const v2 = new Vec3();
      v2.copy(v);
      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side

      const relpos = planeTrimesh_relpos;
      v.vsub(planePos, relpos);
      const dot = normal.dot(relpos);

      if (dot <= 0.0) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);
        r.ni.copy(normal); // Contact normal is the plane normal
        // Get vertex position projected on plane

        const projected = planeTrimesh_projected;
        normal.scale(relpos.dot(normal), projected);
        v.vsub(projected, projected); // ri is the projected world position minus plane position

        r.ri.copy(projected);
        r.ri.vsub(planeBody.position, r.ri);
        r.rj.copy(v);
        r.rj.vsub(trimeshBody.position, r.rj); // Store result

        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }
  } // convexTrimesh(
  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,
  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,
  //   faceListA?: number[] | null, faceListB?: number[] | null,
  // ) {
  //   const sepAxis = convexConvex_sepAxis;
  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){
  //       return;
  //   }
  //   // Construct a temp hull for each triangle
  //   const hullB = new ConvexPolyhedron();
  //   hullB.faces = [[0,1,2]];
  //   const va = new Vec3();
  //   const vb = new Vec3();
  //   const vc = new Vec3();
  //   hullB.vertices = [
  //       va,
  //       vb,
  //       vc
  //   ];
  //   for (let i = 0; i < sj.indices.length / 3; i++) {
  //       const triangleNormal = new Vec3();
  //       sj.getNormal(i, triangleNormal);
  //       hullB.faceNormals = [triangleNormal];
  //       sj.getTriangleVertices(i, va, vb, vc);
  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
  //       if(!d){
  //           triangleNormal.scale(-1, triangleNormal);
  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
  //           if(!d){
  //               continue;
  //           }
  //       }
  //       const res: ConvexPolyhedronContactPoint[] = [];
  //       const q = convexConvex_q;
  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);
  //       for(let j = 0; j !== res.length; j++){
  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),
  //               ri = r.ri,
  //               rj = r.rj;
  //           r.ni.copy(triangleNormal);
  //           r.ni.negate(r.ni);
  //           res[j].normal.negate(q);
  //           q.mult(res[j].depth, q);
  //           res[j].point.vadd(q, ri);
  //           rj.copy(res[j].point);
  //           // Contact points are in world coordinates. Transform back to relative
  //           ri.vsub(xi,ri);
  //           rj.vsub(xj,rj);
  //           // Make relative to bodies
  //           ri.vadd(xi, ri);
  //           ri.vsub(bi.position, ri);
  //           rj.vadd(xj, rj);
  //           rj.vsub(bj.position, rj);
  //           result.push(r);
  //       }
  //   }
  // }


}

const averageNormal = new Vec3();
const averageContactPointA = new Vec3();
const averageContactPointB = new Vec3();
const tmpVec1$2 = new Vec3();
const tmpVec2$2 = new Vec3();
const tmpQuat1 = new Quaternion();
const tmpQuat2 = new Quaternion();
Narrowphase.prototype[COLLISION_TYPES.boxBox] = Narrowphase.prototype.boxBox;
Narrowphase.prototype[COLLISION_TYPES.boxConvex] = Narrowphase.prototype.boxConvex;
Narrowphase.prototype[COLLISION_TYPES.boxParticle] = Narrowphase.prototype.boxParticle;
Narrowphase.prototype[COLLISION_TYPES.sphereSphere] = Narrowphase.prototype.sphereSphere;
const planeTrimesh_normal = new Vec3();
const planeTrimesh_relpos = new Vec3();
const planeTrimesh_projected = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.planeTrimesh] = Narrowphase.prototype.planeTrimesh;
const sphereTrimesh_normal = new Vec3();
const sphereTrimesh_relpos = new Vec3();
const sphereTrimesh_v = new Vec3();
const sphereTrimesh_v2 = new Vec3();
const sphereTrimesh_edgeVertexA = new Vec3();
const sphereTrimesh_edgeVertexB = new Vec3();
const sphereTrimesh_edgeVector = new Vec3();
const sphereTrimesh_edgeVectorUnit = new Vec3();
const sphereTrimesh_localSpherePos = new Vec3();
const sphereTrimesh_tmp = new Vec3();
const sphereTrimesh_va = new Vec3();
const sphereTrimesh_vb = new Vec3();
const sphereTrimesh_vc = new Vec3();
const sphereTrimesh_localSphereAABB = new AABB();
const sphereTrimesh_triangles = [];
Narrowphase.prototype[COLLISION_TYPES.sphereTrimesh] = Narrowphase.prototype.sphereTrimesh;
const point_on_plane_to_sphere = new Vec3();
const plane_to_sphere_ortho = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.spherePlane] = Narrowphase.prototype.spherePlane; // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html

const pointInPolygon_edge = new Vec3();
const pointInPolygon_edge_x_normal = new Vec3();
const pointInPolygon_vtp = new Vec3();

function pointInPolygon(verts, normal, p) {
  let positiveResult = null;
  const N = verts.length;

  for (let i = 0; i !== N; i++) {
    const v = verts[i]; // Get edge to the next vertex

    const edge = pointInPolygon_edge;
    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge

    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();

    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex

    const vertex_to_p = pointInPolygon_vtp;
    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is

    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.

    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {
      if (positiveResult === null) {
        positiveResult = r > 0;
      }

      continue;
    } else {
      return false; // Encountered some other sign. Exit.
    }
  } // If we got here, all dot products were of the same sign.


  return true;
}

const box_to_sphere = new Vec3();
const sphereBox_ns = new Vec3();
const sphereBox_ns1 = new Vec3();
const sphereBox_ns2 = new Vec3();
const sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
const sphereBox_sphere_to_corner = new Vec3();
const sphereBox_side_ns = new Vec3();
const sphereBox_side_ns1 = new Vec3();
const sphereBox_side_ns2 = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.sphereBox] = Narrowphase.prototype.sphereBox;
const convex_to_sphere = new Vec3();
const sphereConvex_edge = new Vec3();
const sphereConvex_edgeUnit = new Vec3();
const sphereConvex_sphereToCorner = new Vec3();
const sphereConvex_worldCorner = new Vec3();
const sphereConvex_worldNormal = new Vec3();
const sphereConvex_worldPoint = new Vec3();
const sphereConvex_worldSpherePointClosestToPlane = new Vec3();
const sphereConvex_penetrationVec = new Vec3();
const sphereConvex_sphereToWorldPoint = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.sphereConvex] = Narrowphase.prototype.sphereConvex;
Narrowphase.prototype[COLLISION_TYPES.planeBox] = Narrowphase.prototype.planeBox;
const planeConvex_v = new Vec3();
const planeConvex_normal = new Vec3();
const planeConvex_relpos = new Vec3();
const planeConvex_projected = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.planeConvex] = Narrowphase.prototype.planeConvex;
const convexConvex_sepAxis = new Vec3();
const convexConvex_q = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.convexConvex] = Narrowphase.prototype.convexConvex; // Narrowphase.prototype[COLLISION_TYPES.convexTrimesh] = Narrowphase.prototype.convexTrimesh

const particlePlane_normal = new Vec3();
const particlePlane_relpos = new Vec3();
const particlePlane_projected = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.planeParticle] = Narrowphase.prototype.planeParticle;
const particleSphere_normal = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.sphereParticle] = Narrowphase.prototype.sphereParticle; // WIP

const cqj = new Quaternion();
const convexParticle_local = new Vec3();
const convexParticle_penetratedFaceNormal = new Vec3();
const convexParticle_vertexToParticle = new Vec3();
const convexParticle_worldPenetrationVec = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.convexParticle] = Narrowphase.prototype.convexParticle;
Narrowphase.prototype[COLLISION_TYPES.boxHeightfield] = Narrowphase.prototype.boxHeightfield;
const convexHeightfield_tmp1 = new Vec3();
const convexHeightfield_tmp2 = new Vec3();
const convexHeightfield_faceList = [0];
Narrowphase.prototype[COLLISION_TYPES.convexHeightfield] = Narrowphase.prototype.convexHeightfield;
const sphereHeightfield_tmp1 = new Vec3();
const sphereHeightfield_tmp2 = new Vec3();
Narrowphase.prototype[COLLISION_TYPES.sphereHeightfield] = Narrowphase.prototype.sphereHeightfield;
/**
 * @class OverlapKeeper
 * @constructor
 */

class OverlapKeeper {
  constructor() {
    this.current = [];
    this.previous = [];
  }

  getKey(i, j) {
    if (j < i) {
      const temp = j;
      j = i;
      i = temp;
    }

    return i << 16 | j;
  }
  /**
   * @method set
   * @param {Number} i
   * @param {Number} j
   */


  set(i, j) {
    // Insertion sort. This way the diff will have linear complexity.
    const key = this.getKey(i, j);
    const current = this.current;
    let index = 0;

    while (key > current[index]) {
      index++;
    }

    if (key === current[index]) {
      return; // Pair was already added
    }

    for (let j = current.length - 1; j >= index; j--) {
      current[j + 1] = current[j];
    }

    current[index] = key;
  }
  /**
   * @method tick
   */


  tick() {
    const tmp = this.current;
    this.current = this.previous;
    this.previous = tmp;
    this.current.length = 0;
  }
  /**
   * @method getDiff
   * @param  {array} additions
   * @param  {array} removals
   */


  getDiff(additions, removals) {
    const a = this.current;
    const b = this.previous;
    const al = a.length;
    const bl = b.length;
    let j = 0;

    for (let i = 0; i < al; i++) {
      let found = false;
      const keyA = a[i];

      while (keyA > b[j]) {
        j++;
      }

      found = keyA === b[j];

      if (!found) {
        unpackAndPush(additions, keyA);
      }
    }

    j = 0;

    for (let i = 0; i < bl; i++) {
      let found = false;
      const keyB = b[i];

      while (keyB > a[j]) {
        j++;
      }

      found = a[j] === keyB;

      if (!found) {
        unpackAndPush(removals, keyB);
      }
    }
  }

}

function unpackAndPush(array, key) {
  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);
}
/**
 * @class TupleDictionary
 * @constructor
 */


class TupleDictionary {
  constructor() {
    this.data = {
      keys: []
    };
  }
  /**
   * @method get
   * @param  {Number} i
   * @param  {Number} j
   * @return {Object}
   */


  get(i, j) {
    if (i > j) {
      // swap
      const temp = j;
      j = i;
      i = temp;
    }

    return this.data[i + "-" + j];
  }
  /**
   * @method set
   * @param  {Number} i
   * @param  {Number} j
   * @param {Object} value
   */


  set(i, j, value) {
    if (i > j) {
      const temp = j;
      j = i;
      i = temp;
    }

    const key = i + "-" + j; // Check if key already exists

    if (!this.get(i, j)) {
      this.data.keys.push(key);
    }

    this.data[key] = value;
  }
  /**
   * @method reset
   */


  reset() {
    const data = this.data;
    const keys = data.keys;

    while (keys.length > 0) {
      const key = keys.pop();
      delete data[key];
    }
  }

}
/**
 * The physics world
 * @class World
 * @constructor
 * @extends EventTarget
 * @param {object} [options]
 * @param {Vec3} [options.gravity]
 * @param {boolean} [options.allowSleep]
 * @param {Broadphase} [options.broadphase]
 * @param {Solver} [options.solver]
 * @param {boolean} [options.quatNormalizeFast]
 * @param {number} [options.quatNormalizeSkip]
 */


class World extends EventTarget {
  // Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is "fresh" inside event callbacks.
  // Makes bodies go to sleep when they've been inactive.
  // All the current contacts (instances of ContactEquation) in the world.
  // How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).
  // Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.
  // The wall-clock time since simulation start.
  // Number of timesteps taken since start.
  // Default and last timestep sizes.
  // The broadphase algorithm to use. Default is NaiveBroadphase.
  // All bodies in this world
  // True if any bodies are not sleeping, false if every body is sleeping.
  // The solver algorithm to use. Default is GSSolver.
  // CollisionMatrix from the previous step.
  // All added materials.
  // Used to look up a ContactMaterial given two instances of Material.
  // This contact material is used if no suitable contactmaterial is found for a contact.
  // Time accumulator for interpolation. See http://gafferongames.com/game-physics/fix-your-timestep/
  // Dispatched after a body has been added to the world.
  // Dispatched after a body has been removed from the world.
  constructor(options = {}) {
    super();
    this.dt = -1;
    this.allowSleep = !!options.allowSleep;
    this.contacts = [];
    this.frictionEquations = [];
    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;
    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;
    this.time = 0.0;
    this.stepnumber = 0;
    this.default_dt = 1 / 60;
    this.nextId = 0;
    this.gravity = new Vec3();

    if (options.gravity) {
      this.gravity.copy(options.gravity);
    }

    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();
    this.bodies = [];
    this.hasActiveBodies = false;
    this.solver = options.solver !== undefined ? options.solver : new GSSolver();
    this.constraints = [];
    this.narrowphase = new Narrowphase(this);
    this.collisionMatrix = new ArrayCollisionMatrix();
    this.collisionMatrixPrevious = new ArrayCollisionMatrix();
    this.bodyOverlapKeeper = new OverlapKeeper();
    this.shapeOverlapKeeper = new OverlapKeeper();
    this.materials = [];
    this.contactmaterials = [];
    this.contactMaterialTable = new TupleDictionary();
    this.defaultMaterial = new Material('default');
    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {
      friction: 0.3,
      restitution: 0.0
    });
    this.doProfiling = false;
    this.profile = {
      solve: 0,
      makeContactConstraints: 0,
      broadphase: 0,
      integrate: 0,
      narrowphase: 0
    };
    this.accumulator = 0;
    this.subsystems = [];
    this.addBodyEvent = {
      type: 'addBody',
      body: null
    };
    this.removeBodyEvent = {
      type: 'removeBody',
      body: null
    };
    this.idToBodyMap = {};
    this.broadphase.setWorld(this);
  }
  /**
   * Get the contact material between materials m1 and m2
   * @method getContactMaterial
   * @param {Material} m1
   * @param {Material} m2
   * @return {ContactMaterial} The contact material if it was found.
   */


  getContactMaterial(m1, m2) {
    return this.contactMaterialTable.get(m1.id, m2.id);
  }
  /**
   * Get number of objects in the world.
   * @method numObjects
   * @return {Number}
   * @deprecated
   */


  numObjects() {
    return this.bodies.length;
  }
  /**
   * Store old collision state info
   * @method collisionMatrixTick
   */


  collisionMatrixTick() {
    const temp = this.collisionMatrixPrevious;
    this.collisionMatrixPrevious = this.collisionMatrix;
    this.collisionMatrix = temp;
    this.collisionMatrix.reset();
    this.bodyOverlapKeeper.tick();
    this.shapeOverlapKeeper.tick();
  }
  /**
   * Add a constraint to the simulation.
   * @method addConstraint
   * @param {Constraint} c
   */


  addConstraint(c) {
    this.constraints.push(c);
  }
  /**
   * Removes a constraint
   * @method removeConstraint
   * @param {Constraint} c
   */


  removeConstraint(c) {
    const idx = this.constraints.indexOf(c);

    if (idx !== -1) {
      this.constraints.splice(idx, 1);
    }
  }
  /**
   * Raycast test
   * @method rayTest
   * @param {Vec3} from
   * @param {Vec3} to
   * @param {RaycastResult} result
   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.
   */


  rayTest(from, to, result) {
    if (result instanceof RaycastResult) {
      // Do raycastClosest
      this.raycastClosest(from, to, {
        skipBackfaces: true
      }, result);
    } else {
      // Do raycastAll
      this.raycastAll(from, to, {
        skipBackfaces: true
      }, result);
    }
  }
  /**
   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.
   * @method raycastAll
   * @param  {Vec3} from
   * @param  {Vec3} to
   * @param  {Object} options
   * @param  {number} [options.collisionFilterMask=-1]
   * @param  {number} [options.collisionFilterGroup=-1]
   * @param  {boolean} [options.skipBackfaces=false]
   * @param  {boolean} [options.checkCollisionResponse=true]
   * @param  {Function} callback
   * @return {boolean} True if any body was hit.
   */


  raycastAll(from, to, options = {}, callback) {
    options.mode = Ray.ALL;
    options.from = from;
    options.to = to;
    options.callback = callback;
    return tmpRay$1.intersectWorld(this, options);
  }
  /**
   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.
   * @method raycastAny
   * @param  {Vec3} from
   * @param  {Vec3} to
   * @param  {Object} options
   * @param  {number} [options.collisionFilterMask=-1]
   * @param  {number} [options.collisionFilterGroup=-1]
   * @param  {boolean} [options.skipBackfaces=false]
   * @param  {boolean} [options.checkCollisionResponse=true]
   * @param  {RaycastResult} result
   * @return {boolean} True if any body was hit.
   */


  raycastAny(from, to, options = {}, result) {
    options.mode = Ray.ANY;
    options.from = from;
    options.to = to;
    options.result = result;
    return tmpRay$1.intersectWorld(this, options);
  }
  /**
   * Ray cast, and return information of the closest hit.
   * @method raycastClosest
   * @param  {Vec3} from
   * @param  {Vec3} to
   * @param  {Object} options
   * @param  {number} [options.collisionFilterMask=-1]
   * @param  {number} [options.collisionFilterGroup=-1]
   * @param  {boolean} [options.skipBackfaces=false]
   * @param  {boolean} [options.checkCollisionResponse=true]
   * @param  {RaycastResult} result
   * @return {boolean} True if any body was hit.
   */


  raycastClosest(from, to, options = {}, result) {
    options.mode = Ray.CLOSEST;
    options.from = from;
    options.to = to;
    options.result = result;
    return tmpRay$1.intersectWorld(this, options);
  }
  /**
   * Add a rigid body to the simulation.
   * @method add
   * @param {Body} body
   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.
   * @todo Adding an array of bodies should be possible. This would save some loops too
   */


  addBody(body) {
    if (this.bodies.includes(body)) {
      return;
    }

    body.index = this.bodies.length;
    this.bodies.push(body);
    body.world = this;
    body.initPosition.copy(body.position);
    body.initVelocity.copy(body.velocity);
    body.timeLastSleepy = this.time;

    if (body instanceof Body) {
      body.initAngularVelocity.copy(body.angularVelocity);
      body.initQuaternion.copy(body.quaternion);
    }

    this.collisionMatrix.setNumObjects(this.bodies.length);
    this.addBodyEvent.body = body;
    this.idToBodyMap[body.id] = body;
    this.dispatchEvent(this.addBodyEvent);
  }
  /**
   * Remove a rigid body from the simulation.
   * @method remove
   * @param {Body} body
   */


  removeBody(body) {
    body.world = null;
    const n = this.bodies.length - 1;
    const bodies = this.bodies;
    const idx = bodies.indexOf(body);

    if (idx !== -1) {
      bodies.splice(idx, 1); // Todo: should use a garbage free method
      // Recompute index

      for (let i = 0; i !== bodies.length; i++) {
        bodies[i].index = i;
      }

      this.collisionMatrix.setNumObjects(n);
      this.removeBodyEvent.body = body;
      delete this.idToBodyMap[body.id];
      this.dispatchEvent(this.removeBodyEvent);
    }
  }

  getBodyById(id) {
    return this.idToBodyMap[id];
  } // TODO Make a faster map


  getShapeById(id) {
    const bodies = this.bodies;

    for (let i = 0, bl = bodies.length; i < bl; i++) {
      const shapes = bodies[i].shapes;

      for (let j = 0, sl = shapes.length; j < sl; j++) {
        const shape = shapes[j];

        if (shape.id === id) {
          return shape;
        }
      }
    }
  }
  /**
   * Adds a material to the World.
   * @method addMaterial
   * @param {Material} m
   * @todo Necessary?
   */


  addMaterial(m) {
    this.materials.push(m);
  }
  /**
   * Adds a contact material to the World
   * @method addContactMaterial
   * @param {ContactMaterial} cmat
   */


  addContactMaterial(cmat) {
    // Add contact material
    this.contactmaterials.push(cmat); // Add current contact material to the material table

    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);
  }
  /**
   * Step the physics world forward in time.
   *
   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
   *
   * @method step
   * @param {Number} dt                       The fixed time step size to use.
   * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.
   * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.
   *
   * @example
   *     // fixed timestepping without interpolation
   *     world.step(1/60);
   *
   * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World
   */


  step(dt, timeSinceLastCalled = 0, maxSubSteps = 10) {
    if (timeSinceLastCalled === 0) {
      // Fixed, simple stepping
      this.internalStep(dt); // Increment time

      this.time += dt;
    } else {
      this.accumulator += timeSinceLastCalled;
      let substeps = 0;

      while (this.accumulator >= dt && substeps < maxSubSteps) {
        // Do fixed steps to catch up
        this.internalStep(dt);
        this.accumulator -= dt;
        substeps++;
      }

      const t = this.accumulator % dt / dt;

      for (let j = 0; j !== this.bodies.length; j++) {
        const b = this.bodies[j];
        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);
        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);
        b.previousQuaternion.normalize();
      }

      this.time += timeSinceLastCalled;
    }
  }

  internalStep(dt) {
    this.dt = dt;
    const contacts = this.contacts;
    const p1 = World_step_p1;
    const p2 = World_step_p2;
    const N = this.numObjects();
    const bodies = this.bodies;
    const solver = this.solver;
    const gravity = this.gravity;
    const doProfiling = this.doProfiling;
    const profile = this.profile;
    const DYNAMIC = Body.DYNAMIC;
    let profilingStart = -Infinity;
    const constraints = this.constraints;
    const frictionEquationPool = World_step_frictionEquationPool;
    const gnorm = gravity.length();
    const gx = gravity.x;
    const gy = gravity.y;
    const gz = gravity.z;
    let i = 0;

    if (doProfiling) {
      profilingStart = performance.now();
    } // Add gravity to all objects


    for (i = 0; i !== N; i++) {
      const bi = bodies[i];

      if (bi.type === DYNAMIC) {
        // Only for dynamic bodies
        const f = bi.force;
        const m = bi.mass;
        f.x += m * gx;
        f.y += m * gy;
        f.z += m * gz;
      }
    } // Update subsystems


    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {
      this.subsystems[i].update();
    } // Collision detection


    if (doProfiling) {
      profilingStart = performance.now();
    }

    p1.length = 0; // Clean up pair arrays from last step

    p2.length = 0;
    this.broadphase.collisionPairs(this, p1, p2);

    if (doProfiling) {
      profile.broadphase = performance.now() - profilingStart;
    } // Remove constrained pairs with collideConnected == false


    let Nconstraints = constraints.length;

    for (i = 0; i !== Nconstraints; i++) {
      const c = constraints[i];

      if (!c.collideConnected) {
        for (let j = p1.length - 1; j >= 0; j -= 1) {
          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {
            p1.splice(j, 1);
            p2.splice(j, 1);
          }
        }
      }
    }

    this.collisionMatrixTick(); // Generate contacts

    if (doProfiling) {
      profilingStart = performance.now();
    }

    const oldcontacts = World_step_oldContacts;
    const NoldContacts = contacts.length;

    for (i = 0; i !== NoldContacts; i++) {
      oldcontacts.push(contacts[i]);
    }

    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse

    const NoldFrictionEquations = this.frictionEquations.length;

    for (i = 0; i !== NoldFrictionEquations; i++) {
      frictionEquationPool.push(this.frictionEquations[i]);
    }

    this.frictionEquations.length = 0;
    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused
    this.frictionEquations, frictionEquationPool);

    if (doProfiling) {
      profile.narrowphase = performance.now() - profilingStart;
    } // Loop over all collisions


    if (doProfiling) {
      profilingStart = performance.now();
    } // Add all friction eqs


    for (i = 0; i < this.frictionEquations.length; i++) {
      solver.addEquation(this.frictionEquations[i]);
    }

    const ncontacts = contacts.length;

    for (let k = 0; k !== ncontacts; k++) {
      // Current contact
      const c = contacts[k]; // Get current collision indeces

      const bi = c.bi;
      const bj = c.bj;
      const si = c.si;
      const sj = c.sj; // Get collision properties

      let cm;

      if (bi.material && bj.material) {
        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;
      } else {
        cm = this.defaultContactMaterial;
      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;


      let mu = cm.friction; // c.restitution = cm.restitution;
      // If friction or restitution were specified in the material, use them

      if (bi.material && bj.material) {
        if (bi.material.friction >= 0 && bj.material.friction >= 0) {
          mu = bi.material.friction * bj.material.friction;
        }

        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {
          c.restitution = bi.material.restitution * bj.material.restitution;
        }
      } // c.setSpookParams(
      //           cm.contactEquationStiffness,
      //           cm.contactEquationRelaxation,
      //           dt
      //       );


      solver.addEquation(c); // // Add friction constraint equation
      // if(mu > 0){
      // 	// Create 2 tangent equations
      // 	const mug = mu * gnorm;
      // 	const reducedMass = (bi.invMass + bj.invMass);
      // 	if(reducedMass > 0){
      // 		reducedMass = 1/reducedMass;
      // 	}
      // 	const pool = frictionEquationPool;
      // 	const c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
      // 	const c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
      // 	this.frictionEquations.push(c1, c2);
      // 	c1.bi = c2.bi = bi;
      // 	c1.bj = c2.bj = bj;
      // 	c1.minForce = c2.minForce = -mug*reducedMass;
      // 	c1.maxForce = c2.maxForce = mug*reducedMass;
      // 	// Copy over the relative vectors
      // 	c1.ri.copy(c.ri);
      // 	c1.rj.copy(c.rj);
      // 	c2.ri.copy(c.ri);
      // 	c2.rj.copy(c.rj);
      // 	// Construct tangents
      // 	c.ni.tangents(c1.t, c2.t);
      //           // Set spook params
      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
      //           c1.enabled = c2.enabled = c.enabled;
      // 	// Add equations to solver
      // 	solver.addEquation(c1);
      // 	solver.addEquation(c2);
      // }

      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {
        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();
        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;

        if (speedSquaredB >= speedLimitSquaredB * 2) {
          bi.wakeUpAfterNarrowphase = true;
        }
      }

      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {
        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();
        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;

        if (speedSquaredA >= speedLimitSquaredA * 2) {
          bj.wakeUpAfterNarrowphase = true;
        }
      } // Now we know that i and j are in contact. Set collision matrix state


      this.collisionMatrix.set(bi, bj, true);

      if (!this.collisionMatrixPrevious.get(bi, bj)) {
        // First contact!
        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.
        World_step_collideEvent.body = bj;
        World_step_collideEvent.contact = c;
        bi.dispatchEvent(World_step_collideEvent);
        World_step_collideEvent.body = bi;
        bj.dispatchEvent(World_step_collideEvent);
      }

      this.bodyOverlapKeeper.set(bi.id, bj.id);
      this.shapeOverlapKeeper.set(si.id, sj.id);
    }

    this.emitContactEvents();

    if (doProfiling) {
      profile.makeContactConstraints = performance.now() - profilingStart;
      profilingStart = performance.now();
    } // Wake up bodies


    for (i = 0; i !== N; i++) {
      const bi = bodies[i];

      if (bi.wakeUpAfterNarrowphase) {
        bi.wakeUp();
        bi.wakeUpAfterNarrowphase = false;
      }
    } // Add user-added constraints


    Nconstraints = constraints.length;

    for (i = 0; i !== Nconstraints; i++) {
      const c = constraints[i];
      c.update();

      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {
        const eq = c.equations[j];
        solver.addEquation(eq);
      }
    } // Solve the constrained system


    solver.solve(dt, this);

    if (doProfiling) {
      profile.solve = performance.now() - profilingStart;
    } // Remove all contacts from solver


    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details

    const pow = Math.pow;

    for (i = 0; i !== N; i++) {
      const bi = bodies[i];

      if (bi.type & DYNAMIC) {
        // Only for dynamic bodies
        const ld = pow(1.0 - bi.linearDamping, dt);
        const v = bi.velocity;
        v.scale(ld, v);
        const av = bi.angularVelocity;

        if (av) {
          const ad = pow(1.0 - bi.angularDamping, dt);
          av.scale(ad, av);
        }
      }
    }

    this.dispatchEvent(World_step_preStepEvent); // Invoke pre-step callbacks

    for (i = 0; i !== N; i++) {
      const bi = bodies[i];

      if (bi.preStep) {
        bi.preStep.call(bi);
      }
    } // Leap frog
    // vnew = v + h*f/m
    // xnew = x + h*vnew


    if (doProfiling) {
      profilingStart = performance.now();
    }

    const stepnumber = this.stepnumber;
    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;
    const quatNormalizeFast = this.quatNormalizeFast;

    for (i = 0; i !== N; i++) {
      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);
    }

    this.clearForces();
    this.broadphase.dirty = true;

    if (doProfiling) {
      profile.integrate = performance.now() - profilingStart;
    } // Update world time


    this.time += dt;
    this.stepnumber += 1;
    this.dispatchEvent(World_step_postStepEvent); // Invoke post-step callbacks

    for (i = 0; i !== N; i++) {
      const bi = bodies[i];
      const postStep = bi.postStep;

      if (postStep) {
        postStep.call(bi);
      }
    } // Sleeping update


    let hasActiveBodies = true;

    if (this.allowSleep) {
      hasActiveBodies = false;

      for (i = 0; i !== N; i++) {
        const bi = bodies[i];
        bi.sleepTick(this.time);

        if (bi.sleepState !== Body.SLEEPING) {
          hasActiveBodies = true;
        }
      }
    }

    this.hasActiveBodies = hasActiveBodies;
  }
  /**
   * Sets all body forces in the world to zero.
   * @method clearForces
   */


  clearForces() {
    const bodies = this.bodies;
    const N = bodies.length;

    for (let i = 0; i !== N; i++) {
      const b = bodies[i];
      const force = b.force;
      const tau = b.torque;
      b.force.set(0, 0, 0);
      b.torque.set(0, 0, 0);
    }
  }

} // Temp stuff


const tmpAABB1 = new AABB();
const tmpRay$1 = new Ray(); // performance.now()

if (typeof performance === 'undefined') {
  performance = {};
}

if (!performance.now) {
  let nowOffset = Date.now();

  if (performance.timing && performance.timing.navigationStart) {
    nowOffset = performance.timing.navigationStart;
  }

  performance.now = () => Date.now() - nowOffset;
} // Reusable event objects to save memory.


const World_step_postStepEvent = {
  type: 'postStep'
}; // Dispatched before the world steps forward in time.

const World_step_preStepEvent = {
  type: 'preStep'
};
const World_step_collideEvent = {
  type: Body.COLLIDE_EVENT_NAME,
  body: null,
  contact: null
}; // Pools for unused objects

const World_step_oldContacts = [];
const World_step_frictionEquationPool = []; // Reusable arrays for collision pairs

const World_step_p1 = [];
const World_step_p2 = [];

World.prototype.emitContactEvents = (() => {
  const additions = [];
  const removals = [];
  const beginContactEvent = {
    type: 'beginContact',
    bodyA: null,
    bodyB: null
  };
  const endContactEvent = {
    type: 'endContact',
    bodyA: null,
    bodyB: null
  };
  const beginShapeContactEvent = {
    type: 'beginShapeContact',
    bodyA: null,
    bodyB: null,
    shapeA: null,
    shapeB: null
  };
  const endShapeContactEvent = {
    type: 'endShapeContact',
    bodyA: null,
    bodyB: null,
    shapeA: null,
    shapeB: null
  };
  return function () {
    const hasBeginContact = this.hasAnyEventListener('beginContact');
    const hasEndContact = this.hasAnyEventListener('endContact');

    if (hasBeginContact || hasEndContact) {
      this.bodyOverlapKeeper.getDiff(additions, removals);
    }

    if (hasBeginContact) {
      for (let i = 0, l = additions.length; i < l; i += 2) {
        beginContactEvent.bodyA = this.getBodyById(additions[i]);
        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);
        this.dispatchEvent(beginContactEvent);
      }

      beginContactEvent.bodyA = beginContactEvent.bodyB = null;
    }

    if (hasEndContact) {
      for (let i = 0, l = removals.length; i < l; i += 2) {
        endContactEvent.bodyA = this.getBodyById(removals[i]);
        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);
        this.dispatchEvent(endContactEvent);
      }

      endContactEvent.bodyA = endContactEvent.bodyB = null;
    }

    additions.length = removals.length = 0;
    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');
    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');

    if (hasBeginShapeContact || hasEndShapeContact) {
      this.shapeOverlapKeeper.getDiff(additions, removals);
    }

    if (hasBeginShapeContact) {
      for (let i = 0, l = additions.length; i < l; i += 2) {
        const shapeA = this.getShapeById(additions[i]);
        const shapeB = this.getShapeById(additions[i + 1]);
        beginShapeContactEvent.shapeA = shapeA;
        beginShapeContactEvent.shapeB = shapeB;
        beginShapeContactEvent.bodyA = shapeA.body;
        beginShapeContactEvent.bodyB = shapeB.body;
        this.dispatchEvent(beginShapeContactEvent);
      }

      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;
    }

    if (hasEndShapeContact) {
      for (let i = 0, l = removals.length; i < l; i += 2) {
        const shapeA = this.getShapeById(removals[i]);
        const shapeB = this.getShapeById(removals[i + 1]);
        endShapeContactEvent.shapeA = shapeA;
        endShapeContactEvent.shapeB = shapeB;
        endShapeContactEvent.bodyA = shapeA.body;
        endShapeContactEvent.bodyB = shapeB.body;
        this.dispatchEvent(endShapeContactEvent);
      }

      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;
    }
  };
})();

let bodies = {};
const springs = {};
const rays = {};
const world = new World();
const config = {
  step: 1 / 60
};
const subscriptions = {};
const tempVector = new Vec3();

function createShape(type, args) {
  switch (type) {
    case 'Box':
      return new Box(new Vec3(...args));
    // halfExtents

    case 'ConvexPolyhedron':
      const [v, f, n] = args;
      return new ConvexPolyhedron({
        vertices: v.map(([x, y, z]) => new Vec3(x, y, z)),
        normals: n ? n.map(([x, y, z]) => new Vec3(x, y, z)) : null,
        faces: f
      });

    case 'Cylinder':
      return new Cylinder(...args);
    // [ radiusTop, radiusBottom, height, numSegments ] = args

    case 'Heightfield':
      return new Heightfield(...args);
    // [ Array data, options: {minValue, maxValue, elementSize}  ] = args

    case 'Particle':
      return new Particle();
    // no args

    case 'Plane':
      return new Plane();
    // no args, infinite x and y

    case 'Sphere':
      return new Sphere(...args);
    // [radius] = args

    case 'Trimesh':
      return new Trimesh(...args);
    // [vertices, indices] = args
  }
}

function syncBodies() {
  self.postMessage({
    op: 'sync',
    bodies: world.bodies.map(body => body.uuid)
  });
  bodies = world.bodies.reduce((acc, body) => _extends({}, acc, {
    [body.uuid]: body
  }), {});
}

self.onmessage = e => {
  const {
    op,
    uuid,
    type,
    positions,
    quaternions,
    props
  } = e.data;

  switch (op) {
    case 'init':
      {
        const {
          gravity,
          tolerance,
          step,
          iterations,
          allowSleep,
          broadphase,
          axisIndex,
          defaultContactMaterial
        } = props;
        const broadphases = {
          NaiveBroadphase,
          SAPBroadphase
        };
        world.allowSleep = allowSleep;
        world.gravity.set(gravity[0], gravity[1], gravity[2]);
        world.solver.tolerance = tolerance;
        world.solver.iterations = iterations;
        world.broadphase = new (broadphases[broadphase + 'Broadphase'] || NaiveBroadphase)(world);
        world.broadphase.axisIndex = axisIndex != null ? axisIndex : 0;
        Object.assign(world.defaultContactMaterial, defaultContactMaterial);
        config.step = step;
        break;
      }

    case 'step':
      {
        world.step(config.step);
        const numberOfBodies = world.bodies.length;

        for (let i = 0; i < numberOfBodies; i++) {
          let b = world.bodies[i],
              p = b.position,
              q = b.quaternion;
          positions[3 * i + 0] = p.x;
          positions[3 * i + 1] = p.y;
          positions[3 * i + 2] = p.z;
          quaternions[4 * i + 0] = q.x;
          quaternions[4 * i + 1] = q.y;
          quaternions[4 * i + 2] = q.z;
          quaternions[4 * i + 3] = q.w;
        }

        const observations = [];

        for (const id of Object.keys(subscriptions)) {
          const [uuid, type] = subscriptions[id];
          let value = bodies[uuid][type];
          if (value instanceof Vec3) value = value.toArray();else if (value instanceof Quaternion) {
            value.toEuler(tempVector);
            value = tempVector.toArray();
          }
          observations.push([id, value]);
        }

        self.postMessage({
          op: 'frame',
          positions,
          quaternions,
          observations,
          active: world.hasActiveBodies
        }, [positions.buffer, quaternions.buffer]);
        break;
      }

    case 'addBodies':
      {
        for (let i = 0; i < uuid.length; i++) {
          const _props$i = props[i],
                {
            args = [],
            position = [0, 0, 0],
            rotation = [0, 0, 0],
            scale = [1, 1, 1],
            velocity = [0, 0, 0],
            angularVelocity = [0, 0, 0],
            linearFactor = [1, 1, 1],
            angularFactor = [1, 1, 1],
            type: bodyType,
            mass,
            material,
            shapes,
            onCollide
          } = _props$i,
                extra = _objectWithoutPropertiesLoose(_props$i, ["args", "position", "rotation", "scale", "velocity", "angularVelocity", "linearFactor", "angularFactor", "type", "mass", "material", "shapes", "onCollide"]);

          const body = new Body(_extends({}, extra, {
            mass: bodyType === 'Static' ? 0 : mass,
            type: bodyType ? Body[bodyType.toUpperCase()] : undefined,
            material: material ? new Material(material) : undefined
          }));
          body.uuid = uuid[i];

          if (type === 'Compound') {
            shapes.forEach((_ref) => {
              let {
                type,
                args,
                position,
                rotation,
                material
              } = _ref,
                  extra = _objectWithoutPropertiesLoose(_ref, ["type", "args", "position", "rotation", "material"]);

              const shapeBody = body.addShape(createShape(type, args), position ? new Vec3(...position) : undefined, rotation ? new Quaternion().setFromEuler(...rotation) : undefined);
              if (material) shapeBody.material = new Material(material);
              Object.assign(shapeBody, extra);
            });
          } else {
            body.addShape(createShape(type, args));
          }

          body.position.set(position[0], position[1], position[2]);
          body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2]);
          body.velocity.set(velocity[0], velocity[1], velocity[2]);
          body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2]);
          body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2]);
          body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2]);
          world.addBody(body);
          if (onCollide) body.addEventListener('collide', ({
            type,
            body,
            target,
            contact
          }) => {
            const {
              ni,
              ri,
              rj
            } = contact;
            self.postMessage({
              op: 'event',
              type,
              body: body.uuid,
              target: target.uuid,
              contact: {
                ni: ni.toArray(),
                ri: ri.toArray(),
                rj: rj.toArray(),
                impactVelocity: contact.getImpactVelocityAlongNormal()
              },
              collisionFilters: {
                bodyFilterGroup: body.collisionFilterGroup,
                bodyFilterMask: body.collisionFilterMask,
                targetFilterGroup: target.collisionFilterGroup,
                targetFilterMask: target.collisionFilterMask
              }
            });
          });
        }

        syncBodies();
        break;
      }

    case 'removeBodies':
      {
        for (let i = 0; i < uuid.length; i++) world.removeBody(bodies[uuid[i]]);

        syncBodies();
        break;
      }

    case 'subscribe':
      {
        const {
          id,
          type
        } = props;
        subscriptions[id] = [uuid, type];
        break;
      }

    case 'unsubscribe':
      {
        delete subscriptions[props];
        break;
      }

    case 'setPosition':
      bodies[uuid].position.set(props[0], props[1], props[2]);
      break;

    case 'setQuaternion':
      bodies[uuid].quaternion.setFromEuler(props[0], props[1], props[2]);
      break;

    case 'setVelocity':
      bodies[uuid].velocity.set(props[0], props[1], props[2]);
      break;

    case 'setAngularVelocity':
      bodies[uuid].angularVelocity.set(props[0], props[1], props[2]);
      break;

    case 'setLinearFactor':
      bodies[uuid].linearFactor.set(props[0], props[1], props[2]);
      break;

    case 'setAngularFactor':
      bodies[uuid].angularFactor.set(props[0], props[1], props[2]);
      break;

    case 'setMass':
      bodies[uuid].mass = props;
      break;

    case 'setLinearDamping':
      bodies[uuid].linearDamping = props;
      break;

    case 'setAngularDamping':
      bodies[uuid].angularDamping = props;
      break;

    case 'setAllowSleep':
      bodies[uuid].allowSleep = props;
      break;

    case 'setSleepSpeedLimit':
      bodies[uuid].sleepSpeedLimit = props;
      break;

    case 'setSleepTimeLimit':
      bodies[uuid].sleepTimeLimit = props;
      break;

    case 'setCollisionFilterGroup':
      bodies[uuid].collisionFilterGroup = props;
      break;

    case 'setCollisionFilterMask':
      bodies[uuid].collisionFilterMask = props;
      break;

    case 'setCollisionFilterMask':
      bodies[uuid].collisionFilterMask = props;
      break;

    case 'setFixedRotation':
      bodies[uuid].fixedRotation = props;
      break;

    case 'applyForce':
      bodies[uuid].applyForce(new Vec3(...props[0]), new Vec3(...props[1]));
      break;

    case 'applyImpulse':
      bodies[uuid].applyImpulse(new Vec3(...props[0]), new Vec3(...props[1]));
      break;

    case 'applyLocalForce':
      bodies[uuid].applyLocalForce(new Vec3(...props[0]), new Vec3(...props[1]));
      break;

    case 'applyLocalImpulse':
      bodies[uuid].applyLocalImpulse(new Vec3(...props[0]), new Vec3(...props[1]));
      break;

    case 'addConstraint':
      {
        const [bodyA, bodyB, optns] = props;

        let {
          pivotA,
          pivotB,
          axisA,
          axisB
        } = optns,
            options = _objectWithoutPropertiesLoose(optns, ["pivotA", "pivotB", "axisA", "axisB"]); // is there a better way to enforce defaults?


        pivotA = Array.isArray(pivotA) ? new Vec3(...pivotA) : undefined;
        pivotB = Array.isArray(pivotB) ? new Vec3(...pivotB) : undefined;
        axisA = Array.isArray(axisA) ? new Vec3(...axisA) : undefined;
        axisB = Array.isArray(axisB) ? new Vec3(...axisB) : undefined;
        let constraint;

        switch (type) {
          case 'PointToPoint':
            constraint = new PointToPointConstraint(bodies[bodyA], pivotA, bodies[bodyB], pivotB, optns.maxForce);
            break;

          case 'ConeTwist':
            constraint = new ConeTwistConstraint(bodies[bodyA], bodies[bodyB], _extends({
              pivotA,
              pivotB,
              axisA,
              axisB
            }, options));
            break;

          case 'Hinge':
            constraint = new HingeConstraint(bodies[bodyA], bodies[bodyB], _extends({
              pivotA,
              pivotB,
              axisA,
              axisB
            }, options));
            break;

          case 'Distance':
            constraint = new DistanceConstraint(bodies[bodyA], bodies[bodyB], optns.distance, optns.maxForce);
            break;

          case 'Lock':
            constraint = new LockConstraint(bodies[bodyA], bodies[bodyB], optns);
            break;

          default:
            constraint = new Constraint(bodies[bodyA], bodies[bodyB], optns);
            break;
        }

        constraint.uuid = uuid;
        world.addConstraint(constraint);
        break;
      }

    case 'removeConstraint':
      world.removeConstraint(uuid);
      break;

    case 'enableConstraint':
      world.constraints.filter(({
        uuid: thisId
      }) => thisId === uuid).map(c => c.enable());
      break;

    case 'disableConstraint':
      world.constraints.filter(({
        uuid: thisId
      }) => thisId === uuid).map(c => c.disable());
      break;

    case 'addSpring':
      {
        const [bodyA, bodyB, optns] = props;
        let {
          worldAnchorA,
          worldAnchorB,
          localAnchorA,
          localAnchorB,
          restLength,
          stiffness,
          damping
        } = optns;
        worldAnchorA = Array.isArray(worldAnchorA) ? new Vec3(...worldAnchorA) : undefined;
        worldAnchorB = Array.isArray(worldAnchorB) ? new Vec3(...worldAnchorB) : undefined;
        localAnchorA = Array.isArray(localAnchorA) ? new Vec3(...localAnchorA) : undefined;
        localAnchorB = Array.isArray(localAnchorB) ? new Vec3(...localAnchorB) : undefined;
        let spring = new Spring(bodies[bodyA], bodies[bodyB], {
          worldAnchorA,
          worldAnchorB,
          localAnchorA,
          localAnchorB,
          restLength,
          stiffness,
          damping
        });
        spring.uuid = uuid;

        let postStepSpring = e => spring.applyForce();

        springs[uuid] = postStepSpring; // Compute the force after each step

        world.addEventListener('postStep', springs[uuid]);
        break;
      }

    case 'removeSpring':
      {
        world.removeEventListener('postStep', springs[uuid]);
        break;
      }

    case 'addRay':
      {
        const {
          from,
          to
        } = props,
              options = _objectWithoutPropertiesLoose(props, ["from", "to"]);

        const ray = new Ray(from ? new Vec3(...from) : undefined, to ? new Vec3(...to) : undefined);
        options.mode = Ray[options.mode.toUpperCase()];
        options.result = new RaycastResult();

        rays[uuid] = () => {
          ray.intersectWorld(world, options);

          const _options$result = options.result,
                {
            body,
            shape,
            rayFromWorld,
            rayToWorld,
            hitNormalWorld,
            hitPointWorld
          } = _options$result,
                rest = _objectWithoutPropertiesLoose(_options$result, ["body", "shape", "rayFromWorld", "rayToWorld", "hitNormalWorld", "hitPointWorld"]);

          self.postMessage(_extends({
            op: 'event',
            type: 'rayhit',
            ray: {
              from,
              to,
              direction: ray.direction.toArray(),
              collisionFilterGroup: ray.collisionFilterGroup,
              collisionFilterMask: ray.collisionFilterMask,
              uuid
            },
            body: body ? body.uuid : null,
            shape: shape ? _extends({}, shape, {
              body: body.uuid
            }) : null,
            rayFromWorld: rayFromWorld.toArray(),
            rayToWorld: rayToWorld.toArray(),
            hitNormalWorld: hitNormalWorld.toArray(),
            hitPointWorld: hitPointWorld.toArray()
          }, rest));
        };

        world.addEventListener('preStep', rays[uuid]);
        break;
      }

    case 'removeRay':
      {
        world.removeEventListener('preStep', rays[uuid]);
        delete rays[uuid];
        break;
      }
  }
};

', 'data:application/json;charset=utf-8;base64,{"version":3,"file":"worker.js","sources":["node_modules/cannon-es/dist/cannon-es.js","src/worker.js"],"sourcesContent":["/**\r\n * Records what objects are colliding with each other\r\n * @class ObjectCollisionMatrix\r\n * @constructor\r\n */\nclass ObjectCollisionMatrix {\n  // The matrix storage.\n  constructor() {\n    this.matrix = {};\n  }\n  /**\r\n   * @method get\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @return {boolean}\r\n   */\n\n\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i + \"-\" + j in this.matrix;\n  }\n  /**\r\n   * @method set\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @param {boolean} value\r\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    if (value) {\n      this.matrix[i + \"-\" + j] = true;\n    } else {\n      delete this.matrix[i + \"-\" + j];\n    }\n  }\n  /**\r\n   * Empty the matrix\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    this.matrix = {};\n  }\n  /**\r\n   * Set max number of objects\r\n   * @method setNumObjects\r\n   * @param {Number} n\r\n   */\n\n\n  setNumObjects(n) {}\n\n}\n\n/**\r\n * A 3x3 matrix.\r\n * @class Mat3\r\n * @constructor\r\n * @param {Array} elements A vector of length 9, containing all matrix elements. Optional.\r\n * @author schteppe / http://github.com/schteppe\r\n */\nclass Mat3 {\n  constructor(elements = [0, 0, 0, 0, 0, 0, 0, 0, 0]) {\n    this.elements = elements;\n  }\n  /**\r\n   * Sets the matrix to identity\r\n   * @method identity\r\n   * @todo Should perhaps be renamed to setIdentity() to be more clear.\r\n   * @todo Create another function that immediately creates an identity matrix eg. eye()\r\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\r\n   * Set all elements to zero\r\n   * @method setZero\r\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\r\n   * Sets the matrix diagonal elements from a Vec3\r\n   * @method setTrace\r\n   * @param {Vec3} vec3\r\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\r\n   * Gets the matrix diagonal elements\r\n   * @method getTrace\r\n   * @return {Vec3}\r\n   */\n\n\n  getTrace(target = new Vec3()) {\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n  }\n  /**\r\n   * Matrix-Vector multiplication\r\n   * @method vmult\r\n   * @param {Vec3} v The vector to multiply with\r\n   * @param {Vec3} target Optional, target to save the result in.\r\n   */\n\n\n  vmult(v, target = new Vec3()) {\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\r\n   * Matrix-scalar multiplication\r\n   * @method smult\r\n   * @param {Number} s\r\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\r\n   * Matrix multiplication\r\n   * @method mmult\r\n   * @param {Mat3} matrix Matrix to multiply with from left side.\r\n   * @return {Mat3} The result.\r\n   */\n\n\n  mmult(matrix, target = new Mat3()) {\n    const {\n      elements\n    } = matrix;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let sum = 0.0;\n\n        for (let k = 0; k < 3; k++) {\n          sum += elements[i + k * 3] * this.elements[k + j * 3];\n        }\n\n        target.elements[i + j * 3] = sum;\n      }\n    }\n\n    return target;\n  }\n  /**\r\n   * Scale each column of the matrix\r\n   * @method scale\r\n   * @param {Vec3} v\r\n   * @return {Mat3} The result.\r\n   */\n\n\n  scale(vector, target = new Mat3()) {\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\r\n   * Solve Ax=b\r\n   * @method solve\r\n   * @param {Vec3} b The right hand side\r\n   * @param {Vec3} target Optional. Target vector to save in.\r\n   * @return {Vec3} The solution x\r\n   * @todo should reuse arrays\r\n   */\n\n\n  solve(b, target = new Vec3()) {\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw \"Could not solve equation! Got x=[\" + target.toString() + \"], b=[\" + b.toString() + \"], A=[\" + this.toString() + \"]\";\n    }\n\n    return target;\n  }\n  /**\r\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\r\n   * @method e\r\n   * @param {Number} row\r\n   * @param {Number} column\r\n   * @param {Number} value Optional. If provided, the matrix element will be set to this value.\r\n   * @return {Number}\r\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\r\n   * Copy another matrix into this matrix object.\r\n   * @method copy\r\n   * @param {Mat3} source\r\n   * @return {Mat3} this\r\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns a string representation of the matrix.\r\n   * @method toString\r\n   * @return string\r\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\r\n   * reverse the matrix\r\n   * @method reverse\r\n   * @param {Mat3} target Optional. Target matrix to save in.\r\n   * @return {Mat3} The solution x\r\n   */\n\n\n  reverse(target = new Mat3()) {\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw \"Could not reverse! A=[\" + this.toString() + \"]\";\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\r\n   * Set the matrix from a quaterion\r\n   * @method setRotationFromQuaternion\r\n   * @param {Quaternion} q\r\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\r\n   * Transpose the matrix\r\n   * @method transpose\r\n   * @param  {Mat3} target Optional. Where to store the result.\r\n   * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\r\n   */\n\n\n  transpose(target = new Mat3()) {\n    const Mt = target.elements;\n    const M = this.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      for (let j = 0; j !== 3; j++) {\n        Mt[3 * i + j] = M[3 * j + i];\n      }\n    }\n\n    return target;\n  }\n\n}\n\n/**\r\n * 3-dimensional vector\r\n * @class Vec3\r\n * @constructor\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} z\r\n * @author schteppe\r\n * @example\r\n *     const v = new Vec3(1, 2, 3);\r\n *     console.log('x=' + v.x); // x=1\r\n */\n\nclass Vec3 {\n  constructor(x = 0.0, y = 0.0, z = 0.0) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\r\n   * Vector cross product\r\n   * @method cross\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional. Target to save in.\r\n   * @return {Vec3}\r\n   */\n\n\n  cross(vector, target = new Vec3()) {\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\r\n   * Set the vectors' 3 elements\r\n   * @method set\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} z\r\n   * @return Vec3\r\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\r\n   * Set all components of the vector to zero.\r\n   * @method setZero\r\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\r\n   * Vector addition\r\n   * @method vadd\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional.\r\n   * @return {Vec3}\r\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\r\n   * Vector subtraction\r\n   * @method vsub\r\n   * @param {Vec3} v\r\n   * @param {Vec3} target Optional. Target to save in.\r\n   * @return {Vec3}\r\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\r\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\r\n   * @method crossmat\r\n   * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\r\n   * @return {Mat3}\r\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\r\n   * Normalize the vector. Note that this changes the values in the vector.\r\n   * @method normalize\r\n   * @return {Number} Returns the norm of the vector\r\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\r\n   * Get the version of this vector that is of length 1.\r\n   * @method unit\r\n   * @param {Vec3} target Optional target to save in\r\n   * @return {Vec3} Returns the unit vector\r\n   */\n\n\n  unit(target = new Vec3()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\r\n   * Get the length of the vector\r\n   * @method length\r\n   * @return {Number}\r\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\r\n   * Get the squared length of the vector.\r\n   * @method lengthSquared\r\n   * @return {Number}\r\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\r\n   * Get distance from this point to another point\r\n   * @method distanceTo\r\n   * @param  {Vec3} p\r\n   * @return {Number}\r\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\r\n   * Get squared distance from this point to another point\r\n   * @method distanceSquared\r\n   * @param  {Vec3} p\r\n   * @return {Number}\r\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\r\n   * Multiply all the components of the vector with a scalar.\r\n   * @method scale\r\n   * @param {Number} scalar\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  scale(scalar, target = new Vec3()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\r\n   * Multiply the vector with an other vector, component-wise.\r\n   * @method vmult\r\n   * @param {Number} vector\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  vmul(vector, target = new Vec3()) {\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\r\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\r\n   * @method addScaledVector\r\n   * @param {Number} scalar\r\n   * @param {Vec3} vector\r\n   * @param {Vec3} target The vector to save the result in.\r\n   * @return {Vec3}\r\n   */\n\n\n  addScaledVector(scalar, vector, target = new Vec3()) {\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\r\n   * Calculate dot product\r\n   * @method dot\r\n   * @param {Vec3} v\r\n   * @return {Number}\r\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n  /**\r\n   * @method isZero\r\n   * @return bool\r\n   */\n\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\r\n   * Make the vector point in the opposite direction.\r\n   * @method negate\r\n   * @param {Vec3} target Optional target to save in\r\n   * @return {Vec3}\r\n   */\n\n\n  negate(target = new Vec3()) {\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\r\n   * Compute two artificial tangents to the vector\r\n   * @method tangents\r\n   * @param {Vec3} t1 Vector object to save the first tangent in\r\n   * @param {Vec3} t2 Vector object to save the second tangent in\r\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\r\n   * Converts to a more readable format\r\n   * @method toString\r\n   * @return string\r\n   */\n\n\n  toString() {\n    return this.x + \",\" + this.y + \",\" + this.z;\n  }\n  /**\r\n   * Converts to an array\r\n   * @method toArray\r\n   * @return Array\r\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\r\n   * Copies value of source to this vector.\r\n   * @method copy\r\n   * @param {Vec3} source\r\n   * @return {Vec3} this\r\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\r\n   * Do a linear interpolation between two vectors\r\n   * @method lerp\r\n   * @param {Vec3} v\r\n   * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\r\n   * @param {Vec3} target\r\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\r\n   * Check if a vector equals is almost equal to another one.\r\n   * @method almostEquals\r\n   * @param {Vec3} v\r\n   * @param {Number} precision\r\n   * @return bool\r\n   */\n\n\n  almostEquals(vector, precision = 1e-6) {\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if a vector is almost zero\r\n   * @method almostZero\r\n   * @param {Number} precision\r\n   */\n\n\n  almostZero(precision = 1e-6) {\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * Check if the vector is anti-parallel to another vector.\r\n   * @method isAntiparallelTo\r\n   * @param  {Vec3}  v\r\n   * @param  {Number}  precision Set to zero for exact comparisons\r\n   * @return {Boolean}\r\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\r\n   * Clone the vector\r\n   * @method clone\r\n   * @return {Vec3}\r\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n/**\r\n * Compute two artificial tangents to the vector\r\n * @method tangents\r\n * @param {Vec3} t1 Vector object to save the first tangent in\r\n * @param {Vec3} t2 Vector object to save the second tangent in\r\n */\n\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\r\n * Axis aligned bounding box class.\r\n * @class AABB\r\n * @constructor\r\n * @param {Object} [options]\r\n * @param {Vec3}   [options.upperBound] The upper bound of the bounding box.\r\n * @param {Vec3}   [options.lowerBound] The lower bound of the bounding box\r\n */\nclass AABB {\n  // The lower bound of the bounding box\n  // The upper bound of the bounding box\n  constructor(options = {}) {\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\r\n   * Set the AABB bounds from a set of points.\r\n   * @method setFromPoints\r\n   * @param {Array} points An array of Vec3's.\r\n   * @param {Vec3} position Optional.\r\n   * @param {Quaternion} quaternion Optional.\r\n   * @param {number} skinSize Optional.\r\n   * @return {AABB} The self object\r\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp);\n        p = tmp;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\r\n   * Copy bounds from an AABB to this AABB\r\n   * @method copy\r\n   * @param  {AABB} aabb Source to copy from\r\n   * @return {AABB} The this object, for chainability\r\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\r\n   * Clone an AABB\r\n   * @method clone\r\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\r\n   * Extend this AABB so that it covers the given AABB too.\r\n   * @method extend\r\n   * @param  {AABB} aabb\r\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\r\n   * Returns true if the given AABB overlaps this AABB.\r\n   * @method overlaps\r\n   * @param  {AABB} aabb\r\n   * @return {Boolean}\r\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\r\n   * Returns true if the given AABB is fully contained in this AABB.\r\n   * @method contains\r\n   * @param {AABB} aabb\r\n   * @return {Boolean}\r\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n  /**\r\n   * @method getCorners\r\n   * @param {Vec3} a\r\n   * @param {Vec3} b\r\n   * @param {Vec3} c\r\n   * @param {Vec3} d\r\n   * @param {Vec3} e\r\n   * @param {Vec3} f\r\n   * @param {Vec3} g\r\n   * @param {Vec3} h\r\n   */\n\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\r\n   * Get the representation of an AABB in another frame.\r\n   * @method toLocalFrame\r\n   * @param  {Transform} frame\r\n   * @param  {AABB} target\r\n   * @return {AABB} The \"target\" AABB object.\r\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\r\n   * Get the representation of an AABB in the global frame.\r\n   * @method toWorldFrame\r\n   * @param  {Transform} frame\r\n   * @param  {AABB} target\r\n   * @return {AABB} The \"target\" AABB object.\r\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\r\n   * Check if the AABB is hit by a ray.\r\n   * @param  {Ray} ray\r\n   * @return {Boolean}\r\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray;\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\r\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\r\n * @class ArrayCollisionMatrix\r\n * @constructor\r\n */\nclass ArrayCollisionMatrix {\n  // The matrix storage.\n  constructor() {\n    this.matrix = [];\n  }\n  /**\r\n   * Get an element\r\n   * @method get\r\n   * @param  {Body} i\r\n   * @param  {Body} j\r\n   * @return {Number}\r\n   */\n\n\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  /**\r\n   * Set an element\r\n   * @method set\r\n   * @param {Body} i\r\n   * @param {Body} j\r\n   * @param {boolean} value\r\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  /**\r\n   * Sets all elements to zero\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  /**\r\n   * Sets the max number of objects\r\n   * @method setNumObjects\r\n   * @param {Number} n\r\n   */\n\n\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n\n}\n\n/**\r\n * Base class for objects that dispatches events.\r\n * @class EventTarget\r\n * @constructor\r\n */\nclass EventTarget {\n  constructor() {}\n  /**\r\n   * Add an event listener\r\n   * @method addEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\r\n   * Check if an event listener is added\r\n   * @method hasEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {Boolean}\r\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * Check if any event listener of the given type is added\r\n   * @method hasAnyEventListener\r\n   * @param  {String} type\r\n   * @return {Boolean}\r\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\r\n   * Remove an event listener\r\n   * @method removeEventListener\r\n   * @param  {String} type\r\n   * @param  {Function} listener\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\r\n   * Emit an event.\r\n   * @method dispatchEvent\r\n   * @param  {Object} event\r\n   * @param  {String} event.type\r\n   * @return {EventTarget} The self object, for chainability.\r\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return {String} \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return this.x + \",\" + this.y + \",\" + this.z + \",\" + this.w;\n  }\n  /**\n   * Convert to an Array\n   * @return {Array} [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param {Vec3} [targetAxis] A vector object to reuse for storing the axis.\n   * @return {Array} An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis = new Vec3()) {\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target = new Quaternion()) {\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target = new Quaternion()) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target = new Quaternion()) {\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   * @method normalize\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @see http://jsperf.com/fast-quaternion-normalization\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target = new Vec3()) {\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @method copy\n   * @param {Quaternion} source\n   * @return {Quaternion} this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n   * @method toEuler\n   * @param {Vec3} target\n   * @param {String} order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order = 'YZX') {\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(\"Euler order \" + order + \" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} z\n   * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n   * @see http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n   */\n\n\n  setFromEuler(x, y, z, order = 'XYZ') {\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n  /**\n   * @method clone\n   * @return {Quaternion}\n   */\n\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param {Quaternion} toQuat second operand\n   * @param {Number} t interpolation amount between the self quaternion and toQuat\n   * @param {Quaternion} [target] A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target = new Quaternion()) {\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target = new Quaternion()) {\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\nconst SHAPE_TYPES = {\n  SPHERE: 1,\n  PLANE: 2,\n  BOX: 4,\n  COMPOUND: 8,\n  CONVEXPOLYHEDRON: 16,\n  HEIGHTFIELD: 32,\n  PARTICLE: 64,\n  CYLINDER: 128,\n  TRIMESH: 256\n};\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @param {object} [options]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=-1]\n * @param {number} [options.collisionResponse=true]\n * @param {number} [options.material=null]\n * @author schteppe\n */\nclass Shape {\n  // Identifyer of the Shape.\n  // The type of this shape. Must be set to an int > 0 by subclasses.\n  // The local bounding sphere radius of this shape.\n  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n  constructor(options = {}) {\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n   * @method updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw \"computeBoundingSphereRadius() not implemented for shape type \" + this.type;\n  }\n  /**\n   * Get the volume of this shape\n   * @method volume\n   * @return {Number}\n   */\n\n\n  volume() {\n    throw \"volume() not implemented for shape type \" + this.type;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @method calculateLocalInertia\n   * @param {Number} mass\n   * @param {Vec3} target\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw \"calculateLocalInertia() not implemented for shape type \" + this.type;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw \"calculateWorldAABB() not implemented for shape type \" + this.type;\n  }\n\n}\nShape.idCounter = 0;\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\n\nShape.types = SHAPE_TYPES;\n\nclass Transform {\n  constructor(options = {}) {\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\r\n   * Get a global point in local transform coordinates.\r\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\r\n   * Get a local point in global transform coordinates.\r\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n\n  vectorToWorldFrame(localVector, result = new Vec3()) {\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result = new Vec3()) {\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n  }\n\n  static pointToWorldFrame(position, quaternion, localPoint, result = new Vec3()) {\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n\n  static vectorToWorldFrame(quaternion, localVector, result = new Vec3()) {\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result = new Vec3()) {\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat = new Quaternion();\n\n/**\r\n * A set of polygons describing a convex shape.\r\n * @class ConvexPolyhedron\r\n * @constructor\r\n * @extends Shape\r\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\r\n * in the same 3D plane), instead these should be merged into one polygon.\r\n *\r\n * @param {array} points An array of Vec3's\r\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\r\n *\r\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\r\n * @author schteppe / https://github.com/schteppe\r\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\r\n *\r\n * @todo Move the clipping functions to ContactGenerator?\r\n * @todo Automatically merge coplanar polygons in constructor.\r\n */\nclass ConvexPolyhedron extends Shape {\n  // Array of integer arrays, indicating which vertices each face consists of\n  // If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n  constructor(props = {}) {\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\r\n   * Computes uniqueEdges\r\n   * @method computeEdges\r\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\r\n   * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\r\n   * @method computeNormals\r\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(\"Vertex \" + this.faces[i][j] + \" not found!\");\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(\".faceNormals[\" + i + \"] = Vec3(\" + n.toString() + \") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(\".vertices[\" + this.faces[i][j] + \"] = Vec3(\" + this.vertices[this.faces[i][j]].toString() + \")\");\n        }\n      }\n    }\n  }\n  /**\r\n   * Compute the normal of a face from its vertices\r\n   * @method getFaceNormal\r\n   * @param  {Number} i\r\n   * @param  {Vec3} target\r\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\r\n   * @method clipAgainstHull\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @param {Vec3} separatingNormal\r\n   * @param {Number} minDist Clamp distance\r\n   * @param {Number} maxDist\r\n   * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\r\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\r\n   * Find the separating axis between this hull and another\r\n   * @method findSeparatingAxis\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @param {Vec3} target The target vector to save the axis in\r\n   * @return {bool} Returns false if a separation is found, else true\r\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\r\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\r\n   * @method testSepAxis\r\n   * @param {Vec3} axis\r\n   * @param {ConvexPolyhedron} hullB\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Vec3} posB\r\n   * @param {Quaternion} quatB\r\n   * @return {number} The overlap depth, or FALSE if no penetration.\r\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\r\n   * @method getPlaneConstantOfFace\r\n   * @param  {Number} face_i Index of the face\r\n   * @return {Number}\r\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\r\n   * Clip a face against a hull.\r\n   * @method clipFaceAgainstHull\r\n   * @param {Vec3} separatingNormal\r\n   * @param {Vec3} posA\r\n   * @param {Quaternion} quatA\r\n   * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\r\n   * @param {Number} minDist Distance clamping\r\n   * @param {Number} maxDist\r\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\r\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(\"clamped: depth=\" + depth + \" to minDist=\" + minDist);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\r\n   * Clip a face in a hull against the back of a plane.\r\n   * @method clipFaceAgainstPlane\r\n   * @param {Array} inVertices\r\n   * @param {Array} outVertices\r\n   * @param {Vec3} planeNormal\r\n   * @param {Number} planeConstant The constant in the mathematical plane equation\r\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  } // Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\r\n   * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\r\n   * @method computeWorldFaceNormals\r\n   * @param  {Quaternion} quat\r\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\r\n   * @method updateBoundingSphereRadius\r\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\r\n   * @method calculateWorldAABB\r\n   * @param {Vec3}        pos\r\n   * @param {Quaternion}  quat\r\n   * @param {Vec3}        min\r\n   * @param {Vec3}        max\r\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\r\n   * Get approximate convex volume\r\n   * @method volume\r\n   * @return {Number}\r\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\r\n   * Get an average of all the vertices positions\r\n   * @method getAveragePointLocal\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  getAveragePointLocal(target = new Vec3()) {\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\r\n   * Transform all local points. Will change the .vertices\r\n   * @method transformAllPoints\r\n   * @param  {Vec3} offset\r\n   * @param  {Quaternion} quat\r\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\r\n            // Rotate edges\r\n            for(let i=0; i<this.uniqueEdges.length; i++){\r\n                const v = this.uniqueEdges[i];\r\n                quat.vmult(v,v);\r\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\r\n   * Checks whether p is inside the polyhedra. Must be in local coords.\r\n   * The point lies outside of the convex hull of the other points if and only if the direction\r\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\r\n   * @method pointIsInside\r\n   * @param  {Vec3} p      A point given in local coordinates\r\n   * @return {Boolean}\r\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return  -1;\n  }\n\n}\n/**\r\n * Get face normal given 3 vertices\r\n * @static\r\n * @method computeNormal\r\n * @param {Vec3} va\r\n * @param {Vec3} vb\r\n * @param {Vec3} vc\r\n * @param {Vec3} target\r\n */\n\nConvexPolyhedron.computeNormal = (va, vb, vc, target) => {\n  const cb = new Vec3();\n  const ab = new Vec3();\n  vb.vsub(va, ab);\n  vc.vsub(vb, cb);\n  cb.cross(ab, target);\n\n  if (!target.isZero()) {\n    target.normalize();\n  }\n};\n\nconst maxminA = [];\nconst maxminB = [];\n/**\r\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\r\n * Results are saved in the array maxmin.\r\n * @static\r\n * @method project\r\n * @param {ConvexPolyhedron} hull\r\n * @param {Vec3} axis\r\n * @param {Vec3} pos\r\n * @param {Quaternion} quat\r\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\r\n */\n\nConvexPolyhedron.project = (shape, axis, pos, quat, result) => {\n  const n = shape.vertices.length;\n  const localAxis = new Vec3();\n  let max = 0;\n  let min = 0;\n  const localOrigin = new Vec3();\n  const vs = shape.vertices;\n  localOrigin.setZero(); // Transform the axis to local\n\n  Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n  Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n  const add = localOrigin.dot(localAxis);\n  min = max = vs[0].dot(localAxis);\n\n  for (let i = 1; i < n; i++) {\n    const val = vs[i].dot(localAxis);\n\n    if (val > max) {\n      max = val;\n    }\n\n    if (val < min) {\n      min = val;\n    }\n  }\n\n  min -= add;\n  max -= add;\n\n  if (min > max) {\n    // Inconsistent - swap\n    const temp = min;\n    min = max;\n    max = temp;\n  } // Output\n\n\n  result[0] = max;\n  result[1] = min;\n};\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nclass Box extends Shape {\n  // Used by the contact generator to make contacts with other convex polyhedra for example.\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   * @method updateConvexPolyhedronRepresentation\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\n   * @method calculateLocalInertia\n   * @param  {Number} mass\n   * @param  {Vec3} target\n   * @return {Vec3}\n   */\n\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n  /**\n   * Get the box 6 side normals\n   * @method getSideNormals\n   * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   * @return {array}\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\n\nBox.calculateInertia = (halfExtents, mass, target) => {\n  const e = halfExtents;\n  target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n  target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n  target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n};\n\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\nconst BODY_TYPES = {\n  DYNAMIC: 1,\n  STATIC: 2,\n  KINEMATIC: 4\n};\nconst BODY_SLEEP_STATES = {\n  AWAKE: 0,\n  SLEEPY: 1,\n  SLEEPING: 2\n};\n\n/**\r\n * Base class for all body types.\r\n * @class Body\r\n * @constructor\r\n * @extends EventTarget\r\n * @param {object} [options]\r\n * @param {Vec3} [options.position]\r\n * @param {Vec3} [options.velocity]\r\n * @param {Vec3} [options.angularVelocity]\r\n * @param {Quaternion} [options.quaternion]\r\n * @param {number} [options.mass]\r\n * @param {Material} [options.material]\r\n * @param {number} [options.type]\r\n * @param {number} [options.linearDamping=0.01]\r\n * @param {number} [options.angularDamping=0.01]\r\n * @param {boolean} [options.allowSleep=true]\r\n * @param {number} [options.sleepSpeedLimit=0.1]\r\n * @param {number} [options.sleepTimeLimit=1]\r\n * @param {number} [options.collisionFilterGroup=1]\r\n * @param {number} [options.collisionFilterMask=-1]\r\n * @param {boolean} [options.fixedRotation=false]\r\n * @param {Vec3} [options.linearFactor]\r\n * @param {Vec3} [options.angularFactor]\r\n * @param {Shape} [options.shape]\r\n * @example\r\n *     const body = new Body({\r\n *         mass: 1\r\n *     });\r\n *     const shape = new Sphere(1);\r\n *     body.addShape(shape);\r\n *     world.addBody(body);\r\n */\nclass Body extends EventTarget {\n  // Position of body in World.bodies. Updated by World and used in ArrayCollisionMatrix.\n  // Reference to the world the body is living in.\n  // Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object. Deprecated - use World events instead.\n  // Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object. Deprecated - use World events instead.\n  // Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled - i.e. \"collide\" events will be raised, but forces will not be altered.\n  // World space position of the body.\n  // Interpolated position of the body.\n  // Initial position of the body.\n  // World space velocity of the body.\n  // Linear force on the body in world space.\n  // One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n  // If true, the body will automatically fall to sleep.\n  // Current sleep state.\n  // If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n  // If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n  // World space rotational force on the body, around center of mass.\n  // World space orientation of the body.\n  // Interpolated orientation of the body.\n  // Angular velocity of the body, in world space. Think of the angular velocity as a vector, which the body rotates around. The length of this vector determines how fast (in radians per second) the body rotates.\n  // Position of each Shape in the body, given in local Body space.\n  // Orientation of each Shape, given in local Body space.\n  // Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n  // Use this property to limit the motion along any world axis. (1,1,1) will allow motion along all axes while (0,0,0) allows none.\n  // Use this property to limit the rotational motion along any world axis. (1,1,1) will allow rotation along all axes while (0,0,0) allows none.\n  // World space bounding box of the body and its shapes.\n  // Indicates if the AABB needs to be updated before use.\n  // Total bounding radius of the Body including its shapes, relative to body.position.\n  constructor(options = {}) {\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.preStep = null;\n    this.postStep = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = 0;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\r\n   * Wake the body up.\r\n   * @method wakeUp\r\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = 0;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\r\n   * Force body sleep\r\n   * @method sleep\r\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\r\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\r\n   * @method sleepTick\r\n   * @param {Number} time The world time in seconds\r\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\r\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\r\n   * @method updateSolveMassProperties\r\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\r\n   * Convert a world point to local body frame.\r\n   * @method pointToLocalFrame\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  pointToLocalFrame(worldPoint, result = new Vec3()) {\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\r\n   * Convert a world vector to local body frame.\r\n   * @method vectorToLocalFrame\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  vectorToLocalFrame(worldVector, result = new Vec3()) {\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\r\n   * Convert a local body point to world frame.\r\n   * @method pointToWorldFrame\r\n   * @param  {Vec3} localPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  pointToWorldFrame(localPoint, result = new Vec3()) {\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\r\n   * Convert a local body point to world frame.\r\n   * @method vectorToWorldFrame\r\n   * @param  {Vec3} localVector\r\n   * @param  {Vec3} result\r\n   * @return {Vec3}\r\n   */\n\n\n  vectorToWorldFrame(localVector, result = new Vec3()) {\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\r\n   * Add a shape to the body with a local offset and orientation.\r\n   * @method addShape\r\n   * @param {Shape} shape\r\n   * @param {Vec3} [_offset]\r\n   * @param {Quaternion} [_orientation]\r\n   * @return {Body} The body object, for chainability.\r\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\r\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\r\n   * @method updateBoundingRadius\r\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\r\n   * Updates the .aabb\r\n   * @method computeAABB\r\n   * @todo rename to updateAABB()\r\n   */\n\n\n  computeAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat$1;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = computeAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\r\n   * Update .inertiaWorld and .invInertiaWorld\r\n   * @method updateInertiaWorld\r\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n\n  applyForce(force, relativePoint) {\n    if (this.type !== Body.DYNAMIC) {\n      // Needed?\n      return;\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n\n  applyLocalForce(localForce, localPoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n\n  applyImpulse(impulse, relativePoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\r\n     rotVelo.x *= this.invInertia.x;\r\n     rotVelo.y *= this.invInertia.y;\r\n     rotVelo.z *= this.invInertia.z;\r\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\r\n   * Should be called whenever you change the body shape or mass.\r\n   * @method updateMassProperties\r\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.computeAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\r\n   * Get world velocity of a point in the body.\r\n   * @method getVelocityAtWorldPoint\r\n   * @param  {Vec3} worldPoint\r\n   * @param  {Vec3} result\r\n   * @return {Vec3} The result vector.\r\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\r\n   * Move the body forward in time.\r\n   * @param {number} dt Time step\r\n   * @param {boolean} quatNormalize Set to true to normalize the body quaternion\r\n   * @param {boolean} quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\r\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\n/**\r\n * Dispatched after two bodies collide. This event is dispatched on each\r\n * of the two bodies involved in the collision.\r\n * @event collide\r\n * @param {Body} body The body that was involved in the collision.\r\n * @param {ContactEquation} contact The details of the collision.\r\n */\n\nBody.COLLIDE_EVENT_NAME = 'collide';\n/**\r\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\r\n * @static\r\n * @property DYNAMIC\r\n * @type {Number}\r\n */\n\nBody.DYNAMIC = 1;\n/**\r\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\r\n * @static\r\n * @property STATIC\r\n * @type {Number}\r\n */\n\nBody.STATIC = 2;\n/**\r\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\r\n * @static\r\n * @property KINEMATIC\r\n * @type {Number}\r\n */\n\nBody.KINEMATIC = 4;\n/**\r\n * @static\r\n * @property AWAKE\r\n * @type {number}\r\n */\n\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.idCounter = 0;\n/**\r\n * Dispatched after a sleeping body has woken up.\r\n * @event wakeup\r\n */\n\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\n/**\r\n * Dispatched after a body has gone in to the sleepy state.\r\n * @event sleepy\r\n */\n\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\n/**\r\n * Dispatched after a body has fallen asleep.\r\n * @event sleep\r\n */\n\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3();\nconst tmpQuat$1 = new Quaternion();\nconst computeAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\n/**\r\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\r\n * @method applyForce\r\n * @param  {Vec3} force The amount of force to add.\r\n * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.\r\n */\n\nconst Body_applyForce_rotForce = new Vec3();\n/**\r\n * Apply force to a local point in the body.\r\n * @method applyLocalForce\r\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\r\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\r\n */\n\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\n/**\r\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\r\n * @method applyImpulse\r\n * @param  {Vec3} impulse The amount of impulse to add.\r\n * @param  {Vec3} relativePoint A point relative to the center of mass to apply the force on.\r\n */\n\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\n/**\r\n * Apply locally-defined impulse to a local point in the body.\r\n * @method applyLocalImpulse\r\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\r\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\r\n */\n\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nclass Broadphase {\n  // The world to search for collisions in.\n  // If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n  // Set to true if the objects in the world moved.\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\n   * Get the collision pairs from the world\n   * @method collisionPairs\n   * @param {World} world The world to search in\n   * @param {Array} p1 Empty array to be filled with body objects\n   * @param {Array} p2 Empty array to be filled with body objects\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    throw new Error('collisionPairs not implemented for this BroadPhase class!');\n  }\n  /**\n   * Check if a body pair needs to be intersection tested at all.\n   * @method needBroadphaseCollision\n   * @param {Body} bodyA\n   * @param {Body} bodyB\n   * @return {bool}\n   */\n\n\n  needBroadphaseCollision(bodyA, bodyB) {\n    // Check collision filter masks\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    } // Check types\n\n\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      // Both bodies are static or sleeping. Skip.\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the bounding volumes of two bodies intersect.\n   * @method intersectionTest\n   * @param {Body} bodyA\n   * @param {Body} bodyB\n   * @param {array} pairs1\n   * @param {array} pairs2\n   */\n\n\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Check if the bounding boxes of two bodies are intersecting.\n   * @method doBoundingBoxBroadphase\n   * @param {Body} bodyA\n   * @param {Body} bodyB\n   * @param {Array} pairs1\n   * @param {Array} pairs2\n   */\n\n\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.computeAABB();\n    }\n\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.computeAABB();\n    } // Check AABB / AABB\n\n\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? id1 + \",\" + id2 : id2 + \",\" + id1;\n      t[key] = i;\n      t.keys.push(key);\n    }\n\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  /**\n   * To be implemented by subcasses\n   * @method setWorld\n   * @param {World} world\n   */\n\n\n  setWorld(world) {}\n  /**\n   * Returns all the bodies within the AABB.\n   * @method aabbQuery\n   * @param  {World} world\n   * @param  {AABB} aabb\n   * @param  {array} result An array to store resulting bodies in.\n   * @return {array}\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n  }\n\n}\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\n\nconst // Temp objects\nBroadphase_collisionPairs_r = new Vec3();\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\n\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\n\nBroadphase.boundingSphereCheck = (bodyA, bodyB) => {\n  const dist = new Vec3(); // bsc_dist;\n\n  bodyA.position.vsub(bodyB.position, dist);\n  const sa = bodyA.shapes[0];\n  const sb = bodyB.shapes[0];\n  return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n};\n\n/**\r\n * Axis aligned uniform grid broadphase.\r\n * @class GridBroadphase\r\n * @constructor\r\n * @extends Broadphase\r\n * @todo Needs support for more than just planes and spheres.\r\n * @param {Vec3} aabbMin\r\n * @param {Vec3} aabbMax\r\n * @param {Number} nx Number of boxes along x\r\n * @param {Number} ny Number of boxes along y\r\n * @param {Number} nz Number of boxes along z\r\n */\nclass GridBroadphase extends Broadphase {\n  constructor(aabbMin = new Vec3(100, 100, 100), aabbMax = new Vec3(-100, -100, -100), nx = 10, ny = 10, nz = 10) {\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n\n    this.bins = [];\n    this.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.numObjects();\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    const BOX = types.BOX;\n    const COMPOUND = types.COMPOUND;\n    const CONVEXPOLYHEDRON = types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length; // Reset bins\n\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n\n    const ceil = Math.ceil;\n\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    } // Put all bodies into the bins\n\n\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n\n      switch (si.type) {\n        case SPHERE:\n          {\n            const shape = si; // Put in bin\n            // check if overlap with other bins\n\n            const x = bi.position.x;\n            const y = bi.position.y;\n            const z = bi.position.z;\n            const r = shape.radius;\n            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n            break;\n          }\n\n        case PLANE:\n          {\n            const shape = si;\n\n            if (shape.worldNormalNeedsUpdate) {\n              shape.computeWorldNormal(bi.quaternion);\n            }\n\n            const planeNormal = shape.worldNormal; //Relative position from origin of plane object to the first bin\n            //Incremented as we iterate through the bins\n\n            const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n            const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n            const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n            const d = GridBroadphase_collisionPairs_d;\n            d.set(xreset, yreset, zreset);\n\n            for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n              for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                  if (d.dot(planeNormal) < binRadius) {\n                    const idx = xoff + yoff + zoff;\n                    bins[idx][binLengths[idx]++] = bi;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (bi.aabbNeedsUpdate) {\n              bi.computeAABB();\n            }\n\n            addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n            break;\n          }\n      }\n    } // Check each bin\n\n\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i]; //Skip bins with no potential collisions\n\n      if (binLength > 1) {\n        const bin = bins[i]; // Do N^2 broadphase inside\n\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n    //\t\tconsole.log(\"layer \"+zi);\n    //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n    //\t\t\tconst row = '';\n    //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n    //\t\t\t\tconst idx = xoff + yoff + zoff;\n    //\t\t\t\trow += ' ' + binLengths[idx];\n    //\t\t\t}\n    //\t\t\tconsole.log(row);\n    //\t\t}\n    //\t}\n\n\n    this.makePairsUnique(pairs1, pairs2);\n  }\n\n}\n/**\r\n * Get all the collision pairs in the physics world\r\n * @method collisionPairs\r\n * @param {World} world\r\n * @param {Array} pairs1\r\n * @param {Array} pairs2\r\n */\n\nconst GridBroadphase_collisionPairs_d = new Vec3();\n\n/**\r\n * Naive broadphase implementation, used in lack of better ones.\r\n * @class NaiveBroadphase\r\n * @constructor\r\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\r\n * @extends Broadphase\r\n */\nclass NaiveBroadphase extends Broadphase {\n  constructor() {\n    super();\n  }\n  /**\r\n   * Get all the collision pairs in the physics world\r\n   * @method collisionPairs\r\n   * @param {World} world\r\n   * @param {Array} pairs1\r\n   * @param {Array} pairs2\r\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj; // Naive N^2 ftw!\n\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  /**\r\n   * Returns all the bodies within an AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result = []) {\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b = world.bodies[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.computeAABB();\n      } // Ugly hack until Body gets aabb\n\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\n/**\r\n * Storage for Ray casting data.\r\n * @class RaycastResult\r\n * @constructor\r\n */\nclass RaycastResult {\n  // The index of the hit triangle, if the hit shape was a trimesh.\n  // Distance to the hit. Will be set to -1 if there was no hit.\n  // If the ray should stop traversing the bodies.\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\r\n   * Reset all result data.\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\r\n   * @method abort\r\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\r\n   * @method set\r\n   * @param {Vec3} rayFromWorld\r\n   * @param {Vec3} rayToWorld\r\n   * @param {Vec3} hitNormalWorld\r\n   * @param {Vec3} hitPointWorld\r\n   * @param {Shape} shape\r\n   * @param {Body} body\r\n   * @param {number} distance\r\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nconst RAY_MODES = {\n  CLOSEST: 1,\n  ANY: 2,\n  ALL: 4\n};\n\n/**\r\n * A line in 3D space that intersects bodies and return points.\r\n * @class Ray\r\n * @constructor\r\n * @param {Vec3} from\r\n * @param {Vec3} to\r\n */\nclass Ray {\n  // The precision of the ray. Used when checking parallelity etc.\n  // Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n  // If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n  // The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n  // Current result object.\n  // Will be set to true during intersectWorld() if the ray hit anything.\n  // User-provided result callback. Will be used if mode is Ray.ALL.\n  constructor(from = new Vec3(), to = new Vec3()) {\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\r\n   * Do itersection against all bodies in the given World.\r\n   * @method intersectWorld\r\n   * @param  {World} world\r\n   * @param  {object} options\r\n   * @return {Boolean} True if the ray hit anything, otherwise false.\r\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\r\n   * Shoot a ray at a body, get back information about the hit.\r\n   * @param {Body} body\r\n   * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\r\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\r\n   * @method intersectBodies\r\n   * @param {Array} bodies An array of Body objects.\r\n   * @param {RaycastResult} [result] Deprecated\r\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\r\n   * Updates the direction vector.\r\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\r\n   * Get the world AABB of the ray.\r\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    const data = shape.data;\n    const w = shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\r\n   * @todo Optimize by transforming the world to local space first.\r\n   * @todo Use Octree lookup\r\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const indices = mesh.indices;\n    const vertices = mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\r\n   * @return {boolean} True if the intersections should continue\r\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n\n}\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\nconst tmpAABB = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\n/*\r\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\r\n */\n\nRay.pointInTriangle = pointInTriangle;\n\nfunction pointInTriangle(p, a, b, c) {\n  c.vsub(a, v0);\n  b.vsub(a, v1);\n  p.vsub(a, v2);\n  const dot00 = v0.dot(v0);\n  const dot01 = v0.dot(v1);\n  const dot02 = v0.dot(v2);\n  const dot11 = v1.dot(v1);\n  const dot12 = v1.dot(v2);\n  let u;\n  let v;\n  return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n}\n\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nRay.prototype[Shape.types.BOX] = Ray.prototype._intersectBox;\nRay.prototype[Shape.types.PLANE] = Ray.prototype._intersectPlane;\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype._intersectHeightfield;\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nRay.prototype[Shape.types.SPHERE] = Ray.prototype._intersectSphere;\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_vector = new Vec3();\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype._intersectConvex;\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nconst intersectTrimesh_localAABB = new AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype._intersectTrimesh;\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\r\n * Sweep and prune broadphase along one axis.\r\n *\r\n * @class SAPBroadphase\r\n * @constructor\r\n * @param {World} [world]\r\n * @extends Broadphase\r\n */\nclass SAPBroadphase extends Broadphase {\n  // List of bodies currently in the broadphase.\n  // The world to search in.\n  // Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n\n    this._addBodyHandler = event => {\n      axisList.push(event.body);\n    };\n\n    this._removeBodyHandler = event => {\n      const idx = axisList.indexOf(event.body);\n\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  /**\r\n   * Change the world\r\n   * @method setWorld\r\n   * @param  {World} world\r\n   */\n\n\n  setWorld(world) {\n    // Clear the old axis array\n    this.axisList.length = 0; // Add all bodies from the new world\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    } // Remove old handlers, if any\n\n\n    world.removeEventListener('addBody', this._addBodyHandler);\n    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n    world.addEventListener('addBody', this._addBodyHandler);\n    world.addEventListener('removeBody', this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  /**\r\n   * Collect all collision pairs\r\n   * @method collisionPairs\r\n   * @param  {World} world\r\n   * @param  {Array} p1\r\n   * @param  {Array} p2\r\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    } // Look through the list\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length; // Update AABBs\n\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n\n      if (bi.aabbNeedsUpdate) {\n        bi.computeAABB();\n      }\n    } // Sort the list\n\n\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  /**\r\n   * Computes the variance of the body positions and estimates the best\r\n   * axis to use. Will automatically set property .axisIndex.\r\n   * @method autoDetectAxis\r\n   */\n\n\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const centerX = b.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  /**\r\n   * Returns all the bodies within an AABB.\r\n   * @method aabbQuery\r\n   * @param  {World} world\r\n   * @param  {AABB} aabb\r\n   * @param {array} result An array to store resulting bodies in.\r\n   * @return {array}\r\n   */\n\n\n  aabbQuery(world, aabb, result = []) {\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n\n    const axisIndex = this.axisIndex;\n    let axis = 'x';\n\n    if (axisIndex === 1) {\n      axis = 'y';\n    }\n\n    if (axisIndex === 2) {\n      axis = 'z';\n    }\n\n    const axisList = this.axisList;\n    const lower = aabb.lowerBound[axis];\n    const upper = aabb.upperBound[axis];\n\n    for (let i = 0; i < axisList.length; i++) {\n      const b = axisList[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.computeAABB();\n      }\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\r\n * @static\r\n * @method insertionSortX\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\nSAPBroadphase.insertionSortX = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * @static\r\n * @method insertionSortY\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\n\nSAPBroadphase.insertionSortY = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * @static\r\n * @method insertionSortZ\r\n * @param  {Array} a\r\n * @return {Array}\r\n */\n\n\nSAPBroadphase.insertionSortZ = a => {\n  for (let i = 1, l = a.length; i < l; i++) {\n    const v = a[i];\n    let j;\n\n    for (j = i - 1; j >= 0; j--) {\n      if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n        break;\n      }\n\n      a[j + 1] = a[j];\n    }\n\n    a[j + 1] = v;\n  }\n\n  return a;\n};\n/**\r\n * Check if the bounds of two bodies overlap, along the given SAP axis.\r\n * @static\r\n * @method checkBounds\r\n * @param  {Body} bi\r\n * @param  {Body} bj\r\n * @param  {Number} axisIndex\r\n * @return {Boolean}\r\n */\n\n\nSAPBroadphase.checkBounds = (bi, bj, axisIndex) => {\n  let biPos;\n  let bjPos;\n\n  if (axisIndex === 0) {\n    biPos = bi.position.x;\n    bjPos = bj.position.x;\n  } else if (axisIndex === 1) {\n    biPos = bi.position.y;\n    bjPos = bj.position.y;\n  } else if (axisIndex === 2) {\n    biPos = bi.position.z;\n    bjPos = bj.position.z;\n  }\n\n  const ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        // boundA1 = biPos - ri,\n  boundA2 = biPos + ri,\n        boundB1 = bjPos - rj; // boundB2 = bjPos + rj;\n\n  return boundB1 < boundA2;\n};\n\nfunction Utils() {}\n/**\r\n * Extend an options object with default values.\r\n * @static\r\n * @method defaults\r\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\r\n * @param  {object} defaults An object containing default values.\r\n * @return {object} The modified options object.\r\n */\n\nUtils.defaults = (options = {}, defaults) => {\n  for (let key in defaults) {\n    if (!(key in options)) {\n      options[key] = defaults[key];\n    }\n  }\n\n  return options;\n};\n\n/**\r\n * Constraint base class\r\n * @class Constraint\r\n * @author schteppe\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {boolean} [options.collideConnected=true]\r\n * @param {boolean} [options.wakeUpBodies=true]\r\n */\nclass Constraint {\n  // Equations to be solved in this constraint.\n  // Set to true if you want the bodies to collide when they are connected.\n  constructor(bodyA, bodyB, options = {}) {\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\r\n   * Update all the equations with data.\r\n   * @method update\r\n   */\n\n\n  update() {\n    throw new Error('method update() not implmemented in this Constraint subclass!');\n  }\n  /**\r\n   * Enables all equations in the constraint.\r\n   * @method enable\r\n   */\n\n\n  enable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  /**\r\n   * Disables all equations in the constraint.\r\n   * @method disable\r\n   */\n\n\n  disable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n\n}\nConstraint.idCounter = 0;\n\n/**\r\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\r\n */\n\nclass JacobianElement {\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\r\n   * Multiply with other JacobianElement\r\n   */\n\n\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  /**\r\n   * Multiply with two vectors\r\n   */\n\n\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n\n}\n\n/**\r\n * Equation base class\r\n * @class Equation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bi\r\n * @param {Body} bj\r\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\r\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\r\n */\nclass Equation {\n  // SPOOK parameter\n  // SPOOK parameter\n  // SPOOK parameter\n  // A number, proportional to the force added to the bodies.\n  constructor(bi, bj, minForce = -1e6, maxForce = 1e6) {\n    this.id = Equation.id++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\r\n   * Recalculates a,b,eps.\r\n   * @method setSpookParams\r\n   */\n\n\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = 4.0 * d / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n  }\n  /**\r\n   * Computes the right hand side of the SPOOK equation\r\n   * @method computeB\r\n   * @return {Number}\r\n   */\n\n\n  computeB(a, b, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a - GW * b - GiMf * h;\n  }\n  /**\r\n   * Computes G*q, where q are the generalized body coordinates\r\n   * @method computeGq\r\n   * @return {Number}\r\n   */\n\n\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  /**\r\n   * Computes G*W, where W are the body velocities\r\n   * @method computeGW\r\n   * @return {Number}\r\n   */\n\n\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\r\n   * Computes G*Wlambda, where W are the body velocities\r\n   * @method computeGWlambda\r\n   * @return {Number}\r\n   */\n\n\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp$1);\n    result += tmp$1.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp$1);\n    result += tmp$1.dot(GB.rotational);\n    return result;\n  }\n  /**\r\n   * Add constraint velocity to the bodies.\r\n   * @method addToWlambda\r\n   * @param {Number} deltalambda\r\n   */\n\n\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp; // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  /**\r\n   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\r\n   * @method computeInvC\r\n   * @param  {Number} eps\r\n   * @return {Number}\r\n   */\n\n\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n\n}\nEquation.id = 0;\n/**\r\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\r\n * @method computeGiMf\r\n * @return {Number}\r\n */\n\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\n/**\r\n * Computes G*inv(M)*G'\r\n * @method computeGiMGt\r\n * @return {Number}\r\n */\n\nconst tmp$1 = new Vec3();\nconst addToWlambda_temp = new Vec3();\n\n/**\r\n * Contact/non-penetration constraint equation\r\n * @class ContactEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @extends Equation\r\n */\nclass ContactEquation extends Equation {\n  // \"bounciness\": u1 = -e*u0\n  // World-oriented vector that goes from the center of bi to the contact point.\n  // World-oriented vector that starts in body j position and goes to the contact point.\n  // Contact normal, pointing out of body i.\n  constructor(bodyA, bodyB, maxForce = 1e6) {\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0.0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    const fi = bi.force;\n    const taui = bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    const fj = bj.force;\n    const tauj = bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni; // Caluclate cross products\n\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec); // Compute iteration\n\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n  /**\r\n   * Get the current relative velocity in the contact point.\r\n   * @method getImpactVelocityAlongNormal\r\n   * @return {number}\r\n   */\n\n\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n\n}\nconst ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\r\n * Connects two bodies at given offset points.\r\n * @class PointToPointConstraint\r\n * @extends Constraint\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\r\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\r\n * @param {Vec3} pivotB See pivotA.\r\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\r\n *\r\n * @example\r\n *     const bodyA = new Body({ mass: 1 });\r\n *     const bodyB = new Body({ mass: 1 });\r\n *     bodyA.position.set(-1, 0, 0);\r\n *     bodyB.position.set(1, 0, 0);\r\n *     bodyA.addShape(shapeA);\r\n *     bodyB.addShape(shapeB);\r\n *     world.addBody(bodyA);\r\n *     world.addBody(bodyB);\r\n *     const localPivotA = new Vec3(1, 0, 0);\r\n *     const localPivotB = new Vec3(-1, 0, 0);\r\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\r\n *     world.addConstraint(constraint);\r\n */\nclass PointToPointConstraint extends Constraint {\n  // Pivot, defined locally in bodyA.\n  // Pivot, defined locally in bodyB.\n  constructor(bodyA, pivotA = new Vec3(), bodyB, pivotB = new Vec3(), maxForce = 1e6) {\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    this.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ; // Rotate the pivots to world space\n\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n\n}\n\n/**\r\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\r\n * @class ConeEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Vec3} [options.axisA] Local axis in A\r\n * @param {Vec3} [options.axisB] Local axis in B\r\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\r\n * @param {number} [options.maxForce=1e6]\r\n * @extends Equation\r\n */\nclass ConeEquation extends Equation {\n  // The cone angle to keep.\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1;\n    const njxni = tmpVec2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\n\n/**\r\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\r\n * @class RotationalEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Vec3} [options.axisA]\r\n * @param {Vec3} [options.axisB]\r\n * @param {number} [options.maxForce]\r\n * @extends Equation\r\n */\nclass RotationalEquation extends Equation {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\n\n/**\r\n * @class ConeTwistConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Vec3} [options.pivotA]\r\n * @param {Vec3} [options.pivotB]\r\n * @param {Vec3} [options.axisA]\r\n * @param {Vec3} [options.axisB]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass ConeTwistConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c, t);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update(); // Update the axes to the cone constraint\n\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n\n}\n\n/**\r\n * Constrains two bodies to be at a constant distance from each others center of mass.\r\n * @class DistanceConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\r\n * @param {Number} [maxForce=1e6]\r\n * @extends Constraint\r\n */\nclass DistanceConstraint extends Constraint {\n  constructor(bodyA, bodyB, distance, maxForce = 1e6) {\n    super(bodyA, bodyB);\n\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n\n}\n\n/**\r\n * Lock constraint. Will remove all degrees of freedom between the bodies.\r\n * @class LockConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    super.update(); // These vector pairs must be orthogonal\n\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n\n}\n\n/**\r\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\r\n * @class RotationalMotorEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} maxForce\r\n * @extends Equation\r\n */\nclass RotationalMotorEquation extends Equation {\n  // World oriented rotational axis.\n  // World oriented rotational axis.\n  // Motor velocity.\n  constructor(bodyA, bodyB, maxForce = 1e6) {\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\n\n/**\r\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\r\n * @class HingeConstraint\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {object} [options]\r\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\r\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\r\n * @param {Vec3} [options.pivotB]\r\n * @param {Vec3} [options.axisB]\r\n * @param {Number} [options.maxForce=1e6]\r\n * @extends PointToPointConstraint\r\n */\nclass HingeConstraint extends PointToPointConstraint {\n  // Rotation axis, defined locally in bodyA.\n  // Rotation axis, defined locally in bodyB.\n  constructor(bodyA, bodyB, options = {}) {\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  /**\r\n   * @method enableMotor\r\n   */\n\n\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  /**\r\n   * @method disableMotor\r\n   */\n\n\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  /**\r\n   * @method setMotorSpeed\r\n   * @param {number} speed\r\n   */\n\n\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  /**\r\n   * @method setMotorMaxForce\r\n   * @param {number} maxForce\r\n   */\n\n\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update(); // Get world axes\n\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\r\n * Constrains the slipping in a contact along a tangent\r\n * @class FrictionEquation\r\n * @constructor\r\n * @author schteppe\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\r\n * @extends Equation\r\n */\nclass FrictionEquation extends Equation {\n  // Tangent.\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t; // Caluclate cross products\n\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n * @todo Refactor materials to materialA and materialB\n */\nclass ContactMaterial {\n  // Identifier of this material.\n  // Participating materials.\n  // Friction coefficient.\n  // Restitution coefficient.\n  // Stiffness of the produced contact equations.\n  // Relaxation time of the produced contact equations.\n  // Stiffness of the produced friction equations.\n  // Relaxation time of the produced friction equations\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n\n}\nContactMaterial.idCounter = 0;\n\n/**\r\n * Defines a physics material.\r\n * @class Material\r\n * @constructor\r\n * @param {object} [options]\r\n * @author schteppe\r\n */\nclass Material {\n  // Material name.\n  // Material id.\n  // Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n  // Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n  constructor(options = {}) {\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\n\n/**\r\n * A spring, connecting two bodies.\r\n *\r\n * @class Spring\r\n * @constructor\r\n * @param {Body} bodyA\r\n * @param {Body} bodyB\r\n * @param {Object} [options]\r\n * @param {number} [options.restLength]   A number > 0. Default: 1\r\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\r\n * @param {number} [options.damping]      A number >= 0. Default: 1\r\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\r\n * @param {Vec3}  [options.worldAnchorB]\r\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\r\n * @param {Vec3}  [options.localAnchorB]\r\n */\nclass Spring {\n  // Rest length of the spring.\n  // Stiffness of the spring.\n  // Damping of the spring.\n  // First connected body.\n  // Second connected body.\n  // Anchor for bodyA in local bodyA coordinates.\n  // Anchor for bodyB in local bodyB coordinates.\n  constructor(bodyA, bodyB, options = {}) {\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\r\n   * Set the anchor point on body A, using world coordinates.\r\n   * @method setWorldAnchorA\r\n   * @param {Vec3} worldAnchorA\r\n   */\n\n\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  /**\r\n   * Set the anchor point on body B, using world coordinates.\r\n   * @method setWorldAnchorB\r\n   * @param {Vec3} worldAnchorB\r\n   */\n\n\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  /**\r\n   * Get the anchor point on body A, in world coordinates.\r\n   * @method getWorldAnchorA\r\n   * @param {Vec3} result The vector to store the result in.\r\n   */\n\n\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  /**\r\n   * Get the anchor point on body B, in world coordinates.\r\n   * @method getWorldAnchorB\r\n   * @param {Vec3} result The vector to store the result in.\r\n   */\n\n\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  /**\r\n   * Apply the spring force to the connected bodies.\r\n   * @method applyForce\r\n   */\n\n\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj, tmp);\n    u.vadd(tmp, u);\n    bodyA.angularVelocity.cross(ri, tmp);\n    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force); // Angular force\n\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\n\n/**\r\n * @class WheelInfo\r\n * @constructor\r\n * @param {Object} [options]\r\n *\r\n * @param {Vec3} [options.chassisConnectionPointLocal]\r\n * @param {Vec3} [options.chassisConnectionPointWorld]\r\n * @param {Vec3} [options.directionLocal]\r\n * @param {Vec3} [options.directionWorld]\r\n * @param {Vec3} [options.axleLocal]\r\n * @param {Vec3} [options.axleWorld]\r\n * @param {number} [options.suspensionRestLength=1]\r\n * @param {number} [options.suspensionMaxLength=2]\r\n * @param {number} [options.radius=1]\r\n * @param {number} [options.suspensionStiffness=100]\r\n * @param {number} [options.dampingCompression=10]\r\n * @param {number} [options.dampingRelaxation=10]\r\n * @param {number} [options.frictionSlip=10000]\r\n * @param {number} [options.steering=0]\r\n * @param {number} [options.rotation=0]\r\n * @param {number} [options.deltaRotation=0]\r\n * @param {number} [options.rollInfluence=0.01]\r\n * @param {number} [options.maxSuspensionForce]\r\n * @param {boolean} [options.isFrontWheel=true]\r\n * @param {number} [options.clippedInvContactDotSuspension=1]\r\n * @param {number} [options.suspensionRelativeVelocity=0]\r\n * @param {number} [options.suspensionForce=0]\r\n * @param {number} [options.skidInfo=0]\r\n * @param {number} [options.suspensionLength=0]\r\n * @param {number} [options.maxSuspensionTravel=1]\r\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\r\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\r\n */\nclass WheelInfo {\n  // Max travel distance of the suspension, in meters.\n  // Speed to apply to the wheel rotation when the wheel is sliding.\n  // If the customSlidingRotationalSpeed should be used.\n  // Connection point, defined locally in the chassis body frame.\n  // Rotation value, in radians.\n  // The result from raycasting.\n  // Wheel world transform.\n  constructor(options = {}) {\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10000,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0.0;\n        this.clippedInvContactDotSuspension = 1.0 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      // Not in contact : position wheel in a nice (rest length) position\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0.0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1.0;\n    }\n  }\n\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\n\n/**\r\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\r\n * @class RaycastVehicle\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {Body} [options.chassisBody] The car chassis body.\r\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\r\n * @param {integer} [options.indexLeftAxis]\r\n * @param {integer} [options.indexUpAxis]\r\n */\nclass RaycastVehicle {\n  // Will be set to true if the car is sliding.\n  // Index of the right axis, 0=x, 1=y, 2=z\n  // Index of the forward axis, 0=x, 1=y, 2=z\n  // Index of the up axis, 0=x, 1=y, 2=z\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 1;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 2;\n    this.constraints = [];\n\n    this.preStepCallback = () => {};\n\n    this.currentVehicleSpeedKmHour = 0;\n  }\n  /**\r\n   * Add a wheel. For information about the options, see WheelInfo.\r\n   * @method addWheel\r\n   * @param {object} [options]\r\n   */\n\n\n  addWheel(options = {}) {\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  /**\r\n   * Set the steering value of a wheel.\r\n   * @method setSteeringValue\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  /**\r\n   * Set the wheel force to apply on one of the wheels each time step\r\n   * @method applyEngineForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  /**\r\n   * Set the braking force of a wheel\r\n   * @method setBrake\r\n   * @param {number} brake\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  /**\r\n   * Add the vehicle including its constraints to the world.\r\n   * @method addToWorld\r\n   * @param {World} world\r\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    world.addBody(this.chassisBody);\n    const that = this;\n\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n  }\n  /**\r\n   * Get one of the wheel axles, world-oriented.\r\n   * @private\r\n   * @method getVehicleAxisWorld\r\n   * @param  {integer} axisIndex\r\n   * @param  {Vec3} result\r\n   */\n\n\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    } // simulate suspension\n\n\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      //apply suspension force\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n      chassisBody.applyImpulse(impulse, relpos);\n    }\n\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i]; //const relpos = new Vec3();\n      //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n      let m = 1;\n\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        // Apply custom rotation when accelerating and sliding\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      } // Lock wheels\n\n\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n\n      wheel.rotation += wheel.deltaRotation; // Use the old value\n\n      wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n  }\n\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n\n      if (wheel.isInContact) {\n        let force; // Spring\n\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  /**\r\n   * Remove the vehicle including its constraints from the world.\r\n   * @method removeFromWorld\r\n   * @param {World} world\r\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n  }\n\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false; // Cast ray against world\n\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      //put wheel info as in rest position\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0.0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n  }\n\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  /**\r\n   * Update one of the wheel transform.\r\n   * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\r\n   * @method updateWheelTransform\r\n   * @param {integer} wheelIndex The wheel index to update.\r\n   */\n\n\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize(); // Rotate around steering over the wheelAxle\n\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize(); // world position of the wheel\n\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  /**\r\n   * Get the world transform of one of the wheels\r\n   * @method getWheelTransformWorld\r\n   * @param  {integer} wheelIndex\r\n   * @return {Transform}\r\n   */\n\n\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i); // Get world axle\n\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n        // rollingFriction = calcRollingFriction(contactPt);\n\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;\n\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n        const x = wheel.forwardImpulse * fwdFactor;\n        const y = wheel.sideImpulse * sideFactor;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    } // apply the impulses\n\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n      //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n\n}\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nconst tmpRay = new Ray();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n\n  return j1;\n}\n\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\n\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\n\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3(); //bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\r\n * Spherical shape\r\n * @class Sphere\r\n * @constructor\r\n * @extends Shape\r\n * @param {Number} radius The radius of the sphere, a non-negative number.\r\n * @author schteppe / http://github.com/schteppe\r\n */\nclass Sphere extends Shape {\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\n\n/**\r\n * Simple vehicle helper class with spherical rigid body wheels.\r\n * @class RigidVehicle\r\n * @constructor\r\n * @param {Body} [options.chassisBody]\r\n */\nclass RigidVehicle {\n  constructor(options = {}) {\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 2, 0.5))\n      });\n    }\n\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\r\n   * Add a wheel\r\n   * @method addWheel\r\n   * @param {object} options\r\n   * @param {boolean} [options.isFrontWheel]\r\n   * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\r\n   * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\r\n   * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\r\n   * @param {Body} [options.body] The wheel body.\r\n   */\n\n\n  addWheel(options = {}) {\n    let wheelBody;\n\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      // No wheel body given. Create it!\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0); // Position constrain wheels\n    const position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n    const axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  /**\r\n   * Set the steering value of a wheel.\r\n   * @method setSteeringValue\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   * @todo check coordinateSystem\r\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    // Set angle of the hinge axis\n    const axis = this.wheelAxes[wheelIndex];\n    const c = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const y = axis.y;\n    this.constraints[wheelIndex].axisA.set(c * x - s * y, s * x + c * y, 0);\n  }\n  /**\r\n   * Set the target rotational speed of the hinge constraint.\r\n   * @method setMotorSpeed\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  /**\r\n   * Set the target rotational speed of the hinge constraint.\r\n   * @method disableMotor\r\n   * @param {number} value\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  /**\r\n   * Set the wheel force to apply on one of the wheels each time step\r\n   * @method setWheelForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  /**\r\n   * Apply a torque on one of the wheels.\r\n   * @method applyWheelForce\r\n   * @param  {number} value\r\n   * @param  {integer} wheelIndex\r\n   */\n\n\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  /**\r\n   * Add the vehicle including its constraints to the world.\r\n   * @method addToWorld\r\n   * @param {World} world\r\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n  }\n\n  _update() {\n    const wheelForces = this.wheelForces;\n\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  /**\r\n   * Remove the vehicle including its constraints from the world.\r\n   * @method removeFromWorld\r\n   * @param {World} world\r\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  /**\r\n   * Get current rotational velocity of a wheel\r\n   * @method getWheelSpeed\r\n   * @param {integer} wheelIndex\r\n   */\n\n\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\n\n/**\r\n * Smoothed-particle hydrodynamics system\r\n * @class SPHSystem\r\n * @constructor\r\n */\nclass SPHSystem {\n  // Density of the system (kg/m3).\n  // Distance below which two particles are considered to be neighbors. It should be adjusted so there are about 15-20 neighbor particles within this radius.\n  // Viscosity of the system.\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\r\n   * Add a particle to the system.\r\n   * @method add\r\n   * @param {Body} particle\r\n   */\n\n\n  add(particle) {\n    this.particles.push(particle);\n\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  /**\r\n   * Remove a particle from the system.\r\n   * @method remove\r\n   * @param {Body} particle\r\n   */\n\n\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i]; // Current particle\n\n      const neighbors = this.neighbors[i]; // Get neighbors\n\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]); // Add current too\n\n      const numNeighbors = neighbors.length; // Accumulate density for the particle\n\n      let sum = 0.0;\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      } // Save\n\n\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    } // Add forces\n    // Sum to these accelerations\n\n\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0); // Init vars\n\n      let Pij;\n      let nabla;\n\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j]; //printf(\"%d \",nj);\n        // Get r once for all..\n\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length(); // Pressure contribution\n\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u); // Add to viscosity acceleration\n\n        a_visc.vadd(u, a_visc);\n      } // Calculate force\n\n\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  } // Calculate the weight using the W(r) weightfunction\n\n\n  w(r) {\n    // 315\n    const h = this.smoothingRadius;\n    return 315.0 / (64.0 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  } // calculate gradient of the weight function\n\n\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  } // Calculate nabla(W)\n\n\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n\n}\n/**\r\n * Get neighbors within smoothing volume, save in the array neighbors\r\n * @method getNeighbors\r\n * @param {Body} particle\r\n * @param {Array} neighbors\r\n */\n\nconst SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nconst SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(radiusBottom * cos(0), -height * 0.5, -radiusBottom * sin(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(radiusTop * cos(0), height * 0.5, -radiusTop * sin(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(radiusBottom * cos(theta), -height * 0.5, -radiusBottom * sin(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(radiusTop * cos(theta), height * 0.5, -radiusTop * sin(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i + 2, 2 * i + 3, 2 * i + 1, 2 * i]);\n      } else {\n        faces.push([0, 1, 2 * i + 1, 2 * i]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(cos(thetaN), 0, -sin(thetaN)));\n      }\n    }\n\n    faces.push(topface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder bottom face\n\n    const temp = [];\n\n    for (let i = 0; i < bottomface.length; i++) {\n      temp.push(bottomface[bottomface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n  }\n\n}\n\n/**\r\n * Particle shape.\r\n * @class Particle\r\n * @constructor\r\n * @author schteppe\r\n * @extends Shape\r\n */\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\r\n   * @method calculateLocalInertia\r\n   * @param  {Number} mass\r\n   * @param  {Vec3} target\r\n   * @return {Vec3}\r\n   */\n\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\r\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\r\n * @class Plane\r\n * @constructor\r\n * @extends Shape\r\n * @author schteppe\r\n */\nclass Plane extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = [];\n *     for(let i = 0; i < 1000; i++){\n *         const y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     const heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nclass Heightfield extends Shape {\n  // An array of numbers, or height values, that are spread out along the x axis.\n  // Max value of the data.\n  // Max value of the data.\n  // The width of each element. To do: elementSizeX and Y\n  constructor(data, options = {}) {\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\n   * Call whenever you change the data array.\n   * @method update\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\n   * Update the .minValue property\n   * @method updateMinValue\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\n   * Update the .maxValue property\n   * @method updateMaxValue\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   * @method setHeightValueAtIndex\n   * @param {integer} xi\n   * @param {integer} yi\n   * @param {number} value\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\n   * Get max/min in a rectangle in the matrix data\n   * @method getRectMinMax\n   * @param  {integer} iMinX\n   * @param  {integer} iMinY\n   * @param  {integer} iMaxX\n   * @param  {integer} iMaxY\n   * @param  {array} [result] An array to store the results in.\n   * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result = []) {\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @method getIndexOfPosition\n   * @param  {number} x\n   * @param  {number} y\n   * @param  {array} result Two-element array\n   * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n   * @return {boolean}\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\n   * Get an AABB of a square in the heightfield\n   * @param  {number} xi\n   * @param  {number} yi\n   * @param  {AABB} result\n   */\n\n\n  getAabbAtIndex(xi, yi, {\n    lowerBound,\n    upperBound\n  }) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\n   * Get the height in the heightfield at a given position\n   * @param  {number} x\n   * @param  {number} y\n   * @param  {boolean} edgeClamp\n   * @return {number}\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return xi + \"_\" + yi + \"_\" + (getUpperTriangle ? 1 : 0);\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\n   * Get a triangle from the heightfield\n   * @param  {number} xi\n   * @param  {number} yi\n   * @param  {boolean} upper\n   * @param  {Vec3} a\n   * @param  {Vec3} b\n   * @param  {Vec3} c\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   * @method getConvexTrianglePillar\n   * @param  {integer} i\n   * @param  {integer} j\n   * @param  {boolean} getUpperTriangle\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -h - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -h - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -h - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -h - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -h - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -h - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target = new Vec3()) {\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\n   * Sets the height values from an image. Currently only supported in browser.\n   * @method setHeightsFromImage\n   * @param {Image} image\n   * @param {Vec3} scale\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\r\n * @class OctreeNode\r\n * @constructor\r\n * @param {object} [options]\r\n * @param {Octree} [options.root]\r\n * @param {AABB} [options.aabb]\r\n */\nclass OctreeNode {\n  // The root node\n  // Boundary of this node\n  // Contained data at the current node level\n  // Children to this node\n  constructor(options = {}) {\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\r\n   * Insert data into this node\r\n   * @method insert\r\n   * @param  {AABB} aabb\r\n   * @param  {object} elementData\r\n   * @return {boolean} True if successful, otherwise false\r\n   */\n\n\n  insert(aabb, elementData, level = 0) {\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\r\n   * Create 8 equally sized children nodes and put them in the .children array.\r\n   * @method subdivide\r\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\r\n   * Get all data, potentially within an AABB\r\n   * @method aabbQuery\r\n   * @param  {AABB} aabb\r\n   * @param  {array} result\r\n   * @return {array} The \"result\" object\r\n   */\n\n\n  aabbQuery(aabb, result) {\n    const nodeData = this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    const children = this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\r\n   * Get all data, potentially intersected by a ray.\r\n   * @method rayQuery\r\n   * @param  {Ray} ray\r\n   * @param  {Transform} treeTransform\r\n   * @param  {array} result\r\n   * @return {array} The \"result\" object\r\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB$1);\n    tmpAABB$1.toLocalFrame(treeTransform, tmpAABB$1);\n    this.aabbQuery(tmpAABB$1, result);\n    return result;\n  }\n  /**\r\n   * @method removeEmptyNodes\r\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\r\n * @class Octree\r\n * @param {AABB} aabb The total AABB of the tree\r\n * @param {object} [options]\r\n * @param {number} [options.maxDepth=8] Maximum subdivision depth\r\n * @extends OctreeNode\r\n */\n\n\nclass Octree extends OctreeNode {\n  // Maximum subdivision depth\n  constructor(aabb, options = {}) {\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB$1 = new AABB();\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     const trimeshShape = new Trimesh(vertices, indices);\n */\nclass Trimesh extends Shape {\n  // Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n  // The normals data.\n  // The local AABB of the mesh.\n  // References to vertex pairs, making up all unique edges in the trimesh.\n  // Local scaling of the mesh. Use .setScale() to set it.\n  // The indexed triangles. Use .updateTree() to update it.\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\n   * @method updateTree\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB();\n    const a = new Vec3();\n    const b = new Vec3();\n    const c = new Vec3();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\n   * Get triangles in a local AABB from the trimesh.\n   * @method getTrianglesInAABB\n   * @param  {AABB} aabb\n   * @param  {array} result An array of integers, referencing the queried triangles.\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\n   * @method setScale\n   * @param {Vec3} scale\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Compute the normals of the faces. Will save in the .normals array.\n   * @method updateNormals\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\n   * Update the .edges property\n   * @method updateEdges\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? a + \"_\" + b : b + \"_\" + a;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\n   * Get an edge vertex\n   * @method getEdgeVertex\n   * @param  {number} edgeIndex\n   * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param  {Vec3} vertexStore Where to store the result\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\n   * Get a vector along an edge.\n   * @method getEdgeVector\n   * @param  {number} edgeIndex\n   * @param  {Vec3} vectorStore\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\n   * Get vertex i.\n   * @method getVertex\n   * @param  {number} i\n   * @param  {Vec3} out\n   * @return {Vec3} The \"out\" vector object\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\n   * Get raw vertex i\n   * @private\n   * @method _getUnscaledVertex\n   * @param  {number} i\n   * @param  {Vec3} out\n   * @return {Vec3} The \"out\" vector object\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @method getWorldVertex\n   * @param  {number} i\n   * @param  {Vec3} pos\n   * @param  {Quaternion} quat\n   * @param  {Vec3} out\n   * @return {Vec3} The \"out\" vector object\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\n   * Get the three vertices for triangle i.\n   * @method getTriangleVertices\n   * @param  {number} i\n   * @param  {Vec3} a\n   * @param  {Vec3} b\n   * @param  {Vec3} c\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\n   * Compute the normal of triangle i.\n   * @method getNormal\n   * @param  {Number} i\n   * @param  {Vec3} target\n   * @return {Vec3} The \"target\" vector object\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\n   * @method calculateLocalInertia\n   * @param  {Number} mass\n   * @param  {Vec3} target\n   * @return {Vec3} The \"target\" vector object\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\n   * Compute the local AABB for the trimesh\n   * @method computeLocalAABB\n   * @param  {AABB} aabb\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    const vertices = this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\n   * Update the .aabb property\n   * @method updateAABB\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\n   * Will update the .boundingSphereRadius property\n   * @method updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * @method calculateWorldAABB\n   * @param {Vec3}        pos\n   * @param {Quaternion}  quat\n   * @param {Vec3}        min\n   * @param {Vec3}        max\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\n   * Get approximate volume\n   * @method volume\n   * @return {Number}\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\n\nconst cb = new Vec3();\nconst ab = new Vec3();\n\nTrimesh.computeNormal = (va, vb, vc, target) => {\n  vb.vsub(va, ab);\n  vc.vsub(vb, cb);\n  cb.cross(ab, target);\n\n  if (!target.isZero()) {\n    target.normalize();\n  }\n};\n\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\n\nTrimesh.createTorus = (radius = 1, tube = 0.5, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2) => {\n  const vertices = [];\n  const indices = [];\n\n  for (let j = 0; j <= radialSegments; j++) {\n    for (let i = 0; i <= tubularSegments; i++) {\n      const u = i / tubularSegments * arc;\n      const v = j / radialSegments * Math.PI * 2;\n      const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n      const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n      const z = tube * Math.sin(v);\n      vertices.push(x, y, z);\n    }\n  }\n\n  for (let j = 1; j <= radialSegments; j++) {\n    for (let i = 1; i <= tubularSegments; i++) {\n      const a = (tubularSegments + 1) * j + i - 1;\n      const b = (tubularSegments + 1) * (j - 1) + i - 1;\n      const c = (tubularSegments + 1) * (j - 1) + i;\n      const d = (tubularSegments + 1) * j + i;\n      indices.push(a, b, d);\n      indices.push(b, c, d);\n    }\n  }\n\n  return new Trimesh(vertices, indices);\n};\n\n/**\r\n * Constraint equation solver base class.\r\n * @class Solver\r\n * @constructor\r\n * @author schteppe / https://github.com/schteppe\r\n */\nclass Solver {\n  // All equations to be solved\n  constructor() {\n    this.equations = [];\n  }\n  /**\r\n   * Should be implemented in subclasses!\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    return (// Should return the number of iterations done!\n      0\n    );\n  }\n  /**\r\n   * Add an equation\r\n   * @method addEquation\r\n   * @param {Equation} eq\r\n   */\n\n\n  addEquation(eq) {\n    if (eq.enabled) {\n      this.equations.push(eq);\n    }\n  }\n  /**\r\n   * Remove an equation\r\n   * @method removeEquation\r\n   * @param {Equation} eq\r\n   */\n\n\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  /**\r\n   * Add all equations\r\n   * @method removeAllEquations\r\n   */\n\n\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n\n}\n\n/**\r\n * Constraint equation Gauss-Seidel solver.\r\n * @class GSSolver\r\n * @constructor\r\n * @todo The spook parameters should be specified for each constraint, not globally.\r\n * @author schteppe / https://github.com/schteppe\r\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\r\n * @extends Solver\r\n */\nclass GSSolver extends Solver {\n  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n  // When tolerance is reached, the system is assumed to be converged.\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  /**\r\n   * Solve\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj; // Update solve mass\n\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    } // Things that does not change during iteration can be computed once\n\n\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n\n    for (let i = 0; i !== Neq; i++) {\n      const c = equations[i];\n      lambda[i] = 0.0;\n      Bs[i] = c.computeB(h);\n      invCs[i] = 1.0 / c.computeC();\n    }\n\n    if (Neq !== 0) {\n      // Reset vlambda\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const vlambda = b.vlambda;\n        const wlambda = b.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      } // Iterate over equations\n\n\n      for (iter = 0; iter !== maxIter; iter++) {\n        // Accumulate the total error for each iteration.\n        deltalambdaTot = 0.0;\n\n        for (let j = 0; j !== Neq; j++) {\n          const c = equations[j]; // Compute iteration\n\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n          if (lambdaj + deltalambda < c.minForce) {\n            deltalambda = c.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c.maxForce) {\n            deltalambda = c.maxForce - lambdaj;\n          }\n\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n          c.addToWlambda(deltalambda);\n        } // If the total error is small enough - stop iterate\n\n\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      } // Add result to velocity\n\n\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const v = b.velocity;\n        const w = b.angularVelocity;\n        b.vlambda.vmul(b.linearFactor, b.vlambda);\n        v.vadd(b.vlambda, v);\n        b.wlambda.vmul(b.angularFactor, b.wlambda);\n        w.vadd(b.wlambda, w);\n      } // Set the .multiplier property of each equation\n\n\n      let l = equations.length;\n      const invDt = 1 / h;\n\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n\n    return iter;\n  }\n\n}\nconst GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\n\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\n\n/**\r\n * Splits the equations into islands and solves them independently. Can improve performance.\r\n * @class SplitSolver\r\n * @constructor\r\n * @extends Solver\r\n * @param {Solver} subsolver\r\n */\nclass SplitSolver extends Solver {\n  // The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n  // When tolerance is reached, the system is assumed to be converged.\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  /**\r\n   * Solve the subsystems\r\n   * @method solve\r\n   * @param  {Number} dt\r\n   * @param  {World} world\r\n   * @return {Number} number of iterations performed\r\n   */\n\n\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n\n    nodes.length = Nbodies;\n\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    } // Reset node values\n\n\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n\n      const iter = subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n\n    return n;\n  }\n\n} // Returns the number of subsystems\n\nconst SplitSolver_solve_nodes = []; // All allocated node objects\n\nconst SplitSolver_solve_eqs = []; // Temp array\n\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nconst STATIC = Body.STATIC;\n\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n\n  return false;\n}\n\nconst queue = [];\n\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n\n  while (queue.length) {\n    const node = queue.pop(); // Loop over unvisited child nodes\n\n    let child;\n\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\n\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\n\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\r\n * For pooling objects that can be reused.\r\n * @class Pool\r\n * @constructor\r\n */\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n  /**\r\n   * Release an object after use\r\n   * @method release\r\n   * @param {Object} obj\r\n   */\n\n\n  release(...args) {\n    const Nargs = args.length;\n\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(args[i]);\n    }\n\n    return this;\n  }\n  /**\r\n   * Get an object\r\n   * @method get\r\n   * @return {mixed}\r\n   */\n\n\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  /**\r\n   * Construct an object. Should be implemented in each subclass.\r\n   * @method constructObject\r\n   * @return {mixed}\r\n   */\n\n\n  constructObject() {\n    throw new Error('constructObject() not implemented in this Pool subclass yet!');\n  }\n  /**\r\n   * @method resize\r\n   * @param {number} size\r\n   * @return {Pool} Self, for chaining\r\n   */\n\n\n  resize(size) {\n    const objects = this.objects;\n\n    while (objects.length > size) {\n      objects.pop();\n    }\n\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n\n    return this;\n  }\n\n}\n\n/**\r\n * @class Vec3Pool\r\n * @constructor\r\n * @extends Pool\r\n */\n\nclass Vec3Pool extends Pool {\n  constructor() {\n    super();\n    this.type = Vec3;\n  }\n  /**\r\n   * Construct a vector\r\n   * @method constructObject\r\n   * @return {Vec3}\r\n   */\n\n\n  constructObject() {\n    return new Vec3();\n  }\n\n}\n\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\r\n * Helper class for the World. Generates ContactEquations.\r\n * @class Narrowphase\r\n * @constructor\r\n * @todo Sphere-ConvexPolyhedron contacts\r\n * @todo Contact reduction\r\n * @todo should move methods to prototype\r\n */\nclass Narrowphase {\n  // Internal storage of pooled contact points.\n  // Pooled vectors.\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\r\n   * Make a contact object, by using the internal pool or creating a new one.\r\n   * @method createContactEquation\r\n   * @param {Body} bi\r\n   * @param {Body} bj\r\n   * @param {Shape} si\r\n   * @param {Shape} sj\r\n   * @param {Shape} overrideShapeA\r\n   * @param {Shape} overrideShapeB\r\n   * @return {ContactEquation}\r\n   */\n\n\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c;\n\n    if (this.contactPointPool.length) {\n      c = this.contactPointPool.pop();\n      c.bi = bi;\n      c.bj = bj;\n    } else {\n      c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c.restitution = cm.restitution;\n    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = overrideShapeA || si;\n    c.sj = overrideShapeB || sj;\n    return c;\n  }\n\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n\n    if (friction > 0) {\n      // Create 2 tangent equations\n      const mug = friction * world.gravity.length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj); // Construct tangents\n\n      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n\n    return false;\n  } // Take the average N latest contact point on the plane.\n\n\n  createFrictionFromAverage(numContacts) {\n    // The last contactEquation\n    let c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c.bi;\n    const bodyB = c.bj;\n\n    for (let i = 0; i !== numContacts; i++) {\n      c = this.result[this.result.length - 1 - i];\n\n      if (c.bi !== bodyA) {\n        averageNormal.vadd(c.ni, averageNormal);\n        averageContactPointA.vadd(c.ri, averageContactPointA);\n        averageContactPointB.vadd(c.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c.ni, averageNormal);\n        averageContactPointA.vadd(c.rj, averageContactPointA);\n        averageContactPointB.vadd(c.ri, averageContactPointB);\n      }\n    }\n\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri); // Should be the same\n\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t); // return eq;\n  }\n  /**\r\n   * Generate all contacts between a list of body pairs\r\n   * @method getContacts\r\n   * @param {array} p1 Array of body indices\r\n   * @param {array} p2 Array of body indices\r\n   * @param {World} world\r\n   * @param {array} result Array to store generated contacts\r\n   * @param {array} oldcontacts Optional. Array of reusable contact objects\r\n   */\n\n\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1$2;\n    const xj = tmpVec2$2;\n\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      // Get current collision bodies\n      const bi = p1[k];\n      const bj = p2[k]; // Get contact material\n\n      let bodyContactMaterial = null;\n\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n\n        for (let j = 0; j < bj.shapes.length; j++) {\n          // Compute world transform of shapes\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          } // Get collision material\n\n\n          let shapeContactMaterial = null;\n\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n\n          if (resolver) {\n            let retval = false; // TO DO: investigate why sphereParticle and convexParticle\n            // resolvers expect si and sj shapes to be in reverse order\n            // (i.e. larger integer value type first instead of smaller first)\n\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n\n            if (retval && justTest) {\n              // Register overlap\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    } // We will have only one contact in this case\n\n\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    xj.vsub(xi, r.ni);\n    r.ni.normalize(); // Contact point locations\n\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.scale(si.radius, r.ri);\n    r.rj.scale(-sj.radius, r.rj);\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n    this.result.push(r);\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n  }\n\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    // We will have one contact in this case\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n    r.ni.normalize(); // Needed?\n    // Vector from sphere center to contact point\n\n    r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      } // Make it relative to the body\n\n\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool; // we refer to the box as body j\n\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n\n    let found = false; // Store the resulting side penetration info\n\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      // Get the plane side normal (ns)\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n      const dot = box_to_sphere.dot(ns);\n\n      if (dot < h + R && dot > 0) {\n        // Intersects plane. Now check the other two dimensions\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist = Math.abs(dot - h - R);\n\n          if (side_distance === null || dist < side_distance) {\n            side_distance = dist;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (side_penetrations) {\n      found = true;\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r.ri); // Sphere r\n\n      r.ni.copy(side_ns);\n      r.ni.negate(r.ni); // Normal should be out of sphere\n\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies\n\n      r.ri.vadd(xi, r.ri);\n      r.ri.vsub(bi.position, r.ri);\n      r.rj.vadd(xj, r.rj);\n      r.rj.vsub(bj.position, r.rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    } // Check corners\n\n\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          } // World position of corner\n\n\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.scale(R, r.ri);\n            r.rj.copy(rj); // Make relative to bodies\n\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(rj);\n    rj = null; // Check edges\n\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get(); // r = edge center to sphere center\n\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          // Get edge tangent\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n          // Find the third side orthogonal to this one\n\n          let l = 0;\n\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri); // Make relative to bodies\n\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj); // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    //     return;\n    // }\n\n    let found = false; // Check corners\n\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i]; // World position of corner\n\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    } // Check side (plane) intersections\n\n\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i]; // Get world-transformed normal of the face\n\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        // Intersects plane. Now check if the sphere is inside the face polygon\n        const faceVerts = []; // Face vertices, in world coords\n\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          // Is the sphere center in the face polygon?\n          if (justTest) {\n            return true;\n          }\n\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact\n\n          worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n\n          return; // We only expect *one* face contact\n        } else {\n          // Edge?\n          for (let j = 0; j !== face.length; j++) {\n            // Get two world transformed vertices\n            const v1 = v3pool.get();\n            const v2 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v1);\n            qj.vmult(verts[face[(j + 2) % face.length]], v2);\n            xj.vadd(v1, v1);\n            xj.vadd(v2, v2); // Construct edge vector\n\n            const edge = sphereConvex_edge;\n            v2.vsub(v1, edge); // Construct the same vector, but normalized\n\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit); // p is xi projected onto the edge\n\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v1, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v1, p); // Compute a vector from p to the center of the sphere\n\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n            // AND if p is in between v1 and v2\n\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              // Collision if the edge-sphere distance is less than the radius\n              // Edge contact!\n              if (justTest) {\n                return true;\n              }\n\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri); // Should be relative to the body.\n\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n                v3pool.release(faceVerts[j]);\n              }\n\n              v3pool.release(v1);\n              v3pool.release(v2);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n\n            v3pool.release(v1);\n            v3pool.release(v2);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        } // Release world vertices\n\n\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    // Simply return the points behind the plane.\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n    let numContacts = 0;\n    const relpos = planeConvex_relpos;\n\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      // Get world convex vertex\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos);\n      const dot = worldNormal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n        // rj is now just the vector from the convex center to the vertex\n\n        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n\n    const result = this.result;\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n\n        const numContacts = result.length - numContactsBefore;\n\n        if (numContacts > 2) {\n          return;\n        }\n        /*\r\n          // Skip all but 1\r\n          for (let k = 0; k < numContacts - 1; k++) {\r\n              result.pop();\r\n          }\r\n        */\n\n      }\n    }\n  }\n\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    // The normal is the unit vector from sphere center to particle center\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal); // Contact normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n    const relpos = particlePlane_relpos;\n    xi.vsub(bj.position, relpos);\n    const dot = normal.dot(relpos);\n\n    if (dot <= 0.0) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal); // Contact normal is the plane normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n      // Get particle position projected on plane\n\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n      // rj is now the projected world position minus plane position\n\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local); // Convert position to relative the convex origin\n\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      } // For each world polygon in the polyhedra\n\n\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        // Construct world face vertices\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n\n      if (penetratedFaceIndex !== -1) {\n        // Setup contact\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n        //projectedToFace.copy(r.rj);\n        //qj.vmult(r.rj,r.rj);\n\n        penetratedFaceNormal.negate(r.ni); // Contact normal\n\n        r.ri.set(0, 0, 0); // Center of particle\n\n        const ri = r.ri;\n        const rj = r.rj; // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn('Point found inside convex, but did not find penetrating face!');\n      }\n    }\n  }\n\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v2 = sphereTrimesh_v2;\n    const relpos = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n    // Vertices\n\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n        v.vsub(localSpherePos, relpos);\n\n        if (relpos.lengthSquared() <= radiusSquared) {\n          // Safe up\n          v2.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n          v.vsub(spherePos, relpos);\n\n          if (justTest) {\n            return true;\n          }\n\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos);\n          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // Check all edges\n\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n        localSpherePos.vsub(edgeVertexB, tmp);\n        const positionAlongEdgeB = tmp.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp);\n        let positionAlongEdgeA = tmp.dot(edgeVector);\n\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          // Now check the orthogonal distance from edge to sphere center\n          localSpherePos.vsub(edgeVertexA, tmp);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n          const dist = tmp.distanceTo(localSpherePos);\n\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    } // Triangle faces\n\n\n    const va = sphereTrimesh_va;\n    const vb = sphereTrimesh_vb;\n    const vc = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va, tmp);\n      let dist = tmp.dot(normal);\n      normal.scale(dist, tmp);\n      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n      dist = tmp.distanceTo(localSpherePos);\n\n      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n        tmp.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n\n    triangles.length = 0;\n  }\n\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    // Make contacts!\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      // Get world vertex from trimesh\n      trimeshShape.getVertex(i, v); // Safe up\n\n      const v2 = new Vec3();\n      v2.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side\n\n      const relpos = planeTrimesh_relpos;\n      v.vsub(planePos, relpos);\n      const dot = normal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        // Get vertex position projected on plane\n\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos.dot(normal), projected);\n        v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  } // convexTrimesh(\n  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n  //   faceListA?: number[] | null, faceListB?: number[] | null,\n  // ) {\n  //   const sepAxis = convexConvex_sepAxis;\n  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n  //       return;\n  //   }\n  //   // Construct a temp hull for each triangle\n  //   const hullB = new ConvexPolyhedron();\n  //   hullB.faces = [[0,1,2]];\n  //   const va = new Vec3();\n  //   const vb = new Vec3();\n  //   const vc = new Vec3();\n  //   hullB.vertices = [\n  //       va,\n  //       vb,\n  //       vc\n  //   ];\n  //   for (let i = 0; i < sj.indices.length / 3; i++) {\n  //       const triangleNormal = new Vec3();\n  //       sj.getNormal(i, triangleNormal);\n  //       hullB.faceNormals = [triangleNormal];\n  //       sj.getTriangleVertices(i, va, vb, vc);\n  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //       if(!d){\n  //           triangleNormal.scale(-1, triangleNormal);\n  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //           if(!d){\n  //               continue;\n  //           }\n  //       }\n  //       const res: ConvexPolyhedronContactPoint[] = [];\n  //       const q = convexConvex_q;\n  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n  //       for(let j = 0; j !== res.length; j++){\n  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n  //               ri = r.ri,\n  //               rj = r.rj;\n  //           r.ni.copy(triangleNormal);\n  //           r.ni.negate(r.ni);\n  //           res[j].normal.negate(q);\n  //           q.mult(res[j].depth, q);\n  //           res[j].point.vadd(q, ri);\n  //           rj.copy(res[j].point);\n  //           // Contact points are in world coordinates. Transform back to relative\n  //           ri.vsub(xi,ri);\n  //           rj.vsub(xj,rj);\n  //           // Make relative to bodies\n  //           ri.vadd(xi, ri);\n  //           ri.vsub(bi.position, ri);\n  //           rj.vadd(xj, rj);\n  //           rj.vsub(bj.position, rj);\n  //           result.push(r);\n  //       }\n  //   }\n  // }\n\n\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\n\nNarrowphase.prototype[COLLISION_TYPES.boxBox] = Narrowphase.prototype.boxBox;\nNarrowphase.prototype[COLLISION_TYPES.boxConvex] = Narrowphase.prototype.boxConvex;\nNarrowphase.prototype[COLLISION_TYPES.boxParticle] = Narrowphase.prototype.boxParticle;\nNarrowphase.prototype[COLLISION_TYPES.sphereSphere] = Narrowphase.prototype.sphereSphere;\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeTrimesh] = Narrowphase.prototype.planeTrimesh;\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nNarrowphase.prototype[COLLISION_TYPES.sphereTrimesh] = Narrowphase.prototype.sphereTrimesh;\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.spherePlane] = Narrowphase.prototype.spherePlane; // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\n\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i]; // Get edge to the next vertex\n\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n\n  return true;\n}\n\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereBox] = Narrowphase.prototype.sphereBox;\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereConvex] = Narrowphase.prototype.sphereConvex;\nNarrowphase.prototype[COLLISION_TYPES.planeBox] = Narrowphase.prototype.planeBox;\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeConvex] = Narrowphase.prototype.planeConvex;\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.convexConvex] = Narrowphase.prototype.convexConvex; // Narrowphase.prototype[COLLISION_TYPES.convexTrimesh] = Narrowphase.prototype.convexTrimesh\n\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.planeParticle] = Narrowphase.prototype.planeParticle;\nconst particleSphere_normal = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereParticle] = Narrowphase.prototype.sphereParticle; // WIP\n\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.convexParticle] = Narrowphase.prototype.convexParticle;\nNarrowphase.prototype[COLLISION_TYPES.boxHeightfield] = Narrowphase.prototype.boxHeightfield;\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nNarrowphase.prototype[COLLISION_TYPES.convexHeightfield] = Narrowphase.prototype.convexHeightfield;\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\nNarrowphase.prototype[COLLISION_TYPES.sphereHeightfield] = Narrowphase.prototype.sphereHeightfield;\n\n/**\r\n * @class OverlapKeeper\r\n * @constructor\r\n */\nclass OverlapKeeper {\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i << 16 | j;\n  }\n  /**\r\n   * @method set\r\n   * @param {Number} i\r\n   * @param {Number} j\r\n   */\n\n\n  set(i, j) {\n    // Insertion sort. This way the diff will have linear complexity.\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n\n    while (key > current[index]) {\n      index++;\n    }\n\n    if (key === current[index]) {\n      return; // Pair was already added\n    }\n\n    for (let j = current.length - 1; j >= index; j--) {\n      current[j + 1] = current[j];\n    }\n\n    current[index] = key;\n  }\n  /**\r\n   * @method tick\r\n   */\n\n\n  tick() {\n    const tmp = this.current;\n    this.current = this.previous;\n    this.previous = tmp;\n    this.current.length = 0;\n  }\n  /**\r\n   * @method getDiff\r\n   * @param  {array} additions\r\n   * @param  {array} removals\r\n   */\n\n\n  getDiff(additions, removals) {\n    const a = this.current;\n    const b = this.previous;\n    const al = a.length;\n    const bl = b.length;\n    let j = 0;\n\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a[i];\n\n      while (keyA > b[j]) {\n        j++;\n      }\n\n      found = keyA === b[j];\n\n      if (!found) {\n        unpackAndPush(additions, keyA);\n      }\n    }\n\n    j = 0;\n\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b[i];\n\n      while (keyB > a[j]) {\n        j++;\n      }\n\n      found = a[j] === keyB;\n\n      if (!found) {\n        unpackAndPush(removals, keyB);\n      }\n    }\n  }\n\n}\n\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\n\n/**\r\n * @class TupleDictionary\r\n * @constructor\r\n */\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n  /**\r\n   * @method get\r\n   * @param  {Number} i\r\n   * @param  {Number} j\r\n   * @return {Object}\r\n   */\n\n\n  get(i, j) {\n    if (i > j) {\n      // swap\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.data[i + \"-\" + j];\n  }\n  /**\r\n   * @method set\r\n   * @param  {Number} i\r\n   * @param  {Number} j\r\n   * @param {Object} value\r\n   */\n\n\n  set(i, j, value) {\n    if (i > j) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    const key = i + \"-\" + j; // Check if key already exists\n\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n  }\n  /**\r\n   * @method reset\r\n   */\n\n\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n\n}\n\n/**\r\n * The physics world\r\n * @class World\r\n * @constructor\r\n * @extends EventTarget\r\n * @param {object} [options]\r\n * @param {Vec3} [options.gravity]\r\n * @param {boolean} [options.allowSleep]\r\n * @param {Broadphase} [options.broadphase]\r\n * @param {Solver} [options.solver]\r\n * @param {boolean} [options.quatNormalizeFast]\r\n * @param {number} [options.quatNormalizeSkip]\r\n */\nclass World extends EventTarget {\n  // Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n  // Makes bodies go to sleep when they've been inactive.\n  // All the current contacts (instances of ContactEquation) in the world.\n  // How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n  // Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n  // The wall-clock time since simulation start.\n  // Number of timesteps taken since start.\n  // Default and last timestep sizes.\n  // The broadphase algorithm to use. Default is NaiveBroadphase.\n  // All bodies in this world\n  // True if any bodies are not sleeping, false if every body is sleeping.\n  // The solver algorithm to use. Default is GSSolver.\n  // CollisionMatrix from the previous step.\n  // All added materials.\n  // Used to look up a ContactMaterial given two instances of Material.\n  // This contact material is used if no suitable contactmaterial is found for a contact.\n  // Time accumulator for interpolation. See http://gafferongames.com/game-physics/fix-your-timestep/\n  // Dispatched after a body has been added to the world.\n  // Dispatched after a body has been removed from the world.\n  constructor(options = {}) {\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    this.time = 0.0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n\n    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.materials = [];\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material('default');\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  /**\r\n   * Get the contact material between materials m1 and m2\r\n   * @method getContactMaterial\r\n   * @param {Material} m1\r\n   * @param {Material} m2\r\n   * @return {ContactMaterial} The contact material if it was found.\r\n   */\n\n\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  /**\r\n   * Get number of objects in the world.\r\n   * @method numObjects\r\n   * @return {Number}\r\n   * @deprecated\r\n   */\n\n\n  numObjects() {\n    return this.bodies.length;\n  }\n  /**\r\n   * Store old collision state info\r\n   * @method collisionMatrixTick\r\n   */\n\n\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  /**\r\n   * Add a constraint to the simulation.\r\n   * @method addConstraint\r\n   * @param {Constraint} c\r\n   */\n\n\n  addConstraint(c) {\n    this.constraints.push(c);\n  }\n  /**\r\n   * Removes a constraint\r\n   * @method removeConstraint\r\n   * @param {Constraint} c\r\n   */\n\n\n  removeConstraint(c) {\n    const idx = this.constraints.indexOf(c);\n\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  /**\r\n   * Raycast test\r\n   * @method rayTest\r\n   * @param {Vec3} from\r\n   * @param {Vec3} to\r\n   * @param {RaycastResult} result\r\n   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\r\n   */\n\n\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      // Do raycastClosest\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      // Do raycastAll\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  /**\r\n   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\r\n   * @method raycastAll\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {Function} callback\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastAll(from, to, options = {}, callback) {\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\r\n   * @method raycastAny\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {RaycastResult} result\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastAny(from, to, options = {}, result) {\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Ray cast, and return information of the closest hit.\r\n   * @method raycastClosest\r\n   * @param  {Vec3} from\r\n   * @param  {Vec3} to\r\n   * @param  {Object} options\r\n   * @param  {number} [options.collisionFilterMask=-1]\r\n   * @param  {number} [options.collisionFilterGroup=-1]\r\n   * @param  {boolean} [options.skipBackfaces=false]\r\n   * @param  {boolean} [options.checkCollisionResponse=true]\r\n   * @param  {RaycastResult} result\r\n   * @return {boolean} True if any body was hit.\r\n   */\n\n\n  raycastClosest(from, to, options = {}, result) {\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay$1.intersectWorld(this, options);\n  }\n  /**\r\n   * Add a rigid body to the simulation.\r\n   * @method add\r\n   * @param {Body} body\r\n   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\r\n   * @todo Adding an array of bodies should be possible. This would save some loops too\r\n   */\n\n\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  /**\r\n   * Remove a rigid body from the simulation.\r\n   * @method remove\r\n   * @param {Body} body\r\n   */\n\n\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n\n    if (idx !== -1) {\n      bodies.splice(idx, 1); // Todo: should use a garbage free method\n      // Recompute index\n\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  } // TODO Make a faster map\n\n\n  getShapeById(id) {\n    const bodies = this.bodies;\n\n    for (let i = 0, bl = bodies.length; i < bl; i++) {\n      const shapes = bodies[i].shapes;\n\n      for (let j = 0, sl = shapes.length; j < sl; j++) {\n        const shape = shapes[j];\n\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n  }\n  /**\r\n   * Adds a material to the World.\r\n   * @method addMaterial\r\n   * @param {Material} m\r\n   * @todo Necessary?\r\n   */\n\n\n  addMaterial(m) {\n    this.materials.push(m);\n  }\n  /**\r\n   * Adds a contact material to the World\r\n   * @method addContactMaterial\r\n   * @param {ContactMaterial} cmat\r\n   */\n\n\n  addContactMaterial(cmat) {\n    // Add contact material\n    this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  /**\r\n   * Step the physics world forward in time.\r\n   *\r\n   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\r\n   *\r\n   * @method step\r\n   * @param {Number} dt                       The fixed time step size to use.\r\n   * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\r\n   * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\r\n   *\r\n   * @example\r\n   *     // fixed timestepping without interpolation\r\n   *     world.step(1/60);\r\n   *\r\n   * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\r\n   */\n\n\n  step(dt, timeSinceLastCalled = 0, maxSubSteps = 10) {\n    if (timeSinceLastCalled === 0) {\n      // Fixed, simple stepping\n      this.internalStep(dt); // Increment time\n\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      let substeps = 0;\n\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        // Do fixed steps to catch up\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n      }\n\n      const t = this.accumulator % dt / dt;\n\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b = this.bodies[j];\n        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);\n        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);\n        b.previousQuaternion.normalize();\n      }\n\n      this.time += timeSinceLastCalled;\n    }\n  }\n\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.numObjects();\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    const gnorm = gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add gravity to all objects\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type === DYNAMIC) {\n        // Only for dynamic bodies\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    } // Update subsystems\n\n\n    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {\n      this.subsystems[i].update();\n    } // Collision detection\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    p1.length = 0; // Clean up pair arrays from last step\n\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    } // Remove constrained pairs with collideConnected == false\n\n\n    let Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n\n      if (!c.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.collisionMatrixTick(); // Generate contacts\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n\n    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n    const NoldFrictionEquations = this.frictionEquations.length;\n\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused\n    this.frictionEquations, frictionEquationPool);\n\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    } // Loop over all collisions\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add all friction eqs\n\n\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n\n    const ncontacts = contacts.length;\n\n    for (let k = 0; k !== ncontacts; k++) {\n      // Current contact\n      const c = contacts[k]; // Get current collision indeces\n\n      const bi = c.bi;\n      const bj = c.bj;\n      const si = c.si;\n      const sj = c.sj; // Get collision properties\n\n      let cm;\n\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n\n      let mu = cm.friction; // c.restitution = cm.restitution;\n      // If friction or restitution were specified in the material, use them\n\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          mu = bi.material.friction * bj.material.friction;\n        }\n\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      } // c.setSpookParams(\n      //           cm.contactEquationStiffness,\n      //           cm.contactEquationRelaxation,\n      //           dt\n      //       );\n\n\n      solver.addEquation(c); // // Add friction constraint equation\n      // if(mu > 0){\n      // \t// Create 2 tangent equations\n      // \tconst mug = mu * gnorm;\n      // \tconst reducedMass = (bi.invMass + bj.invMass);\n      // \tif(reducedMass > 0){\n      // \t\treducedMass = 1/reducedMass;\n      // \t}\n      // \tconst pool = frictionEquationPool;\n      // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tthis.frictionEquations.push(c1, c2);\n      // \tc1.bi = c2.bi = bi;\n      // \tc1.bj = c2.bj = bj;\n      // \tc1.minForce = c2.minForce = -mug*reducedMass;\n      // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n      // \t// Copy over the relative vectors\n      // \tc1.ri.copy(c.ri);\n      // \tc1.rj.copy(c.rj);\n      // \tc2.ri.copy(c.ri);\n      // \tc2.rj.copy(c.rj);\n      // \t// Construct tangents\n      // \tc.ni.tangents(c1.t, c2.t);\n      //           // Set spook params\n      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c1.enabled = c2.enabled = c.enabled;\n      // \t// Add equations to solver\n      // \tsolver.addEquation(c1);\n      // \tsolver.addEquation(c2);\n      // }\n\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      } // Now we know that i and j are in contact. Set collision matrix state\n\n\n      this.collisionMatrix.set(bi, bj, true);\n\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        // First contact!\n        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n\n    this.emitContactEvents();\n\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    } // Wake up bodies\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    } // Add user-added constraints\n\n\n    Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n      c.update();\n\n      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {\n        const eq = c.equations[j];\n        solver.addEquation(eq);\n      }\n    } // Solve the constrained system\n\n\n    solver.solve(dt, this);\n\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    } // Remove all contacts from solver\n\n\n    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n    const pow = Math.pow;\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type & DYNAMIC) {\n        // Only for dynamic bodies\n        const ld = pow(1.0 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n\n        if (av) {\n          const ad = pow(1.0 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent); // Invoke pre-step callbacks\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.preStep) {\n        bi.preStep.call(bi);\n      }\n    } // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n\n    this.clearForces();\n    this.broadphase.dirty = true;\n\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    } // Update world time\n\n\n    this.time += dt;\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent); // Invoke post-step callbacks\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const postStep = bi.postStep;\n\n      if (postStep) {\n        postStep.call(bi);\n      }\n    } // Sleeping update\n\n\n    let hasActiveBodies = true;\n\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n\n    this.hasActiveBodies = hasActiveBodies;\n  }\n  /**\r\n   * Sets all body forces in the world to zero.\r\n   * @method clearForces\r\n   */\n\n\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const force = b.force;\n      const tau = b.torque;\n      b.force.set(0, 0, 0);\n      b.torque.set(0, 0, 0);\n    }\n  }\n\n} // Temp stuff\n\nconst tmpAABB1 = new AABB();\nconst tmpRay$1 = new Ray(); // performance.now()\n\nif (typeof performance === 'undefined') {\n  performance = {};\n}\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n// Reusable event objects to save memory.\n\nconst World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nconst World_step_preStepEvent = {\n  type: 'preStep'\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nconst World_step_p1 = [];\nconst World_step_p2 = [];\n\nWorld.prototype.emitContactEvents = (() => {\n  const additions = [];\n  const removals = [];\n  const beginContactEvent = {\n    type: 'beginContact',\n    bodyA: null,\n    bodyB: null\n  };\n  const endContactEvent = {\n    type: 'endContact',\n    bodyA: null,\n    bodyB: null\n  };\n  const beginShapeContactEvent = {\n    type: 'beginShapeContact',\n    bodyA: null,\n    bodyB: null,\n    shapeA: null,\n    shapeB: null\n  };\n  const endShapeContactEvent = {\n    type: 'endShapeContact',\n    bodyA: null,\n    bodyB: null,\n    shapeA: null,\n    shapeB: null\n  };\n  return function () {\n    const hasBeginContact = this.hasAnyEventListener('beginContact');\n    const hasEndContact = this.hasAnyEventListener('endContact');\n\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        beginShapeContactEvent.bodyA = shapeA.body;\n        beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        endShapeContactEvent.bodyA = shapeA.body;\n        endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  };\n})();\n\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, World };\n","import {\r\n  World,\r\n  NaiveBroadphase,\r\n  SAPBroadphase,\r\n  Body,\r\n  Plane,\r\n  Box,\r\n  Vec3,\r\n  ConvexPolyhedron,\r\n  Cylinder,\r\n  Heightfield,\r\n  Particle,\r\n  Sphere,\r\n  Trimesh,\r\n  PointToPointConstraint,\r\n  ConeTwistConstraint,\r\n  HingeConstraint,\r\n  DistanceConstraint,\r\n  LockConstraint,\r\n  Constraint,\r\n  Spring,\r\n  Material,\r\n  Quaternion,\r\n  Ray,\r\n  RaycastResult,\r\n} from 'cannon-es'\r\n\r\nlet bodies = {}\r\nconst springs = {}\r\nconst rays = {}\r\nconst world = new World()\r\nconst config = { step: 1 / 60 }\r\nconst subscriptions = {}\r\nconst tempVector = new Vec3()\r\n\r\nfunction createShape(type, args) {\r\n  switch (type) {\r\n    case 'Box':\r\n      return new Box(new Vec3(...args)) // halfExtents\r\n    case 'ConvexPolyhedron':\r\n      const [v, f, n] = args\r\n      return new ConvexPolyhedron({\r\n        vertices: v.map(([x, y, z]) => new Vec3(x, y, z)),\r\n        normals: n ? n.map(([x, y, z]) => new Vec3(x, y, z)) : null,\r\n        faces: f,\r\n      })\r\n    case 'Cylinder':\r\n      return new Cylinder(...args) // [ radiusTop, radiusBottom, height, numSegments ] = args\r\n    case 'Heightfield':\r\n      return new Heightfield(...args) // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\r\n    case 'Particle':\r\n      return new Particle() // no args\r\n    case 'Plane':\r\n      return new Plane() // no args, infinite x and y\r\n    case 'Sphere':\r\n      return new Sphere(...args) // [radius] = args\r\n    case 'Trimesh':\r\n      return new Trimesh(...args) // [vertices, indices] = args\r\n  }\r\n}\r\n\r\nfunction syncBodies() {\r\n  self.postMessage({ op: 'sync', bodies: world.bodies.map((body) => body.uuid) })\r\n  bodies = world.bodies.reduce((acc, body) => ({ ...acc, [body.uuid]: body }), {})\r\n}\r\n\r\nself.onmessage = (e) => {\r\n  const { op, uuid, type, positions, quaternions, props } = e.data\r\n\r\n  switch (op) {\r\n    case 'init': {\r\n      const {\r\n        gravity,\r\n        tolerance,\r\n        step,\r\n        iterations,\r\n        allowSleep,\r\n        broadphase,\r\n        axisIndex,\r\n        defaultContactMaterial,\r\n      } = props\r\n      const broadphases = { NaiveBroadphase, SAPBroadphase }\r\n      world.allowSleep = allowSleep\r\n      world.gravity.set(gravity[0], gravity[1], gravity[2])\r\n      world.solver.tolerance = tolerance\r\n      world.solver.iterations = iterations\r\n      world.broadphase = new (broadphases[broadphase + 'Broadphase'] || NaiveBroadphase)(world)\r\n      world.broadphase.axisIndex = axisIndex ?? 0\r\n      Object.assign(world.defaultContactMaterial, defaultContactMaterial)\r\n      config.step = step\r\n      break\r\n    }\r\n    case 'step': {\r\n      world.step(config.step)\r\n      const numberOfBodies = world.bodies.length\r\n      for (let i = 0; i < numberOfBodies; i++) {\r\n        let b = world.bodies[i],\r\n          p = b.position,\r\n          q = b.quaternion\r\n        positions[3 * i + 0] = p.x\r\n        positions[3 * i + 1] = p.y\r\n        positions[3 * i + 2] = p.z\r\n        quaternions[4 * i + 0] = q.x\r\n        quaternions[4 * i + 1] = q.y\r\n        quaternions[4 * i + 2] = q.z\r\n        quaternions[4 * i + 3] = q.w\r\n      }\r\n      const observations = []\r\n      for (const id of Object.keys(subscriptions)) {\r\n        const [uuid, type] = subscriptions[id]\r\n        let value = bodies[uuid][type]\r\n        if (value instanceof Vec3) value = value.toArray()\r\n        else if (value instanceof Quaternion) {\r\n          value.toEuler(tempVector)\r\n          value = tempVector.toArray()\r\n        }\r\n        observations.push([id, value])\r\n      }\r\n      self.postMessage(\r\n        {\r\n          op: 'frame',\r\n          positions,\r\n          quaternions,\r\n          observations,\r\n          active: world.hasActiveBodies,\r\n        },\r\n        [positions.buffer, quaternions.buffer]\r\n      )\r\n      break\r\n    }\r\n    case 'addBodies': {\r\n      for (let i = 0; i < uuid.length; i++) {\r\n        const {\r\n          args = [],\r\n          position = [0, 0, 0],\r\n          rotation = [0, 0, 0],\r\n          scale = [1, 1, 1],\r\n          velocity = [0, 0, 0],\r\n          angularVelocity = [0, 0, 0],\r\n          linearFactor = [1, 1, 1],\r\n          angularFactor = [1, 1, 1],\r\n          type: bodyType,\r\n          mass,\r\n          material,\r\n          shapes,\r\n          onCollide,\r\n          ...extra\r\n        } = props[i]\r\n\r\n        const body = new Body({\r\n          ...extra,\r\n          mass: bodyType === 'Static' ? 0 : mass,\r\n          type: bodyType ? Body[bodyType.toUpperCase()] : undefined,\r\n          material: material ? new Material(material) : undefined,\r\n        })\r\n        body.uuid = uuid[i]\r\n\r\n        if (type === 'Compound') {\r\n          shapes.forEach(({ type, args, position, rotation, material, ...extra }) => {\r\n            const shapeBody = body.addShape(\r\n              createShape(type, args),\r\n              position ? new Vec3(...position) : undefined,\r\n              rotation ? new Quaternion().setFromEuler(...rotation) : undefined\r\n            )\r\n            if (material) shapeBody.material = new Material(material)\r\n            Object.assign(shapeBody, extra)\r\n          })\r\n        } else {\r\n          body.addShape(createShape(type, args))\r\n        }\r\n\r\n        body.position.set(position[0], position[1], position[2])\r\n        body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2])\r\n        body.velocity.set(velocity[0], velocity[1], velocity[2])\r\n        body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2])\r\n        body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2])\r\n        body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2])\r\n        world.addBody(body)\r\n\r\n        if (onCollide)\r\n          body.addEventListener('collide', ({ type, body, target, contact }) => {\r\n            const { ni, ri, rj } = contact\r\n            self.postMessage({\r\n              op: 'event',\r\n              type,\r\n              body: body.uuid,\r\n              target: target.uuid,\r\n              contact: {\r\n                ni: ni.toArray(),\r\n                ri: ri.toArray(),\r\n                rj: rj.toArray(),\r\n                impactVelocity: contact.getImpactVelocityAlongNormal(),\r\n              },\r\n              collisionFilters: {\r\n                bodyFilterGroup: body.collisionFilterGroup,\r\n                bodyFilterMask: body.collisionFilterMask,\r\n                targetFilterGroup: target.collisionFilterGroup,\r\n                targetFilterMask: target.collisionFilterMask,\r\n              },\r\n            })\r\n          })\r\n      }\r\n      syncBodies()\r\n      break\r\n    }\r\n    case 'removeBodies': {\r\n      for (let i = 0; i < uuid.length; i++) world.removeBody(bodies[uuid[i]])\r\n      syncBodies()\r\n      break\r\n    }\r\n    case 'subscribe': {\r\n      const { id, type } = props\r\n      subscriptions[id] = [uuid, type]\r\n      break\r\n    }\r\n    case 'unsubscribe': {\r\n      delete subscriptions[props]\r\n      break\r\n    }\r\n    case 'setPosition':\r\n      bodies[uuid].position.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setQuaternion':\r\n      bodies[uuid].quaternion.setFromEuler(props[0], props[1], props[2])\r\n      break\r\n    case 'setVelocity':\r\n      bodies[uuid].velocity.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setAngularVelocity':\r\n      bodies[uuid].angularVelocity.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setLinearFactor':\r\n      bodies[uuid].linearFactor.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setAngularFactor':\r\n      bodies[uuid].angularFactor.set(props[0], props[1], props[2])\r\n      break\r\n    case 'setMass':\r\n      bodies[uuid].mass = props\r\n      break\r\n    case 'setLinearDamping':\r\n      bodies[uuid].linearDamping = props\r\n      break\r\n    case 'setAngularDamping':\r\n      bodies[uuid].angularDamping = props\r\n      break\r\n    case 'setAllowSleep':\r\n      bodies[uuid].allowSleep = props\r\n      break\r\n    case 'setSleepSpeedLimit':\r\n      bodies[uuid].sleepSpeedLimit = props\r\n      break\r\n    case 'setSleepTimeLimit':\r\n      bodies[uuid].sleepTimeLimit = props\r\n      break\r\n    case 'setCollisionFilterGroup':\r\n      bodies[uuid].collisionFilterGroup = props\r\n      break\r\n    case 'setCollisionFilterMask':\r\n      bodies[uuid].collisionFilterMask = props\r\n      break\r\n    case 'setCollisionFilterMask':\r\n      bodies[uuid].collisionFilterMask = props\r\n      break\r\n    case 'setFixedRotation':\r\n      bodies[uuid].fixedRotation = props\r\n      break\r\n    case 'applyForce':\r\n      bodies[uuid].applyForce(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'applyImpulse':\r\n      bodies[uuid].applyImpulse(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'applyLocalForce':\r\n      bodies[uuid].applyLocalForce(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'applyLocalImpulse':\r\n      bodies[uuid].applyLocalImpulse(new Vec3(...props[0]), new Vec3(...props[1]))\r\n      break\r\n    case 'addConstraint': {\r\n      const [bodyA, bodyB, optns] = props\r\n      let { pivotA, pivotB, axisA, axisB, ...options } = optns\r\n\r\n      // is there a better way to enforce defaults?\r\n      pivotA = Array.isArray(pivotA) ? new Vec3(...pivotA) : undefined\r\n      pivotB = Array.isArray(pivotB) ? new Vec3(...pivotB) : undefined\r\n      axisA = Array.isArray(axisA) ? new Vec3(...axisA) : undefined\r\n      axisB = Array.isArray(axisB) ? new Vec3(...axisB) : undefined\r\n\r\n      let constraint\r\n\r\n      switch (type) {\r\n        case 'PointToPoint':\r\n          constraint = new PointToPointConstraint(\r\n            bodies[bodyA],\r\n            pivotA,\r\n            bodies[bodyB],\r\n            pivotB,\r\n            optns.maxForce\r\n          )\r\n          break\r\n        case 'ConeTwist':\r\n          constraint = new ConeTwistConstraint(bodies[bodyA], bodies[bodyB], {\r\n            pivotA,\r\n            pivotB,\r\n            axisA,\r\n            axisB,\r\n            ...options,\r\n          })\r\n          break\r\n        case 'Hinge':\r\n          constraint = new HingeConstraint(bodies[bodyA], bodies[bodyB], {\r\n            pivotA,\r\n            pivotB,\r\n            axisA,\r\n            axisB,\r\n            ...options,\r\n          })\r\n          break\r\n        case 'Distance':\r\n          constraint = new DistanceConstraint(bodies[bodyA], bodies[bodyB], optns.distance, optns.maxForce)\r\n          break\r\n        case 'Lock':\r\n          constraint = new LockConstraint(bodies[bodyA], bodies[bodyB], optns)\r\n          break\r\n        default:\r\n          constraint = new Constraint(bodies[bodyA], bodies[bodyB], optns)\r\n          break\r\n      }\r\n      constraint.uuid = uuid\r\n      world.addConstraint(constraint)\r\n      break\r\n    }\r\n    case 'removeConstraint':\r\n      world.removeConstraint(uuid)\r\n      break\r\n\r\n    case 'enableConstraint':\r\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => c.enable())\r\n      break\r\n\r\n    case 'disableConstraint':\r\n      world.constraints.filter(({ uuid: thisId }) => thisId === uuid).map((c) => c.disable())\r\n      break\r\n\r\n    case 'addSpring': {\r\n      const [bodyA, bodyB, optns] = props\r\n      let { worldAnchorA, worldAnchorB, localAnchorA, localAnchorB, restLength, stiffness, damping } = optns\r\n\r\n      worldAnchorA = Array.isArray(worldAnchorA) ? new Vec3(...worldAnchorA) : undefined\r\n      worldAnchorB = Array.isArray(worldAnchorB) ? new Vec3(...worldAnchorB) : undefined\r\n      localAnchorA = Array.isArray(localAnchorA) ? new Vec3(...localAnchorA) : undefined\r\n      localAnchorB = Array.isArray(localAnchorB) ? new Vec3(...localAnchorB) : undefined\r\n\r\n      let spring = new Spring(bodies[bodyA], bodies[bodyB], {\r\n        worldAnchorA,\r\n        worldAnchorB,\r\n        localAnchorA,\r\n        localAnchorB,\r\n        restLength,\r\n        stiffness,\r\n        damping,\r\n      })\r\n\r\n      spring.uuid = uuid\r\n\r\n      let postStepSpring = (e) => spring.applyForce()\r\n\r\n      springs[uuid] = postStepSpring\r\n\r\n      // Compute the force after each step\r\n      world.addEventListener('postStep', springs[uuid])\r\n      break\r\n    }\r\n    case 'removeSpring': {\r\n      world.removeEventListener('postStep', springs[uuid])\r\n      break\r\n    }\r\n    case 'addRay': {\r\n      const { from, to, ...options } = props\r\n      const ray = new Ray(from ? new Vec3(...from) : undefined, to ? new Vec3(...to) : undefined)\r\n      options.mode = Ray[options.mode.toUpperCase()]\r\n      options.result = new RaycastResult()\r\n      rays[uuid] = () => {\r\n        ray.intersectWorld(world, options)\r\n        const {\r\n          body,\r\n          shape,\r\n          rayFromWorld,\r\n          rayToWorld,\r\n          hitNormalWorld,\r\n          hitPointWorld,\r\n          ...rest\r\n        } = options.result\r\n        self.postMessage({\r\n          op: 'event',\r\n          type: 'rayhit',\r\n          ray: {\r\n            from,\r\n            to,\r\n            direction: ray.direction.toArray(),\r\n            collisionFilterGroup: ray.collisionFilterGroup,\r\n            collisionFilterMask: ray.collisionFilterMask,\r\n            uuid,\r\n          },\r\n          body: body ? body.uuid : null,\r\n          shape: shape ? { ...shape, body: body.uuid } : null,\r\n          rayFromWorld: rayFromWorld.toArray(),\r\n          rayToWorld: rayToWorld.toArray(),\r\n          hitNormalWorld: hitNormalWorld.toArray(),\r\n          hitPointWorld: hitPointWorld.toArray(),\r\n          ...rest,\r\n        })\r\n      }\r\n      world.addEventListener('preStep', rays[uuid])\r\n      break\r\n    }\r\n    case 'removeRay': {\r\n      world.removeEventListener('preStep', rays[uuid])\r\n      delete rays[uuid]\r\n      break\r\n    }\r\n  }\r\n}\r\n"],"names":["Mat3","constructor","elements","identity","e","setZero","setTrace","vector","x","y","z","getTrace","target","Vec3","vmult","v","smult","s","i","length","mmult","matrix","j","sum","k","scale","t","solve","b","nr","nc","eqns","push","n","np","kp","p","multiplier","isNaN","Infinity","toString","row","column","value","undefined","copy","r","sep","reverse","setRotationFromQuaternion","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","Mt","M","cross","vx","vy","vz","set","vadd","vsub","crossmat","normalize","Math","sqrt","invN","unit","ninv","lengthSquared","dot","distanceTo","px","py","pz","distanceSquared","scalar","vmul","addScaledVector","isZero","negate","tangents","t1","t2","norm","Vec3_tangents_n","inorm","randVec","Vec3_tangents_randVec","abs","toArray","lerp","almostEquals","precision","almostZero","isAntiparallelTo","antip_neg","clone","ZERO","UNIT_X","UNIT_Y","UNIT_Z","AABB","options","lowerBound","upperBound","setFromPoints","points","position","quaternion","skinSize","l","u","tmp","aabb","extend","min","max","overlaps","l1","u1","l2","u2","overlapsX","overlapsY","overlapsZ","volume","contains","getCorners","a","c","d","f","g","h","toLocalFrame","frame","corners","transformIntoFrame_corners","corner","pointToLocal","toWorldFrame","pointToWorld","overlapsRay","ray","direction","from","dirFracX","dirFracY","dirFracZ","t3","t4","t5","t6","tmin","tmax","ArrayCollisionMatrix","get","bi","bj","index","temp","reset","setNumObjects","EventTarget","addEventListener","type","listener","_listeners","listeners","includes","hasEventListener","hasAnyEventListener","removeEventListener","indexOf","splice","dispatchEvent","event","listenerArray","call","Quaternion","setFromAxisAngle","angle","sin","cos","toAxisAngle","targetAxis","acos","setFromVectors","sfv_t1","sfv_t2","PI","mult","quat","ax","ay","az","aw","bx","by","bz","bw","inverse","conjugate","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","Error","setFromEuler","c1","c2","c3","s1","s2","s3","slerp","toQuat","omega","cosom","sinom","scale0","scale1","integrate","angularVelocity","dt","angularFactor","half_dt","SHAPE_TYPES","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH","Shape","id","idCounter","boundingSphereRadius","collisionResponse","collisionFilterGroup","collisionFilterMask","material","body","updateBoundingSphereRadius","calculateLocalInertia","mass","calculateWorldAABB","pos","types","Transform","worldPoint","result","pointToLocalFrame","localPoint","pointToWorldFrame","vectorToWorldFrame","localVector","tmpQuat","vectorToLocalFrame","worldVector","ConvexPolyhedron","props","vertices","faces","normals","axes","faceNormals","computeNormals","worldVertices","worldVerticesNeedsUpdate","worldFaceNormals","worldFaceNormalsNeedsUpdate","uniqueAxes","slice","uniqueEdges","computeEdges","edges","edge","face","numVertices","found","getFaceNormal","vertex","console","error","warn","va","vb","vc","computeNormal","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","Number","MAX_VALUE","worldVertsB1","worldb","clipFaceAgainstHull","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","hullA","numFacesA","fi","testSepAxis","numFacesB","e0","e1","dist","axis","project","maxminA","maxminB","maxA","minA","maxB","minB","d0","d1","depth","aabbmax","aabbmin","computeLocalAABB","getPlaneConstantOfFace","face_i","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","worldVertsB2","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq","planeEqWS","clipFaceAgainstPlane","shift","log","point","normal","inVertices","outVertices","planeNormal","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","vi","newv","computeWorldVertices","verts","worldVerts","computeWorldFaceNormals","N","worldNormals","max2","norm2","minx","miny","minz","maxx","maxy","maxz","tempWorldVertex","getAveragePointLocal","transformAllPoints","offset","pointIsInside","pointInside","vToP","r1","vToPointInside","r2","cb","ab","shape","localAxis","localOrigin","vs","add","val","Box","halfExtents","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateInertia","getSideNormals","sixTargetVectors","sides","ex","forEachWorldCorner","callback","worldCornerTempPos","worldCornersTemp","wc","BODY_SLEEP_STATES","AWAKE","SLEEPY","SLEEPING","Body","world","preStep","postStep","vlambda","previousPosition","interpolatedPosition","initPosition","velocity","initVelocity","force","invMass","linearDamping","STATIC","DYNAMIC","allowSleep","sleepState","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","wakeUpAfterNarrowphase","torque","initQuaternion","previousQuaternion","interpolatedQuaternion","initAngularVelocity","shapes","shapeOffsets","shapeOrientations","inertia","invInertia","invInertiaWorld","invMassSolve","invInertiaSolve","invInertiaWorldSolve","fixedRotation","angularDamping","linearFactor","aabbNeedsUpdate","boundingRadius","wlambda","addShape","updateMassProperties","wakeUp","prevState","wakeupEvent","sleep","sleepTick","time","speedSquared","speedLimitSquared","sleepyEvent","sleepEvent","updateSolveMassProperties","KINEMATIC","_offset","_orientation","orientation","updateBoundingRadius","radius","computeAABB","tmpVec","tmpQuat$1","bodyQuat","shapeAABB","computeAABB_shapeAABB","updateInertiaWorld","I","m1","uiw_m1","m2","uiw_m2","applyForce","relativePoint","rotForce","Body_applyForce_rotForce","applyLocalForce","localForce","worldForce","Body_applyLocalForce_worldForce","relativePointWorld","Body_applyLocalForce_relativePointWorld","applyImpulse","impulse","velo","Body_applyImpulse_velo","rotVelo","Body_applyImpulse_rotVelo","applyLocalImpulse","localImpulse","worldImpulse","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_relativePoint","Body_updateMassProperties_halfExtents","fixed","getVelocityAtWorldPoint","quatNormalize","quatNormalizeFast","angularVelo","iMdt","tx","ty","tz","COLLIDE_EVENT_NAME","Broadphase","useBoundingBoxes","dirty","collisionPairs","p1","p2","needBroadphaseCollision","bodyA","bodyB","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","boundingRadiusSum2","makePairsUnique","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","id1","id2","key","keys","pop","pairIndex","setWorld","aabbQuery","boundingSphereCheck","sa","sb","pow","NaiveBroadphase","bodies","RaycastResult","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","hasHit","hitFaceIndex","distance","shouldStop","abort","Ray","to","checkCollisionResponse","skipBackfaces","mode","ANY","intersectWorld","updateDirection","getAABB","tmpAABB","tmpArray","broadphase","intersectBodies","intersectBody","xi","intersectBody_xi","qi","intersectBody_qi","intersectShape","distanceFromIntersection","intersectMethod","_intersectBox","box","reportedShape","_intersectConvex","_intersectPlane","worldNormal","len","planeToFrom","planeToTo","n_dot_dir","planePointToFrom","dir_scaled_with_t","reportIntersection","_intersectHeightfield","data","elementSize","localRay","intersectHeightfield_localRay","intersectHeightfield_index","iMinX","iMinY","iMaxX","iMaxY","getIndexOfPosition","getAabbAtIndex","getConvexTrianglePillar","pillarOffset","worldPillarOffset","pillarConvex","intersectConvexOptions","_intersectSphere","sphere","delta","intersectionPoint","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","d2","intersectConvex_normal","intersectConvex_vector","faceList","fromToDistance","Nfaces","faceNormal","intersectPoint","pointInTriangle","_intersectTrimesh","mesh","intersectTrimesh_normal","triangles","intersectTrimesh_triangles","treeTransform","intersectTrimesh_treeTransform","localDirection","intersectTrimesh_localDirection","localFrom","intersectTrimesh_localFrom","localTo","intersectTrimesh_localTo","worldIntersectPoint","intersectTrimesh_worldIntersectPoint","intersectTrimesh_worldNormal","indices","fromToDistanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","ALL","CLOSEST","v1","v2","v0","dot00","dot01","dot02","dot11","dot12","prototype","intersectTrimesh_localAABB","intersect","SAPBroadphase","axisList","axisIndex","_addBodyHandler","_removeBodyHandler","idx","sortList","checkBounds","insertionSortX","insertionSortY","insertionSortZ","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","lower","upper","biPos","bjPos","ri","rj","boundA2","boundB1","Utils","defaults","Constraint","collideConnected","wakeUpBodies","equations","update","enable","eqs","enabled","disable","JacobianElement","spatial","rotational","multiplyElement","element","multiplyVectors","Equation","minForce","maxForce","eps","jacobianElementA","jacobianElementB","setSpookParams","stiffness","relaxation","timeStep","computeB","GW","computeGW","Gq","computeGq","GiMf","computeGiMf","GA","GB","xj","vj","wi","wj","computeGWlambda","ti","fj","tj","invMassi","invMassj","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","computeGiMGt","invIi","invIj","tmp$1","addToWlambda","deltalambda","addToWlambda_temp","computeC","ContactEquation","restitution","ni","rixn","ContactEquation_computeB_temp1","rjxn","ContactEquation_computeB_temp2","taui","tauj","penetrationVec","ContactEquation_computeB_temp3","ePlusOne","B","getImpactVelocityAlongNormal","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","relVel","ContactEquation_getImpactVelocityAlongNormal_relVel","PointToPointConstraint","pivotA","pivotB","equationX","equationY","equationZ","ConeEquation","axisA","axisB","nj","nixnj","tmpVec1","njxni","tmpVec2","RotationalEquation","maxAngle","tmpVec1$1","tmpVec2$1","ConeTwistConstraint","coneEquation","twistEquation","twistAngle","cone","twist","DistanceConstraint","eq","distanceEquation","halfDist","LockConstraint","halfWay","xA","xB","yA","yB","zA","zB","rotationalEquation1","rotationalEquation2","r3","rotationalEquation3","motor","motorEquation","RotationalMotorEquation","targetVelocity","HingeConstraint","rotational1","rotational2","enableMotor","disableMotor","setMotorSpeed","speed","setMotorMaxForce","worldAxisA","HingeConstraint_update_tmpVec1","worldAxisB","HingeConstraint_update_tmpVec2","FrictionEquation","slipForce","rixt","FrictionEquation_computeB_temp1","rjxt","FrictionEquation_computeB_temp2","ContactMaterial","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","materials","Material","name","Spring","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","r_unit","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_tmp","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","ri_x_f","applyForce_ri_x_f","rj_x_f","applyForce_rj_x_f","rlen","tmpRay","Sphere","Cylinder","radiusTop","radiusBottom","height","numSegments","bottomface","topface","theta","thetaN","Particle","Plane","worldNormalNeedsUpdate","computeWorldNormal","tempNormal","maxVal","Heightfield","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","yi","clearCachedConvexTrianglePillar","getRectMinMax","clamp","floor","getTriangleAt","edgeClamp","getHeightAt_idx","lowerDist2","upperDist2","getTriangle","getNormalAt","getNormalAt_a","getNormalAt_b","getNormalAt_c","getNormalAt_e0","getNormalAt_e1","getHeightAt","getHeightAt_a","getHeightAt_b","getHeightAt_c","barycentricWeights","getHeightAt_weights","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","setHeightsFromImage","image","canvas","document","createElement","width","context","getContext","drawImage","imageData","getImageData","unshift","cx","cy","OctreeNode","root","children","insert","elementData","level","nodeData","maxDepth","subdivided","subdivide","halfDiagonal","child","queue","node","Array","apply","tmpAABB$1","removeEmptyNodes","Octree","Trimesh","Float32Array","Int16Array","updateEdges","updateNormals","updateAABB","updateTree","triangleAABB","i3","_getUnscaledVertex","getTrianglesInAABB","unscaledAABB","isx","isy","isz","setScale","wasUniform","isUniform","computeNormals_n","Object","split","parseInt","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector","vectorStore","getEdgeVector_va","getEdgeVector_vb","out","getWorldVertex","getTriangleVertices","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","createTorus","tube","radialSegments","tubularSegments","arc","Solver","addEquation","removeEquation","removeAllEquations","GSSolver","iterations","tolerance","iter","maxIter","tolSquared","Neq","Nbodies","invC","deltalambdaTot","GWlambda","lambdaj","invCs","GSSolver_solve_invCs","Bs","GSSolver_solve_Bs","lambda","GSSolver_solve_lambda","invDt","Pool","objects","release","args","Nargs","constructObject","resize","size","Vec3Pool","COLLISION_TYPES","sphereSphere","spherePlane","boxBox","sphereBox","planeBox","convexConvex","sphereConvex","planeConvex","boxConvex","sphereHeightfield","boxHeightfield","convexHeightfield","sphereParticle","planeParticle","boxParticle","convexParticle","sphereTrimesh","planeTrimesh","Narrowphase","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","defaultContactMaterial","enableFrictionReduction","createContactEquation","si","sj","overrideShapeA","overrideShapeB","cm","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","gravity","reducedMass","pool","createFrictionFromAverage","numContacts","f1","f2","averageNormal","averageContactPointA","averageContactPointB","invNumContacts","getContacts","oldcontacts","frictionPool","tmpQuat1","qj","tmpQuat2","tmpVec1$2","tmpVec2$2","bodyContactMaterial","getContactMaterial","justTest","shapeContactMaterial","resolverIndex","resolver","retval","shapeOverlapKeeper","bodyOverlapKeeper","rsi","rsj","point_on_plane_to_sphere","plane_to_sphere_ortho","sphereBox_sides","box_to_sphere","R","side_ns","sphereBox_side_ns","side_ns1","sphereBox_side_ns1","side_ns2","sphereBox_side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","sphereBox_ns","ns1","sphereBox_ns1","ns2","sphereBox_ns2","h1","h2","dot1","dot2","sphere_to_corner","sphereBox_sphere_to_corner","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","sepAxis","convexConvex_sepAxis","convexConvex_q","convex_to_sphere","worldCorner","sphereConvex_worldCorner","sphereConvex_sphereToCorner","nfaces","sphereConvex_worldNormal","sphereConvex_worldPoint","worldSpherePointClosestToPlane","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","penetration","worldPointToSphere","sphereConvex_sphereToWorldPoint","faceVerts","Nverts","worldVertex","pointInPolygon","penetrationVec2","penetrationSpherePoint","Nfaceverts","sphereConvex_edge","edgeUnit","sphereConvex_edgeUnit","v1_to_xi","xi_to_p","planeShape","convexShape","planePosition","convexPosition","planeQuat","convexQuat","planeBody","convexBody","planeConvex_v","planeConvex_normal","relpos","planeConvex_relpos","projected","planeConvex_projected","sphereShape","hfShape","spherePos","hfPos","sphereQuat","hfQuat","sphereBody","hfBody","sphereHeightfield_tmp2","localSpherePos","sphereHeightfield_tmp1","ceil","minMax","numContactsBefore","intersecting","convexPos","convexHeightfield_tmp2","convexHeightfield_faceList","localConvexPos","convexHeightfield_tmp1","particleSphere_normal","particlePlane_normal","particlePlane_relpos","particlePlane_projected","penetratedFaceIndex","penetratedFaceNormal","convexParticle_penetratedFaceNormal","worldPenetrationVec","convexParticle_worldPenetrationVec","minPenetration","local","convexParticle_local","cqj","convexParticle_vertexToParticle","trimeshShape","trimeshPos","trimeshQuat","trimeshBody","edgeVertexA","sphereTrimesh_edgeVertexA","edgeVertexB","sphereTrimesh_edgeVertexB","edgeVector","sphereTrimesh_edgeVector","edgeVectorUnit","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","localSphereAABB","sphereTrimesh_localSphereAABB","sphereTrimesh_v2","sphereTrimesh_relpos","sphereTrimesh_triangles","sphereRadius","sphereTrimesh_v","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_normal","planePos","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","positiveResult","edge_x_normal","vertex_to_p","OverlapKeeper","current","previous","getKey","tick","getDiff","additions","removals","al","bl","keyA","unpackAndPush","keyB","array","TupleDictionary","World","contacts","frictionEquations","quatNormalizeSkip","stepnumber","default_dt","nextId","hasActiveBodies","solver","constraints","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","defaultMaterial","doProfiling","profile","makeContactConstraints","accumulator","subsystems","addBodyEvent","removeBodyEvent","idToBodyMap","numObjects","collisionMatrixTick","addConstraint","removeConstraint","rayTest","raycastClosest","raycastAll","tmpRay$1","raycastAny","addBody","removeBody","getBodyById","getShapeById","sl","addMaterial","m","addContactMaterial","cmat","step","timeSinceLastCalled","maxSubSteps","internalStep","substeps","World_step_p1","World_step_p2","profilingStart","World_step_frictionEquationPool","gnorm","gx","gy","gz","performance","now","Nsubsystems","Nconstraints","World_step_oldContacts","NoldContacts","NoldFrictionEquations","ncontacts","mu","speedSquaredB","speedLimitSquaredB","speedSquaredA","speedLimitSquaredA","World_step_collideEvent","contact","emitContactEvents","ld","av","ad","World_step_preStepEvent","clearForces","World_step_postStepEvent","tau","tmpAABB1","nowOffset","Date","timing","navigationStart","beginContactEvent","endContactEvent","beginShapeContactEvent","endShapeContactEvent","hasBeginContact","hasEndContact","hasBeginShapeContact","hasEndShapeContact","springs","rays","config","subscriptions","tempVector","createShape","map","syncBodies","self","postMessage","op","uuid","reduce","acc","onmessage","positions","quaternions","broadphases","assign","numberOfBodies","observations","active","buffer","rotation","bodyType","onCollide","extra","toUpperCase","forEach","shapeBody","impactVelocity","collisionFilters","bodyFilterGroup","bodyFilterMask","targetFilterGroup","targetFilterMask","optns","isArray","constraint","filter","thisId","spring","postStepSpring","rest"],"mappings":"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"}', false);
/* eslint-enable */

function Provider({
  children,
  step = 1 / 60,
  gravity = [0, -10, 0],
  tolerance = 0.001,
  iterations = 5,
  allowSleep = false,
  broadphase = 'Naive',
  axisIndex = 0,
  defaultContactMaterial = {
    contactEquationStiffness: 1e6
  },
  size = 1000
}) {
  const {
    invalidate
  } = useThree();
  const [worker] = useState(() => new WorkerFactory());
  const [refs] = useState({});
  const [buffers] = useState(() => ({
    positions: new Float32Array(size * 3),
    quaternions: new Float32Array(size * 4)
  }));
  const [events] = useState({});
  const [subscriptions] = useState({});
  const bodies = useRef({});
  useEffect(() => {
    worker.postMessage({
      op: 'init',
      props: {
        gravity,
        tolerance,
        step,
        iterations,
        broadphase,
        allowSleep,
        axisIndex,
        defaultContactMaterial
      }
    });

    function loop() {
      worker.postMessage(_extends({
        op: 'step'
      }, buffers), [buffers.positions.buffer, buffers.quaternions.buffer]);
    }

    worker.onmessage = e => {
      switch (e.data.op) {
        case 'frame':
          buffers.positions = e.data.positions;
          buffers.quaternions = e.data.quaternions;
          e.data.observations.forEach(([id, value]) => subscriptions[id](value));
          requestAnimationFrame(loop);
          if (e.data.active) invalidate();
          break;

        case 'sync':
          bodies.current = e.data.bodies.reduce((acc, id) => _extends({}, acc, {
            [id]: e.data.bodies.indexOf(id)
          }), {});
          break;

        case 'event':
          switch (e.data.type) {
            case 'collide':
              events[e.data.target](_extends({}, e.data, {
                target: refs[e.data.target],
                body: refs[e.data.body]
              }));
              break;

            case 'rayhit':
              events[e.data.ray.uuid](_extends({}, e.data, {
                body: e.data.body ? refs[e.data.body] : null
              }));
              break;
          }

          break;
      }
    };

    loop();
    return () => worker.terminate();
  }, []);
  const api = useMemo(() => ({
    worker,
    bodies,
    refs,
    buffers,
    events,
    subscriptions
  }), [worker, bodies, refs, buffers, events, subscriptions]);
  return /*#__PURE__*/React.createElement(context.Provider, {
    value: api
  }, children);
}

export default Provider;
