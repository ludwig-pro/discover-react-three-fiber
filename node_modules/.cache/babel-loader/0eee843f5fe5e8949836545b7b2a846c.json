{"ast":null,"code":"import _slicedToArray from \"/Users/ludwig/source/pong-react-three-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ludwig/source/pong-react-three-js/src/index.js\";\nimport ReactDOM from 'react-dom';\nimport React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from 'react-three-fiber';\nimport './styles.css';\n\nconst ball = ({\n  args = [0.5, 32, 32]\n}) => {\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }));\n};\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        hovered = _useState2[0],\n        setHover = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        active = _useState4[0],\n        setActive = _useState4[1]; // Rotate mesh every frame, this is outside of React without overhead\n\n\n  useFrame(() => mesh.current.rotation.x = mesh.current.rotation.y += 0.01);\n  return /*#__PURE__*/React.createElement(\"mesh\", Object.assign({}, props, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: e => setActive(!active),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: hovered ? 'hotpink' : 'orange',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }));\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Canvas, {\n  colorManagement: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"ambientLight\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"pointLight\", {\n  position: [10, 10, 10],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Box, {\n  position: [-1.2, 0, 0],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(Box, {\n  position: [1.2, 0, 0],\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/ludwig/source/pong-react-three-js/src/index.js"],"names":["ReactDOM","React","useRef","useState","Canvas","useFrame","ball","args","Box","props","mesh","hovered","setHover","active","setActive","current","rotation","x","y","e","render","document","getElementById"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,mBAAjC;AACA,OAAO,cAAP;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV;AAAT,CAAD,KAA8B;AACzC,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAsB,IAAA,KAAK,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAPD;;AASA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB;AACA,QAAMC,IAAI,GAAGR,MAAM,EAAnB,CAFkB,CAIlB;;AAJkB,oBAKUC,QAAQ,CAAC,KAAD,CALlB;AAAA;AAAA,QAKXQ,OALW;AAAA,QAKFC,QALE;;AAAA,qBAMUT,QAAQ,CAAC,KAAD,CANlB;AAAA;AAAA,QAMXU,MANW;AAAA,QAMHC,SANG,kBAQlB;;;AACAT,EAAAA,QAAQ,CAAC,MAAOK,IAAI,CAACK,OAAL,CAAaC,QAAb,CAAsBC,CAAtB,GAA0BP,IAAI,CAACK,OAAL,CAAaC,QAAb,CAAsBE,CAAtB,IAA2B,IAA7D,CAAR;AAEA,sBACE,8CACMT,KADN;AAEE,IAAA,GAAG,EAAEC,IAFP;AAGE,IAAA,KAAK,EAAEG,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHpC;AAIE,IAAA,OAAO,EAAGM,CAAD,IAAOL,SAAS,CAAC,CAACD,MAAF,CAJ3B;AAKE,IAAA,aAAa,EAAGM,CAAD,IAAOP,QAAQ,CAAC,IAAD,CALhC;AAME,IAAA,YAAY,EAAGO,CAAD,IAAOP,QAAQ,CAAC,KAAD,CAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOE;AAAmB,IAAA,MAAM,EAAC,UAA1B;AAAqC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE;AAAsB,IAAA,MAAM,EAAC,UAA7B;AAAwC,IAAA,KAAK,EAAED,OAAO,GAAG,SAAH,GAAe,QAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD;;AAEDX,QAAQ,CAACoB,MAAT,eACE,oBAAC,MAAD;AAAQ,EAAA,eAAe,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE;AAAY,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,eAGE,oBAAC,GAAD;AAAK,EAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,EAAO,CAAP,EAAU,CAAV,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,eAIE,oBAAC,GAAD;AAAK,EAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,CADF,EAOEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPF","sourcesContent":["import ReactDOM from 'react-dom'\nimport React, { useRef, useState } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport './styles.css'\n\nconst ball = ({ args = [0.5, 32, 32] }) => {\n  return (\n    <mesh>\n      <sphereBufferGeometry />\n      <meshStandardMaterial color=\"white\" />\n    </mesh>\n  )\n}\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01))\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nReactDOM.render(\n  <Canvas colorManagement>\n    <ambientLight />\n    <pointLight position={[10, 10, 10]} />\n    <Box position={[-1.2, 0, 0]} />\n    <Box position={[1.2, 0, 0]} />\n  </Canvas>,\n  document.getElementById('root')\n)\n"]},"metadata":{},"sourceType":"module"}